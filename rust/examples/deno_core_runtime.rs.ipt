crate
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        rusty_v8
     as
     identifier
      v8
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        bindings
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        error
      ::
      simplePathSegment
       identifier
        attach_handle_to_error
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        error
      ::
      simplePathSegment
       identifier
        generic_error
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        error
      ::
      simplePathSegment
       identifier
        AnyError
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        error
      ::
      simplePathSegment
       identifier
        ErrWithV8Handle
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        error
      ::
      simplePathSegment
       identifier
        JsError
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        FutureExt
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        module_specifier
      ::
      simplePathSegment
       identifier
        ModuleSpecifier
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        LoadState
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        ModuleId
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        ModuleLoadId
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        ModuleLoader
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        ModuleSource
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        Modules
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        NoopModuleLoader
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        PrepareLoadFuture
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        modules
      ::
      simplePathSegment
       identifier
        RecursiveModuleLoad
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        ops
     ::
     *
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        shared_queue
      ::
      simplePathSegment
       identifier
        SharedQueue
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        shared_queue
      ::
      simplePathSegment
       identifier
        RECOMMENDED_SIZE
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        BufVec
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        OpState
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        channel
      ::
      simplePathSegment
       identifier
        mpsc
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        future
      ::
      simplePathSegment
       identifier
        poll_fn
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        stream
      ::
      simplePathSegment
       identifier
        FuturesUnordered
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        stream
      ::
      simplePathSegment
       identifier
        StreamExt
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        stream
      ::
      simplePathSegment
       identifier
        StreamFuture
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        task
      ::
      simplePathSegment
       identifier
        AtomicWaker
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        Future
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        any
      ::
      simplePathSegment
       identifier
        Any
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        cell
      ::
      simplePathSegment
       identifier
        Cell
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        cell
      ::
      simplePathSegment
       identifier
        RefCell
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        collections
      ::
      simplePathSegment
       identifier
        HashMap
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        convert
      ::
      simplePathSegment
       identifier
        TryFrom
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        ffi
      ::
      simplePathSegment
       identifier
        c_void
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        mem
      ::
      simplePathSegment
       identifier
        forget
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        option
      ::
      simplePathSegment
       identifier
        Option
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        pin
      ::
      simplePathSegment
       identifier
        Pin
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        rc
      ::
      simplePathSegment
       identifier
        Rc
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        sync
      ::
      simplePathSegment
       identifier
        Once
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        task
      ::
      simplePathSegment
       identifier
        Context
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        task
      ::
      simplePathSegment
       identifier
        Poll
    ;
 item
  visItem
   typeAlias
    type
    identifier
     PendingOpFuture
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Pin
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Box
                  genericArgs
                   <
                   genericArgsTypes
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       dyn
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Future
                          genericArgs
                           <
                           genericArg
                            genericArgsBinding
                             identifier
                              Output
                             =
                             type_
                              typeNoBounds
                               tupleType
                                (
                                type_
                                 typeNoBounds
                                  traitObjectTypeOneBound
                                   traitBound
                                    typePath
                                     typePathSegment
                                      pathIdentSegment
                                       identifier
                                        OpId
                                ,
                                type_
                                 typeNoBounds
                                  traitObjectTypeOneBound
                                   traitBound
                                    typePath
                                     typePathSegment
                                      pathIdentSegment
                                       identifier
                                        Box
                                      genericArgs
                                       <
                                       genericArgsTypes
                                        type_
                                         typeNoBounds
                                          sliceType
                                           [
                                           type_
                                            typeNoBounds
                                             traitObjectTypeOneBound
                                              traitBound
                                               typePath
                                                typePathSegment
                                                 pathIdentSegment
                                                  identifier
                                                   u8
                                           ]
                                       >
                                )
                           >
                   >
           >
    ;
 item
  visItem
   visibility
    pub
   enumeration
    enum
    identifier
     Snapshot
    {
    enumItems
     enumItem
      identifier
       Static
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           referenceType
            &
            lifetime
             'static
            typeNoBounds
             sliceType
              [
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      u8
              ]
       )
     ,
     enumItem
      identifier
       JustCreated
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 v8
              ::
              typePathSegment
               pathIdentSegment
                identifier
                 StartupData
       )
     ,
     enumItem
      identifier
       Boxed
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Box
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   sliceType
                    [
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            u8
                    ]
                >
       )
     ,
    }
 item
  visItem
   visibility
    pub
   typeAlias
    type
    identifier
     JsErrorCreateFn
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       dyn
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Fn
          typePathFn
           (
           typePathInputs
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    JsError
           )
           ->
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   AnyError
    ;
 item
  visItem
   visibility
    pub
   typeAlias
    type
    identifier
     GetErrorClassFn
    =
    type_
     typeNoBounds
      referenceType
       &
       lifetime
        'static
       typeNoBounds
        traitObjectTypeOneBound
         dyn
         traitBound
          forLifetimes
           for
           genericParams
            <
            genericParam
             lifetimeParam
              'e
            >
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Fn
            typePathFn
             (
             typePathInputs
              type_
               typeNoBounds
                referenceType
                 &
                 lifetime
                  'e
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
             )
             ->
             type_
              typeNoBounds
               referenceType
                &
                lifetime
                 'static
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       str
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Default
      )
   ]
  visItem
   struct_
    structStruct
     struct
     identifier
      IsolateAllocations
     {
     structFields
      structField
       identifier
        near_heap_limit_callback_data
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 tupleType
                  (
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          Box
                        genericArgs
                         <
                         genericArgsTypes
                          type_
                           typeNoBounds
                            traitObjectTypeOneBound
                             traitBound
                              typePath
                               typePathSegment
                                pathIdentSegment
                                 identifier
                                  RefCell
                                genericArgs
                                 <
                                 genericArgsTypes
                                  type_
                                   typeNoBounds
                                    traitObjectTypeOneBound
                                     dyn
                                     traitBound
                                      typePath
                                       typePathSegment
                                        pathIdentSegment
                                         identifier
                                          Any
                                 >
                         >
                  ,
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          v8
                       ::
                       typePathSegment
                        pathIdentSegment
                         identifier
                          NearHeapLimitCallback
                  )
              >
      ,
     }
 item
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      JsRuntime
     {
     structFields
      structField
       identifier
        v8_isolate
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       OwnedIsolate
              >
      ,
      structField
       identifier
        snapshot_creator
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       SnapshotCreator
              >
      ,
      structField
       identifier
        has_snapshotted
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               bool
      ,
      structField
       identifier
        needs_init
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               bool
      ,
      structField
       identifier
        allocations
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               IsolateAllocations
      ,
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      DynImportModEvaluate
     {
     structFields
      structField
       identifier
        module_id
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ModuleId
      ,
      structField
       identifier
        promise
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               v8
            ::
            typePathSegment
             pathIdentSegment
              identifier
               Global
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Promise
              >
      ,
      structField
       identifier
        module
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               v8
            ::
            typePathSegment
             pathIdentSegment
              identifier
               Global
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Module
              >
      ,
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      ModEvaluate
     {
     structFields
      structField
       identifier
        promise
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               v8
            ::
            typePathSegment
             pathIdentSegment
              identifier
               Global
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Promise
              >
      ,
      structField
       identifier
        sender
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               mpsc
            ::
            typePathSegment
             pathIdentSegment
              identifier
               Sender
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Result
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         tupleType
                          (
                          )
                       ,
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               AnyError
                      >
              >
      ,
     }
 item
  visItem
   visibility
    pub
    (
    crate
    )
   struct_
    structStruct
     struct
     identifier
      JsRuntimeState
     {
     structFields
      structField
       visibility
        pub
       identifier
        global_context
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Context
                      >
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        shared_ab
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               SharedArrayBuffer
                      >
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        js_recv_cb
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Function
                      >
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        js_macrotask_cb
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Function
                      >
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        pending_promise_exceptions
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               HashMap
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Promise
                      >
               ,
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Value
                      >
              >
      ,
      structField
       identifier
        pending_dyn_mod_evaluate
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               HashMap
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModuleLoadId
               ,
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       DynImportModEvaluate
              >
      ,
      structField
       identifier
        pending_mod_evaluate
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModEvaluate
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        js_error_create_fn
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Rc
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       JsErrorCreateFn
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        shared
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               SharedQueue
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        pending_ops
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               FuturesUnordered
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       PendingOpFuture
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        pending_unref_ops
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               FuturesUnordered
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       PendingOpFuture
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        have_unpolled_ops
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Cell
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       bool
              >
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        op_state
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Rc
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       RefCell
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               OpState
                      >
              >
      ,
      structField
       visibility
        pub
       identifier
        loader
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Rc
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  dyn
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModuleLoader
              >
      ,
      structField
       visibility
        pub
       identifier
        modules
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Modules
      ,
      structField
       visibility
        pub
        (
        crate
        )
       identifier
        dyn_import_map
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               HashMap
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModuleLoadId
               ,
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Global
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            typePathSegment
                             pathIdentSegment
                              identifier
                               PromiseResolver
                      >
              >
      ,
      structField
       identifier
        preparing_dyn_imports
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               FuturesUnordered
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Pin
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               Box
                             genericArgs
                              <
                              genericArgsTypes
                               type_
                                typeNoBounds
                                 traitObjectTypeOneBound
                                  traitBound
                                   typePath
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       PrepareLoadFuture
                              >
                      >
              >
      ,
      structField
       identifier
        pending_dyn_imports
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               FuturesUnordered
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       StreamFuture
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               RecursiveModuleLoad
                      >
              >
      ,
      structField
       identifier
        waker
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AtomicWaker
      ,
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         Drop
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             JsRuntime
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        drop
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       creator
                 )
             =
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               identifier
                snapshot_creator
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 take
              (
              )
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     v8_isolate
                 =
                 expression
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    identifier
                     v8_isolate
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      take
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        forget
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8_isolate
                  )
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  ifExpression
                   if
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    identifier
                     has_snapshotted
                   blockExpression
                    {
                    statements
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              drop
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               creator
                        )
                       ;
                    }
              }
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       allow
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          clippy
       tokenTreeToken
        macroPunctuationToken
         ::
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          missing_safety_doc
      )
   ]
  visItem
   visibility
    pub
   function_
    functionQualifiers
     unsafe
    fn
    identifier
     v8_init
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            platform
        =
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                v8
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                new_default_platform
          (
          )
         .
         pathExprSegment
          pathIdentSegment
           identifier
            unwrap
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               v8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               V8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               initialize_platform
         (
         callParams
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                platform
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               v8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               V8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               initialize
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            argv
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroLiteralToken
              literalExpression
               ""
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_string
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroLiteralToken
              literalExpression
               "--wasm-test-streaming"
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_string
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroLiteralToken
              literalExpression
               "--no-wasm-async-compilation"
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_string
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroLiteralToken
              literalExpression
               "--harmony-top-level-await"
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_string
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
           ]
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               v8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               V8
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               set_flags_from_command_line
         (
         callParams
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                argv
         )
        ;
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Default
      )
   ]
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      RuntimeOptions
     {
     structFields
      structField
       visibility
        pub
       identifier
        js_error_create_fn
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Rc
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               JsErrorCreateFn
                      >
              >
      ,
      structField
       visibility
        pub
       identifier
        get_error_class_fn
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       GetErrorClassFn
              >
      ,
      structField
       visibility
        pub
       identifier
        module_loader
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Rc
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          dyn
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               ModuleLoader
                      >
              >
      ,
      structField
       visibility
        pub
       identifier
        startup_snapshot
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Snapshot
              >
      ,
      structField
       visibility
        pub
       identifier
        will_snapshot
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               bool
      ,
      structField
       visibility
        pub
       identifier
        create_params
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       CreateParams
              >
      ,
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             JsRuntime
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        new
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               options
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  RuntimeOptions
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               Self
       blockExpression
        {
        statements
         statement
          item
           visItem
            staticItem
             static
             identifier
              DENO_INIT
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Once
             =
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Once
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              )
             ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  DENO_INIT
            .
            pathExprSegment
             pathIdentSegment
              identifier
               call_once
            (
            callParams
             expression
              closureExpression
               ||
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    expressionStatement
                     expression
                      expressionWithBlock
                       unsafeBlockExpression
                        unsafe
                        blockExpression
                         {
                         statements
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 v8_init
                           (
                           )
                         }
                     ;
                  }
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               global_context
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    isolate
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    maybe_snapshot_creator
              )
           =
           expression
            expressionWithBlock
             ifExpression
              if
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     options
               .
               identifier
                will_snapshot
              blockExpression
               {
               statements
                statement
                 item
                  macroItem
                   macroInvocationSemi
                    simplePath
                     simplePathSegment
                      identifier
                       assert
                    !
                    (
                    tokenTree
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        options
                     tokenTreeToken
                      macroPunctuationToken
                       .
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        startup_snapshot
                     tokenTreeToken
                      macroPunctuationToken
                       .
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        is_none
                    tokenTree
                     delimTokenTree
                      (
                      )
                    )
                    ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      creator
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         SnapshotCreator
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         new
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Some
                     (
                     callParams
                      expression
                       &
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             bindings
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             EXTERNAL_REFERENCES
                     )
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      isolate
                  =
                  expression
                   expressionWithBlock
                    unsafeBlockExpression
                     unsafe
                     blockExpression
                      {
                      statements
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              creator
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           get_owned_isolate
                        (
                        )
                      }
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      isolate
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         JsRuntime
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         setup_isolate
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          isolate
                   )
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   blockExpression
                    {
                    statements
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           scope
                       =
                       expression
                        &
                        mut
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               HandleScope
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               new
                         (
                         callParams
                          expression
                           &
                           mut
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 isolate
                         )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           context
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              bindings
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              initialize_context
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                        )
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              global_context
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Global
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               new
                         (
                         callParams
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                scope
                          ,
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                context
                         )
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              creator
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           set_default_context
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               context
                        )
                       ;
                    }
                expression
                 (
                 tupleElements
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        isolate
                  ,
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          creator
                   )
                 )
               }
              else
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      params
                  =
                  expression
                   expression
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            options
                      .
                      identifier
                       create_params
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        take
                     (
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap_or_else
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           v8
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Isolate
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           create_params
                    )
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      external_references
                   (
                   callParams
                    expression
                     &
                     expression
                      *
                      expression
                       *
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             bindings
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             EXTERNAL_REFERENCES
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      snapshot_loaded
                  =
                  expression
                   expressionWithBlock
                    ifLetExpression
                     if
                     let
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Some
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               snapshot
                         )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            options
                      .
                      identifier
                       startup_snapshot
                     blockExpression
                      {
                      statements
                       statement
                        expressionStatement
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                params
                          =
                          expression
                           expressionWithBlock
                            matchExpression
                             match
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   snapshot
                             {
                             matchArms
                              matchArm
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Snapshot
                                    ::
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Static
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         data
                                   )
                              =>
                              matchArmExpression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      params
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   snapshot_blob
                                (
                                callParams
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       data
                                )
                               ,
                              matchArm
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Snapshot
                                    ::
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       JustCreated
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         data
                                   )
                              =>
                              matchArmExpression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      params
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   snapshot_blob
                                (
                                callParams
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       data
                                )
                               ,
                              matchArm
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Snapshot
                                    ::
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Boxed
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         data
                                   )
                              =>
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     params
                               .
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  snapshot_blob
                               (
                               callParams
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      data
                               )
                              ,
                             }
                         ;
                       expression
                        literalExpression
                         true
                      }
                     else
                     blockExpression
                      {
                      statements
                       expression
                        literalExpression
                         false
                      }
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      isolate
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Isolate
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         new
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          params
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      isolate
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         JsRuntime
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         setup_isolate
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          isolate
                   )
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   blockExpression
                    {
                    statements
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           scope
                       =
                       expression
                        &
                        mut
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               HandleScope
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               new
                         (
                         callParams
                          expression
                           &
                           mut
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 isolate
                         )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           context
                       =
                       expression
                        expressionWithBlock
                         ifExpression
                          if
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                snapshot_loaded
                          blockExpression
                           {
                           statements
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   v8
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Context
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   new
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    scope
                             )
                           }
                          else
                          blockExpression
                           {
                           statements
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   bindings
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   initialize_context
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    scope
                             )
                           }
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              global_context
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Global
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               new
                         (
                         callParams
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                scope
                          ,
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                context
                         )
                       ;
                    }
                expression
                 (
                 tupleElements
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        isolate
                  ,
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        None
                 )
               }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               loader
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   options
             .
             identifier
              module_loader
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_or_else
            (
            callParams
             expression
              closureExpression
               ||
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Rc
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      new
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       NoopModuleLoader
                )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_error_create_fn
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   options
             .
             identifier
              js_error_create_fn
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_or_else
            (
            callParams
             expression
              closureExpression
               ||
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Rc
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      new
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       JsError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       create
                )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               op_state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  OpState
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  default
            (
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       get_error_class_fn
                 )
             =
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    options
              .
              identifier
               get_error_class_fn
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         op_state
                   .
                   identifier
                    get_error_class_fn
                  =
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        get_error_class_fn
                 ;
              }
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  isolate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               set_slot
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Rc
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              callParams
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      RefCell
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      new
                (
                callParams
                 expression
                  structExpression
                   structExprStruct
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        JsRuntimeState
                    {
                    structExprFields
                     structExprField
                      identifier
                       global_context
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Some
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              global_context
                       )
                     ,
                     structExprField
                      identifier
                       pending_promise_exceptions
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             HashMap
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       pending_dyn_mod_evaluate
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             HashMap
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       pending_mod_evaluate
                      :
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            None
                     ,
                     structExprField
                      identifier
                       shared_ab
                      :
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            None
                     ,
                     structExprField
                      identifier
                       js_recv_cb
                      :
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            None
                     ,
                     structExprField
                      identifier
                       js_macrotask_cb
                      :
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            None
                     ,
                     structExprField
                      identifier
                       js_error_create_fn
                     ,
                     structExprField
                      identifier
                       shared
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             SharedQueue
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              RECOMMENDED_SIZE
                       )
                     ,
                     structExprField
                      identifier
                       pending_ops
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             FuturesUnordered
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       pending_unref_ops
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             FuturesUnordered
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       op_state
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Rc
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       callParams
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               RefCell
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               new
                         (
                         callParams
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                op_state
                         )
                       )
                     ,
                     structExprField
                      identifier
                       have_unpolled_ops
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Cell
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       callParams
                        expression
                         literalExpression
                          false
                       )
                     ,
                     structExprField
                      identifier
                       modules
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Modules
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       loader
                     ,
                     structExprField
                      identifier
                       dyn_import_map
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             HashMap
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       preparing_dyn_imports
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             FuturesUnordered
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       pending_dyn_imports
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             FuturesUnordered
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                     structExprField
                      identifier
                       waker
                      :
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             AtomicWaker
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       )
                     ,
                    }
                )
              )
            )
           ;
         expression
          structExpression
           structExprStruct
            pathInExpression
             pathExprSegment
              pathIdentSegment
               Self
            {
            structExprFields
             structExprField
              identifier
               v8_isolate
              :
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      isolate
               )
             ,
             structExprField
              identifier
               snapshot_creator
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    maybe_snapshot_creator
             ,
             structExprField
              identifier
               has_snapshotted
              :
              expression
               literalExpression
                false
             ,
             structExprField
              identifier
               needs_init
              :
              expression
               literalExpression
                true
             ,
             structExprField
              identifier
               allocations
              :
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     IsolateAllocations
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     default
               (
               )
             ,
            }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        global_context
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                v8
             ::
             typePathSegment
              pathIdentSegment
               identifier
                Global
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        v8
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Context
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow
            (
            )
           ;
         expression
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            .
            identifier
             global_context
           .
           pathExprSegment
            pathIdentSegment
             identifier
              clone
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             unwrap
          (
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        v8_isolate
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           mut
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               typePathSegment
                pathIdentSegment
                 identifier
                  OwnedIsolate
       blockExpression
        {
        statements
         expression
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             v8_isolate
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_mut
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             unwrap
          (
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        setup_isolate
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               isolate
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               typePathSegment
                pathIdentSegment
                 identifier
                  OwnedIsolate
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                v8
             ::
             typePathSegment
              pathIdentSegment
               identifier
                OwnedIsolate
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  isolate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               set_capture_stack_trace_for_uncaught_exceptions
            (
            callParams
             expression
              literalExpression
               true
             ,
             expression
              literalExpression
               10
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  isolate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               set_promise_reject_callback
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   bindings
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   promise_reject_callback
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  isolate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               set_host_initialize_import_meta_object_callback
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   bindings
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   host_initialize_import_meta_object_callback
             ,
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  isolate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               set_host_import_module_dynamically_callback
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   bindings
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   host_import_module_dynamically_callback
             ,
            )
           ;
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               isolate
        }
     associatedItem
      visibility
       pub
       (
       crate
       )
      function_
       functionQualifiers
       fn
       identifier
        state
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               isolate
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Isolate
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Rc
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        RefCell
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                JsRuntimeState
                       >
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               s
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   isolate
             .
             pathExprSegment
              pathIdentSegment
               identifier
                get_slot
              ::
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Rc
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                RefCell
                              genericArgs
                               <
                               genericArgsTypes
                                type_
                                 typeNoBounds
                                  traitObjectTypeOneBound
                                   traitBound
                                    typePath
                                     typePathSegment
                                      pathIdentSegment
                                       identifier
                                        JsRuntimeState
                               >
                       >
               >
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                s
          .
          pathExprSegment
           pathIdentSegment
            identifier
             clone
          (
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        shared_init
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              identifier
               needs_init
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   identifier
                    needs_init
                  =
                  expression
                   literalExpression
                    false
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      execute
                   (
                   callParams
                    expression
                     literalExpression
                      "deno:core/core.js"
                    ,
                    expression
                     macroInvocation
                      simplePath
                       simplePathSegment
                        identifier
                         include_str
                      !
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           "core.js"
                       )
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      execute
                   (
                   callParams
                    expression
                     literalExpression
                      "deno:core/error.js"
                    ,
                    expression
                     macroInvocation
                      simplePath
                       simplePathSegment
                        identifier
                         include_str
                      !
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           "error.js"
                       )
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
              }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        op_state
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Rc
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        RefCell
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                OpState
                       >
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  state_rc
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow
            (
            )
           ;
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 state
           .
           identifier
            op_state
          .
          pathExprSegment
           pathIdentSegment
            identifier
             clone
          (
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        execute
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_filename
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_source
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               shared_init
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               source
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   String
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    js_source
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               name
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   String
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    js_filename
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               origin
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  bindings
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  script_origin
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   name
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tc_scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   TryCatch
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               script
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     v8
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Script
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     compile
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      tc_scope
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      source
                ,
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                 (
                 callParams
                  expression
                   &
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         origin
                 )
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          script
                    )
               =>
               matchArmExpression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      script
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     None
               =>
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         exception
                     =
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             tc_scope
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          exception
                       (
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      return
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             exception_to_err_result
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              tc_scope
                        ,
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              exception
                        ,
                        expression
                         literalExpression
                          false
                       )
                     ;
                  }
              }
           ;
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    script
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 run
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     tc_scope
              )
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       wildcardPattern
                        _
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ok
                (
                callParams
                 expression
                  (
                  )
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    None
              =>
              expression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          tc_scope
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          has_caught
                      tokenTree
                       delimTokenTree
                        (
                        )
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        exception
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            tc_scope
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         exception
                      (
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         exception_to_err_result
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          exception
                    ,
                    expression
                     literalExpression
                      false
                   )
                 }
             }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        snapshot
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                v8
             ::
             typePathSegment
              pathIdentSegment
               identifier
                StartupData
       blockExpression
        {
        statements
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 snapshot_creator
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 is_some
             tokenTree
              delimTokenTree
               (
               )
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 borrow_mut
              (
              )
             .
             identifier
              global_context
            .
            pathExprSegment
             pathIdentSegment
              identifier
               take
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  std
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  mem
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  take
            (
            callParams
             expression
              &
              mut
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      state
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   borrow_mut
                (
                )
               .
               identifier
                modules
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot_creator
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              identifier
               snapshot_creator
             .
             pathExprSegment
              pathIdentSegment
               identifier
                as_mut
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   snapshot_creator
             .
             pathExprSegment
              pathIdentSegment
               identifier
                create_blob
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    FunctionCodeHandling
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Keep
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              has_snapshotted
            =
            expression
             literalExpression
              true
           ;
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               snapshot
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        register_op
       genericParams
        <
        genericParam
         typeParam
          identifier
           F
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               name
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               op_fn
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  F
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                OpId
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  F
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Fn
               typePathFn
                (
                typePathInputs
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Rc
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 RefCell
                               genericArgs
                                <
                                genericArgsTypes
                                 type_
                                  typeNoBounds
                                   traitObjectTypeOneBound
                                    traitBound
                                     typePath
                                      typePathSegment
                                       pathIdentSegment
                                        identifier
                                         OpState
                                >
                        >
                 ,
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         BufVec
                )
                ->
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Op
           +
           typeParamBound
            lifetime
             'static
        ,
       blockExpression
        {
        statements
         expression
          expression
           expression
            expression
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    Self
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state
               (
               callParams
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      self
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8_isolate
                 (
                 )
               )
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 borrow_mut
              (
              )
             .
             identifier
              op_state
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow_mut
            (
            )
           .
           identifier
            op_table
          .
          pathExprSegment
           pathIdentSegment
            identifier
             register_op
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 name
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 op_fn
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        add_near_heap_limit_callback
       genericParams
        <
        genericParam
         typeParam
          identifier
           C
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cb
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  C
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  C
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 FnMut
               typePathFn
                (
                typePathInputs
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         usize
                 ,
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         usize
                )
                ->
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        usize
           +
           typeParamBound
            lifetime
             'static
        ,
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               boxed_cb
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Box
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RefCell
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     cb
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               data
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   boxed_cb
             .
             pathExprSegment
              pathIdentSegment
               identifier
                as_ptr
             (
             )
            as
            typeNoBounds
             rawPointerType
              *
              mut
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     c_void
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               prev
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              identifier
               allocations
             .
             identifier
              near_heap_limit_callback_data
            .
            pathExprSegment
             pathIdentSegment
              identifier
               replace
            (
            callParams
             expression
              (
              tupleElements
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     boxed_cb
               ,
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     near_heap_limit_callback
                   ::
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             C
                    >
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     tuplePattern
                      (
                      tuplePatternItems
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          wildcardPattern
                           _
                       ,
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            prev_cb
                      )
                 )
             =
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   prev
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      v8_isolate
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     remove_near_heap_limit_callback
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         prev_cb
                   ,
                   expression
                    literalExpression
                     0
                  )
                 ;
              }
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             pathExprSegment
              pathIdentSegment
               identifier
                v8_isolate
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               add_near_heap_limit_callback
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   near_heap_limit_callback
                 ::
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           C
                  >
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   data
            )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        remove_near_heap_limit_callback
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               heap_limit
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  usize
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     tuplePattern
                      (
                      tuplePatternItems
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          wildcardPattern
                           _
                       ,
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            cb
                      )
                 )
             =
             expression
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     self
                .
                identifier
                 allocations
               .
               identifier
                near_heap_limit_callback_data
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 take
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      v8_isolate
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     remove_near_heap_limit_callback
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         cb
                   ,
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         heap_limit
                  )
                 ;
              }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
        async
       fn
       identifier
        run_event_loop
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 poll_fn
           (
           callParams
            expression
             closureExpression
              |
              closureParameters
               closureParam
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     cx
              |
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  poll_event_loop
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      cx
               )
           )
          .
          await
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        poll_event_loop
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                        ,
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AnyError
                       >
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               shared_init
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            blockExpression
             {
             statements
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    state
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       state_rc
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    borrow
                 (
                 )
                ;
              statement
               expressionStatement
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state
                  .
                  identifier
                   waker
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    register
                 (
                 callParams
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         cx
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      waker
                   (
                   )
                 )
                ;
             }
         statement
          expressionStatement
           expressionWithBlock
            blockExpression
             {
             statements
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    overflow_response
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      self
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    poll_pending_ops
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        cx
                 )
                ;
              statement
               expressionStatement
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     async_op_response
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         overflow_response
                  )
                 ?
                ;
              statement
               expressionStatement
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     drain_macrotasks
                  (
                  )
                 ?
                ;
              statement
               expressionStatement
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     check_promise_exceptions
                  (
                  )
                 ?
                ;
             }
         statement
          expressionStatement
           expressionWithBlock
            blockExpression
             {
             statements
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    poll_imports
                =
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     prepare_dyn_imports
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         cx
                  )
                 ?
                ;
              statement
               item
                macroItem
                 macroInvocationSemi
                  simplePath
                   simplePathSegment
                    identifier
                     assert
                  !
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      poll_imports
                   tokenTreeToken
                    macroPunctuationToken
                     .
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      is_ready
                  tokenTree
                   delimTokenTree
                    (
                    )
                  )
                  ;
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    poll_imports
                =
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     poll_dyn_imports
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         cx
                  )
                 ?
                ;
              statement
               item
                macroItem
                 macroInvocationSemi
                  simplePath
                   simplePathSegment
                    identifier
                     assert
                  !
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      poll_imports
                   tokenTreeToken
                    macroPunctuationToken
                     .
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      is_ready
                  tokenTree
                   delimTokenTree
                    (
                    )
                  )
                  ;
              statement
               expressionStatement
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      self
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    evaluate_dyn_imports
                 (
                 )
                ;
              statement
               expressionStatement
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     check_promise_exceptions
                  (
                  )
                 ?
                ;
             }
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               evaluate_pending_module
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  state_rc
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               has_pending_ops
           =
           expression
            !
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state
              .
              identifier
               pending_ops
             .
             pathExprSegment
              pathIdentSegment
               identifier
                is_empty
             (
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               has_pending_dyn_imports
           =
           expression
            !
            expression
             expressionWithBlock
              blockExpression
               {
               statements
                expression
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    preparing_dyn_imports
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     is_empty
                  (
                  )
                 &&
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    pending_dyn_imports
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     is_empty
                  (
                  )
               }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               has_pending_dyn_module_evaluation
           =
           expression
            !
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state
              .
              identifier
               pending_dyn_mod_evaluate
             .
             pathExprSegment
              pathIdentSegment
               identifier
                is_empty
             (
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               has_pending_module_evaluation
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   state
             .
             identifier
              pending_mod_evaluate
            .
            pathExprSegment
             pathIdentSegment
              identifier
               is_some
            (
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                expression
                 !
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       has_pending_ops
                &&
                expression
                 !
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       has_pending_dyn_imports
               &&
               expression
                !
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      has_pending_dyn_module_evaluation
              &&
              expression
               !
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     has_pending_module_evaluation
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Poll
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ready
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Ok
                     (
                     callParams
                      expression
                       (
                       )
                     )
                   )
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state
               .
               identifier
                have_unpolled_ops
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 get
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    waker
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     wake
                  (
                  )
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   has_pending_module_evaluation
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expressionWithBlock
                  ifExpression
                   if
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           has_pending_ops
                     ||
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           has_pending_dyn_imports
                    ||
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          has_pending_dyn_module_evaluation
                   blockExpression
                    {
                    }
                   else
                   blockExpression
                    {
                    statements
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           msg
                       =
                       expression
                        literalExpression
                         "Module evaluation is still pending but there are no pending ops or dynamic imports. This situation is often caused by unresolved promise."
                       ;
                     statement
                      expressionStatement
                       expression
                        return
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                         (
                         callParams
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Err
                           (
                           callParams
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   generic_error
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    msg
                             )
                           )
                         )
                       ;
                    }
              }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   has_pending_dyn_module_evaluation
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expressionWithBlock
                  ifExpression
                   if
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          has_pending_ops
                    ||
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          has_pending_dyn_imports
                   blockExpression
                    {
                    }
                   else
                   blockExpression
                    {
                    statements
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           msg
                       =
                       expression
                        literalExpression
                         "Dynamically imported module evaluation is still pending but there are no pending ops. This situation is often caused by unresolved promise."
                       ;
                     statement
                      expressionStatement
                       expression
                        return
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                         (
                         callParams
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Err
                           (
                           callParams
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   generic_error
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    msg
                             )
                           )
                         )
                       ;
                    }
              }
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               Poll
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               Pending
        }
     }
 item
  visItem
   function_
    functionQualifiers
     extern
     abi
      "C"
    fn
    identifier
     near_heap_limit_callback
    genericParams
     <
     genericParam
      typeParam
       identifier
        F
     >
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            data
       :
       type_
        typeNoBounds
         rawPointerType
          *
          mut
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 c_void
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            current_heap_limit
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               usize
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            initial_heap_limit
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               usize
     ,
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             usize
    whereClause
     where
     whereClauseItem
      typeBoundWhereClauseItem
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
       :
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              FnMut
            typePathFn
             (
             typePathInputs
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      usize
              ,
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      usize
             )
             ->
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     usize
     ,
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            callback
        =
        expression
         expressionWithBlock
          unsafeBlockExpression
           unsafe
           blockExpression
            {
            statements
             expression
              &
              mut
              expression
               *
               expression
                (
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       data
                 as
                 typeNoBounds
                  rawPointerType
                   *
                   mut
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          F
                )
            }
        ;
      expression
       expression
        pathExpression
         pathInExpression
          pathExprSegment
           pathIdentSegment
            identifier
             callback
       (
       callParams
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              current_heap_limit
        ,
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              initial_heap_limit
       )
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             JsRuntimeState
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_cb
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolver_handle
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               typePathSegment
                pathIdentSegment
                 identifier
                  Global
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          v8
                       ::
                       typePathSegment
                        pathIdentSegment
                         identifier
                          PromiseResolver
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               specifier
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               referrer
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
       )
       blockExpression
        {
        statements
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                debug
             !
             (
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "dyn_import specifier {} referrer {} "
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 specifier
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 referrer
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               load
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  RecursiveModuleLoad
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  dynamic_import
            (
            callParams
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               identifier
                op_state
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 clone
              (
              )
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   specifier
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   referrer
             ,
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               identifier
                loader
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 clone
              (
              )
             ,
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              dyn_import_map
            .
            pathExprSegment
             pathIdentSegment
              identifier
               insert
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    load
              .
              identifier
               id
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   resolver_handle
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              waker
            .
            pathExprSegment
             pathIdentSegment
              identifier
               wake
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               fut
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   load
             .
             pathExprSegment
              pathIdentSegment
               identifier
                prepare
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               boxed_local
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              preparing_dyn_imports
            .
            pathExprSegment
             pathIdentSegment
              identifier
               push
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   fut
            )
           ;
        }
     }
 item
  visItem
   visibility
    pub
    (
    crate
    )
   function_
    functionQualifiers
    fn
    identifier
     exception_to_err_result
    genericParams
     <
     genericParam
      lifetimeParam
       's
     ,
     genericParam
      typeParam
       identifier
        T
     >
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            scope
       :
       type_
        typeNoBounds
         referenceType
          &
          mut
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 v8
              ::
              typePathSegment
               pathIdentSegment
                identifier
                 HandleScope
               genericArgs
                <
                genericArgsLifetimes
                 lifetime
                  's
                >
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            exception
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               v8
            ::
            typePathSegment
             pathIdentSegment
              identifier
               Local
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Value
              >
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            in_promise
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               bool
     ,
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             Result
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
             ,
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     AnyError
            >
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            is_terminating_exception
        =
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                scope
          .
          pathExprSegment
           pathIdentSegment
            identifier
             thread_safe_handle
          (
          )
         .
         pathExprSegment
          pathIdentSegment
           identifier
            is_execution_terminating
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            exception
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              exception
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                is_terminating_exception
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      scope
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   thread_safe_handle
                (
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  cancel_terminate_execution
               (
               )
              ;
            statement
             expressionStatement
              expressionWithBlock
               ifExpression
                if
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       exception
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    is_null_or_undefined
                 (
                 )
                blockExpression
                 {
                 statements
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        message
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            v8
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            String
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            new
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             scope
                       ,
                       expression
                        literalExpression
                         "execution terminated"
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  statement
                   expressionStatement
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           exception
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            v8
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Exception
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            error
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             scope
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             message
                      )
                    ;
                 }
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            js_error
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               JsError
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               from_v8_exception
         (
         callParams
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                scope
          ,
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                exception
         )
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                in_promise
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      js_error
                .
                identifier
                 message
               =
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    format
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "Uncaught (in promise) {}"
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      js_error
                   tokenTreeToken
                    macroPunctuationToken
                     .
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      message
                   tokenTreeToken
                    macroPunctuationToken
                     .
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      trim_start_matches
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Uncaught "
                    )
                  )
              ;
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            state_rc
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               JsRuntime
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               state
         (
         callParams
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                scope
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            state
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               state_rc
         .
         pathExprSegment
          pathIdentSegment
           identifier
            borrow
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            js_error
        =
        expression
         expression
          (
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 state
           .
           identifier
            js_error_create_fn
          )
         (
         callParams
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                js_error
         )
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                is_terminating_exception
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      scope
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   thread_safe_handle
                (
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  terminate_execution
               (
               )
              ;
           }
      expression
       expression
        pathExpression
         pathInExpression
          pathExprSegment
           pathIdentSegment
            identifier
             Err
       (
       callParams
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              js_error
       )
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             JsRuntime
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        mod_new
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               main
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  bool
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               name
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               source
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ModuleId
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               name_str
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   String
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    name
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               source_str
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   String
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    source
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               origin
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  bindings
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  module_origin
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   name_str
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               source
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  script_compiler
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  Source
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   source_str
             ,
             expression
              &
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    origin
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tc_scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   TryCatch
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               maybe_module
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  script_compiler
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  compile_module
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   tc_scope
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   source
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    tc_scope
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 has_caught
              (
              )
             blockExpression
              {
              statements
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      assert
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       maybe_module
                    tokenTreeToken
                     macroPunctuationToken
                      .
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       is_none
                   tokenTree
                    delimTokenTree
                     (
                     )
                   )
                   ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     e
                 =
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         tc_scope
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      exception
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         exception_to_err_result
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          e
                    ,
                    expression
                     literalExpression
                      false
                   )
                 ;
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  maybe_module
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               import_specifiers
           :
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Vec
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           ModuleSpecifier
                  >
           =
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                vec
             !
             delimTokenTree
              [
              ]
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             iteratorLoopExpression
              for
              pattern
               patternNoTopAlt
                patternWithoutRange
                 identifierPattern
                  identifier
                   i
              in
              expression
               expression
                literalExpression
                 0
               ..
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      module
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   get_module_requests_length
                (
                )
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      import_specifier
                  =
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       get_module_request
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           i
                    )
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      to_rust_string_lossy
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      state
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state_rc
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      borrow
                   (
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      module_specifier
                  =
                  expression
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           state
                     .
                     identifier
                      loader
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       resolve
                    (
                    callParams
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             state
                       .
                       identifier
                        op_state
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         clone
                      (
                      )
                     ,
                     expression
                      &
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            import_specifier
                     ,
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           name
                     ,
                     expression
                      literalExpression
                       false
                     ,
                    )
                   ?
                  ;
                statement
                 expressionStatement
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         import_specifiers
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      push
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module_specifier
                   )
                  ;
               }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state_rc
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 borrow_mut
              (
              )
             .
             identifier
              modules
            .
            pathExprSegment
             pathIdentSegment
              identifier
               register
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   name
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   main
             ,
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Global
                  ::
                  genericArgs
                   <
                   genericArgsTypes
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            v8
                         ::
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Module
                   >
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     tc_scope
               ,
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     module
              )
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   import_specifiers
             ,
            )
           ;
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                Ok
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 id
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        mod_instantiate
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleId
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tc_scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   TryCatch
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module
           =
           expression
            expression
             expression
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      state_rc
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   borrow
                (
                )
               .
               identifier
                modules
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 get_handle
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     id
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                map
             (
             callParams
              expression
               closureExpression
                |
                closureParameters
                 closureParam
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       handle
                |
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Local
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       new
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        tc_scope
                  ,
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        handle
                 )
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "ModuleInfo not found"
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     module
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  get_status
               (
               )
              comparisonOperator
               ==
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModuleStatus
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Errored
             blockExpression
              {
              statements
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       exception_to_err_result
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        tc_scope
                  ,
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         module
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      get_exception
                   (
                   )
                  ,
                  expression
                   literalExpression
                    false
                 )
                ?
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               result
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  module
            .
            pathExprSegment
             pathIdentSegment
              identifier
               instantiate_module
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   tc_scope
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   bindings
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   module_resolve_callback
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   result
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       wildcardPattern
                        _
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ok
                (
                callParams
                 expression
                  (
                  )
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    None
              =>
              expression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        exception
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            tc_scope
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         exception
                      (
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         exception_to_err_result
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          exception
                    ,
                    expression
                     literalExpression
                      false
                   )
                 }
             }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        dyn_mod_evaluate
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               load_id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoadId
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleId
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               shared_init
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context1
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module_handle
           =
           expression
            expression
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state_rc
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  borrow
               (
               )
              .
              identifier
               modules
             .
             pathExprSegment
              pathIdentSegment
               identifier
                get_handle
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    id
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "ModuleInfo not found"
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               status
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     scope
                 =
                 expression
                  &
                  mut
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         HandleScope
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         with_context
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          self
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        v8_isolate
                     (
                     )
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          context
                   )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     module
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        module_handle
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     get
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         scope
                  )
                 ;
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      module
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   get_status
                (
                )
              }
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    status
              comparisonOperator
               ==
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModuleStatus
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Instantiated
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     scope
                 =
                 expression
                  &
                  mut
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         HandleScope
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         with_context
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          self
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        v8_isolate
                     (
                     )
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          context1
                   )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     module
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        v8
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Local
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        new
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         scope
                   ,
                   expression
                    &
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module_handle
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     maybe_value
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        module
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     evaluate
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         scope
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     status
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        module
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     get_status
                  (
                  )
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  ifLetExpression
                   if
                   let
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Some
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             value
                       )
                   =
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         maybe_value
                   blockExpression
                    {
                    statements
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            assert
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Evaluated
                          tokenTreeToken
                           macroPunctuationToken
                            ||
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Errored
                         )
                         ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise
                       =
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Local
                             ::
                             genericArgs
                              <
                              genericArgsTypes
                               type_
                                typeNoBounds
                                 traitObjectTypeOneBound
                                  traitBound
                                   typePath
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       v8
                                    ::
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       Promise
                              >
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               try_from
                         (
                         callParams
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                value
                         )
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           expect
                        (
                        callParams
                         expression
                          literalExpression
                           "Expected to get promise as module evaluation result"
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise_global
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Global
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              new
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               promise
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          mut
                          identifier
                           state
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              state_rc
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           borrow_mut
                        (
                        )
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state
                         .
                         identifier
                          pending_promise_exceptions
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           remove
                        (
                        callParams
                         expression
                          &
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                promise_global
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise_global
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Global
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              new
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               promise
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           module_global
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Global
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              new
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               module
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           dyn_import_mod_evaluate
                       =
                       expression
                        structExpression
                         structExprStruct
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              DynImportModEvaluate
                          {
                          structExprFields
                           structExprField
                            identifier
                             module_id
                            :
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  id
                           ,
                           structExprField
                            identifier
                             promise
                            :
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  promise_global
                           ,
                           structExprField
                            identifier
                             module
                            :
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  module_global
                           ,
                          }
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state
                         .
                         identifier
                          pending_dyn_mod_evaluate
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           insert
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               load_id
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               dyn_import_mod_evaluate
                        )
                       ;
                    }
                   else
                   blockExpression
                    {
                    statements
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            assert
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Errored
                         )
                         ;
                    }
              }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    status
              comparisonOperator
               ==
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModuleStatus
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Evaluated
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     dyn_import_done
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         load_id
                   ,
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         id
                  )
                 ;
              }
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                Ok
          (
          callParams
           expression
            (
            )
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        mod_evaluate_inner
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleId
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                mpsc
             ::
             typePathSegment
              pathIdentSegment
               identifier
                Receiver
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                        ,
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AnyError
                       >
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               shared_init
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module
           =
           expression
            expression
             expression
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      state_rc
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   borrow
                (
                )
               .
               identifier
                modules
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 get_handle
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     id
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                map
             (
             callParams
              expression
               closureExpression
                |
                closureParameters
                 closureParam
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       handle
                |
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       v8
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Local
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       new
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        scope
                  ,
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        handle
                 )
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "ModuleInfo not found"
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               status
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  module
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get_status
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    sender
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    receiver
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  mpsc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  channel
            (
            callParams
             expression
              literalExpression
               1
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    status
              comparisonOperator
               ==
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModuleStatus
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Instantiated
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     maybe_value
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        module
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     evaluate
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         scope
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        status
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         module
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      get_status
                   (
                   )
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  ifLetExpression
                   if
                   let
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Some
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             value
                       )
                   =
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         maybe_value
                   blockExpression
                    {
                    statements
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            assert
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Evaluated
                          tokenTreeToken
                           macroPunctuationToken
                            ||
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Errored
                         )
                         ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise
                       =
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Local
                             ::
                             genericArgs
                              <
                              genericArgsTypes
                               type_
                                typeNoBounds
                                 traitObjectTypeOneBound
                                  traitBound
                                   typePath
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       v8
                                    ::
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       Promise
                              >
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               try_from
                         (
                         callParams
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                value
                         )
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           expect
                        (
                        callParams
                         expression
                          literalExpression
                           "Expected to get promise as module evaluation result"
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise_global
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Global
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              new
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               promise
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          mut
                          identifier
                           state
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              state_rc
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           borrow_mut
                        (
                        )
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state
                         .
                         identifier
                          pending_promise_exceptions
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           remove
                        (
                        callParams
                         expression
                          &
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                promise_global
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise_global
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Global
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              new
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                         ,
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               promise
                        )
                       ;
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            assert
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             state
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             pending_mod_evaluate
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             is_none
                         tokenTree
                          delimTokenTree
                           (
                           )
                         tokenTree
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroLiteralToken
                            literalExpression
                             "There is already pending top level module evaluation"
                         )
                         ;
                     statement
                      expressionStatement
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state
                         .
                         identifier
                          pending_mod_evaluate
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Some
                         (
                         callParams
                          expression
                           structExpression
                            structExprStruct
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 ModEvaluate
                             {
                             structExprFields
                              structExprField
                               identifier
                                promise
                               :
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     promise_global
                              ,
                              structExprField
                               identifier
                                sender
                              ,
                             }
                         )
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              scope
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           perform_microtask_checkpoint
                        (
                        )
                       ;
                    }
                   else
                   blockExpression
                    {
                    statements
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            assert
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             status
                          tokenTreeToken
                           macroPunctuationToken
                            ==
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             v8
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             ModuleStatus
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Errored
                         )
                         ;
                    }
              }
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               receiver
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
        async
       fn
       identifier
        mod_evaluate
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleId
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               receiver
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               mod_evaluate_inner
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   id
            )
           ;
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 poll_fn
           (
           callParams
            expression
             closureExpression
              |
              closureParameters
               closureParam
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     cx
              |
              expression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expressionWithBlock
                     ifLetExpression
                      if
                      let
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                maybe_result
                          )
                      =
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             receiver
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          poll_next_unpin
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              cx
                       )
                      blockExpression
                       {
                       statements
                        statement
                         item
                          macroItem
                           macroInvocationSemi
                            simplePath
                             simplePathSegment
                              identifier
                               debug
                            !
                            (
                            tokenTree
                             tokenTreeToken
                              macroLiteralToken
                               literalExpression
                                "received module evaluate {:#?}"
                             tokenTreeToken
                              macroPunctuationToken
                               ,
                             tokenTreeToken
                              macroIdentifierLikeToken
                               identifier
                                maybe_result
                            )
                            ;
                        statement
                         letStatement
                          let
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              result
                          =
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 maybe_result
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              unwrap_or
                           (
                           callParams
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Ok
                             (
                             callParams
                              expression
                               (
                               )
                             )
                           )
                          ;
                        statement
                         expressionStatement
                          expression
                           return
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Poll
                               ::
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Ready
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   result
                            )
                          ;
                       }
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _r
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           self
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         poll_event_loop
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             cx
                      )
                     ?
                    ;
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Poll
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Pending
                 }
           )
          .
          await
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_error
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoadId
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               err
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  AnyError
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolver_handle
           =
           expression
            expression
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state_rc
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  borrow_mut
               (
               )
              .
              identifier
               dyn_import_map
             .
             pathExprSegment
              pathIdentSegment
               identifier
                remove
             (
             callParams
              expression
               &
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     id
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "Invalid dyn import id"
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolver
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  resolver_handle
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               exception
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    err
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 downcast_ref
               ::
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         ErrWithV8Handle
                >
              (
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                map
             (
             callParams
              expression
               closureExpression
                |
                closureParameters
                 closureParam
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       err
                |
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       err
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    get_handle
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        scope
                 )
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_or_else
            (
            callParams
             expression
              closureExpression
               ||
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         message
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            err
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         to_string
                      (
                      )
                     ;
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         message
                     =
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             v8
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             String
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             new
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              scope
                        ,
                        expression
                         &
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               message
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          v8
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Exception
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          type_error
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           scope
                     ,
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           message
                    )
                  }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   resolver
             .
             pathExprSegment
              pathIdentSegment
               identifier
                reject
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    exception
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  scope
            .
            pathExprSegment
             pathIdentSegment
              identifier
               perform_microtask_checkpoint
            (
            )
           ;
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_done
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoadId
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               mod_id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleId
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                debug
             !
             (
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "dyn_import_done {} {:?}"
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 id
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 mod_id
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolver_handle
           =
           expression
            expression
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state_rc
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  borrow_mut
               (
               )
              .
              identifier
               dyn_import_map
             .
             pathExprSegment
              pathIdentSegment
               identifier
                remove
             (
             callParams
              expression
               &
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     id
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "Invalid dyn import id"
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolver
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  resolver_handle
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow
                  (
                  )
                 ;
               expression
                expression
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    modules
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     get_handle
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         mod_id
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    map
                 (
                 callParams
                  expression
                   closureExpression
                    |
                    closureParameters
                     closureParam
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           handle
                    |
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           v8
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Local
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           new
                     (
                     callParams
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            scope
                      ,
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            handle
                     )
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   expect
                (
                callParams
                 expression
                  literalExpression
                   "Dyn import module info not found"
                )
              }
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 module
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 get_status
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 v8
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 ModuleStatus
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Evaluated
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module_namespace
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  module
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get_module_namespace
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   resolver
             .
             pathExprSegment
              pathIdentSegment
               identifier
                resolve
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    module_namespace
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  scope
            .
            pathExprSegment
             pathIdentSegment
              identifier
               perform_microtask_checkpoint
            (
            )
           ;
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        prepare_dyn_imports
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                        ,
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AnyError
                       >
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      state_rc
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   borrow
                (
                )
               .
               identifier
                preparing_dyn_imports
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 is_empty
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Poll
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ready
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Ok
                     (
                     callParams
                      expression
                       (
                       )
                     )
                   )
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      r
                  =
                  expression
                   expressionWithBlock
                    blockExpression
                     {
                     statements
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           mut
                           identifier
                            state
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state_rc
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            borrow_mut
                         (
                         )
                        ;
                      expression
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              state
                        .
                        identifier
                         preparing_dyn_imports
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          poll_next_unpin
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              cx
                       )
                     }
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          r
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Pending
                       |
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                None
                          )
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          expressionStatement
                           expression
                            return
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Poll
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Ready
                             (
                             callParams
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Ok
                               (
                               callParams
                                expression
                                 (
                                 )
                               )
                             )
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              tupleStructPattern
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Some
                               (
                               tupleStructItems
                                pattern
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     prepare_poll
                               )
                          )
                     =>
                     expression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               dyn_import_id
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  prepare_poll
                            .
                            tupleIndex
                             0
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               prepare_result
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  prepare_poll
                            .
                            tupleIndex
                             1
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            matchExpression
                             match
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   prepare_result
                             {
                             matchArms
                              matchArm
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Ok
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         load
                                   )
                              =>
                              matchArmExpression
                               expressionWithBlock
                                blockExpression
                                 {
                                 statements
                                  statement
                                   letStatement
                                    let
                                    patternNoTopAlt
                                     patternWithoutRange
                                      identifierPattern
                                       identifier
                                        state
                                    =
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           state_rc
                                     .
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        borrow_mut
                                     (
                                     )
                                    ;
                                  statement
                                   expressionStatement
                                    expression
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            state
                                      .
                                      identifier
                                       pending_dyn_imports
                                     .
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        push
                                     (
                                     callParams
                                      expression
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             load
                                       .
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          into_future
                                       (
                                       )
                                     )
                                    ;
                                 }
                              matchArm
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Err
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         err
                                   )
                              =>
                              expression
                               expressionWithBlock
                                blockExpression
                                 {
                                 statements
                                  statement
                                   expressionStatement
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          self
                                     .
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        dyn_import_error
                                     (
                                     callParams
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            dyn_import_id
                                      ,
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            err
                                     )
                                    ;
                                 }
                             }
                        }
                    }
               }
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_dyn_imports
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                        ,
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AnyError
                       >
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      state_rc
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   borrow
                (
                )
               .
               identifier
                pending_dyn_imports
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 is_empty
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Poll
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ready
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Ok
                     (
                     callParams
                      expression
                       (
                       )
                     )
                   )
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      poll_result
                  =
                  expression
                   expressionWithBlock
                    blockExpression
                     {
                     statements
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           mut
                           identifier
                            state
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state_rc
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            borrow_mut
                         (
                         )
                        ;
                      expression
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              state
                        .
                        identifier
                         pending_dyn_imports
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          poll_next_unpin
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              cx
                       )
                     }
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          poll_result
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Pending
                       |
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                None
                          )
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          expressionStatement
                           expression
                            return
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Poll
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Ready
                             (
                             callParams
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Ok
                               (
                               callParams
                                expression
                                 (
                                 )
                               )
                             )
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              tupleStructPattern
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Some
                               (
                               tupleStructItems
                                pattern
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     load_stream_poll
                               )
                          )
                     =>
                     expression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               maybe_result
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  load_stream_poll
                            .
                            tupleIndex
                             0
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              mut
                              identifier
                               load
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  load_stream_poll
                            .
                            tupleIndex
                             1
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               dyn_import_id
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  load
                            .
                            identifier
                             id
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifLetExpression
                             if
                             let
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                tupleStructPattern
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Some
                                 (
                                 tupleStructItems
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     identifierPattern
                                      identifier
                                       load_stream_result
                                 )
                             =
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   maybe_result
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expressionWithBlock
                                  matchExpression
                                   match
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         load_stream_result
                                   {
                                   matchArms
                                    matchArm
                                     pattern
                                      patternNoTopAlt
                                       patternWithoutRange
                                        tupleStructPattern
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             Ok
                                         (
                                         tupleStructItems
                                          pattern
                                           patternNoTopAlt
                                            patternWithoutRange
                                             identifierPattern
                                              identifier
                                               info
                                         )
                                    =>
                                    matchArmExpression
                                     expressionWithBlock
                                      blockExpression
                                       {
                                       statements
                                        statement
                                         expressionStatement
                                          expressionWithBlock
                                           matchExpression
                                            match
                                            expression
                                             expression
                                              pathExpression
                                               pathInExpression
                                                pathExprSegment
                                                 pathIdentSegment
                                                  self
                                             .
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                register_during_load
                                             (
                                             callParams
                                              expression
                                               pathExpression
                                                pathInExpression
                                                 pathExprSegment
                                                  pathIdentSegment
                                                   identifier
                                                    info
                                              ,
                                              expression
                                               &
                                               mut
                                               expression
                                                pathExpression
                                                 pathInExpression
                                                  pathExprSegment
                                                   pathIdentSegment
                                                    identifier
                                                     load
                                             )
                                            {
                                            matchArms
                                             matchArm
                                              pattern
                                               patternNoTopAlt
                                                patternWithoutRange
                                                 tupleStructPattern
                                                  pathInExpression
                                                   pathExprSegment
                                                    pathIdentSegment
                                                     identifier
                                                      Ok
                                                  (
                                                  tupleStructItems
                                                   pattern
                                                    patternNoTopAlt
                                                     patternWithoutRange
                                                      tuplePattern
                                                       (
                                                       )
                                                  )
                                             =>
                                             matchArmExpression
                                              expressionWithBlock
                                               blockExpression
                                                {
                                                statements
                                                 statement
                                                  letStatement
                                                   let
                                                   patternNoTopAlt
                                                    patternWithoutRange
                                                     identifierPattern
                                                      identifier
                                                       state
                                                   =
                                                   expression
                                                    expression
                                                     pathExpression
                                                      pathInExpression
                                                       pathExprSegment
                                                        pathIdentSegment
                                                         identifier
                                                          state_rc
                                                    .
                                                    pathExprSegment
                                                     pathIdentSegment
                                                      identifier
                                                       borrow_mut
                                                    (
                                                    )
                                                   ;
                                                 statement
                                                  expressionStatement
                                                   expression
                                                    expression
                                                     expression
                                                      pathExpression
                                                       pathInExpression
                                                        pathExprSegment
                                                         pathIdentSegment
                                                          identifier
                                                           state
                                                     .
                                                     identifier
                                                      pending_dyn_imports
                                                    .
                                                    pathExprSegment
                                                     pathIdentSegment
                                                      identifier
                                                       push
                                                    (
                                                    callParams
                                                     expression
                                                      expression
                                                       pathExpression
                                                        pathInExpression
                                                         pathExprSegment
                                                          pathIdentSegment
                                                           identifier
                                                            load
                                                      .
                                                      pathExprSegment
                                                       pathIdentSegment
                                                        identifier
                                                         into_future
                                                      (
                                                      )
                                                    )
                                                   ;
                                                }
                                             matchArm
                                              pattern
                                               patternNoTopAlt
                                                patternWithoutRange
                                                 tupleStructPattern
                                                  pathInExpression
                                                   pathExprSegment
                                                    pathIdentSegment
                                                     identifier
                                                      Err
                                                  (
                                                  tupleStructItems
                                                   pattern
                                                    patternNoTopAlt
                                                     patternWithoutRange
                                                      identifierPattern
                                                       identifier
                                                        err
                                                  )
                                             =>
                                             expression
                                              expression
                                               pathExpression
                                                pathInExpression
                                                 pathExprSegment
                                                  pathIdentSegment
                                                   self
                                              .
                                              pathExprSegment
                                               pathIdentSegment
                                                identifier
                                                 dyn_import_error
                                              (
                                              callParams
                                               expression
                                                pathExpression
                                                 pathInExpression
                                                  pathExprSegment
                                                   pathIdentSegment
                                                    identifier
                                                     dyn_import_id
                                               ,
                                               expression
                                                pathExpression
                                                 pathInExpression
                                                  pathExprSegment
                                                   pathIdentSegment
                                                    identifier
                                                     err
                                              )
                                             ,
                                            }
                                       }
                                    matchArm
                                     pattern
                                      patternNoTopAlt
                                       patternWithoutRange
                                        tupleStructPattern
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             Err
                                         (
                                         tupleStructItems
                                          pattern
                                           patternNoTopAlt
                                            patternWithoutRange
                                             identifierPattern
                                              identifier
                                               err
                                         )
                                    =>
                                    expression
                                     expressionWithBlock
                                      blockExpression
                                       {
                                       statements
                                        expression
                                         expression
                                          pathExpression
                                           pathInExpression
                                            pathExprSegment
                                             pathIdentSegment
                                              self
                                         .
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            dyn_import_error
                                         (
                                         callParams
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                dyn_import_id
                                          ,
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                err
                                         )
                                       }
                                   }
                              }
                             else
                             blockExpression
                              {
                              statements
                               statement
                                letStatement
                                 let
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     module_id
                                 =
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         load
                                   .
                                   identifier
                                    root_module_id
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     unwrap
                                  (
                                  )
                                 ;
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        self
                                   .
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      mod_instantiate
                                   (
                                   callParams
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          module_id
                                   )
                                  ?
                                 ;
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        self
                                   .
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      dyn_mod_evaluate
                                   (
                                   callParams
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          dyn_import_id
                                    ,
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          module_id
                                   )
                                  ?
                                 ;
                              }
                        }
                    }
               }
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        evaluate_pending_module
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          expressionStatement
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     scope
                 =
                 expression
                  &
                  mut
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         HandleScope
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         with_context
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          self
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        v8_isolate
                     (
                     )
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          context
                   )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    mut
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow_mut
                  (
                  )
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  ifLetExpression
                   if
                   let
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Some
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             module_evaluation
                       )
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           state
                     .
                     identifier
                      pending_mod_evaluate
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       as_ref
                    (
                    )
                   blockExpression
                    {
                    statements
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise
                       =
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               module_evaluation
                         .
                         identifier
                          promise
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           get
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               scope
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          mut
                          identifier
                           sender
                       =
                       expression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               module_evaluation
                         .
                         identifier
                          sender
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           clone
                        (
                        )
                       ;
                     statement
                      letStatement
                       let
                       patternNoTopAlt
                        patternWithoutRange
                         identifierPattern
                          identifier
                           promise_state
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              promise
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           state
                        (
                        )
                       ;
                     statement
                      expressionStatement
                       expressionWithBlock
                        matchExpression
                         match
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               promise_state
                         {
                         matchArms
                          matchArm
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              pathPattern
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   v8
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PromiseState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Pending
                          =>
                          matchArmExpression
                           expressionWithBlock
                            blockExpression
                             {
                             }
                          matchArm
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              pathPattern
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   v8
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PromiseState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Fulfilled
                          =>
                          matchArmExpression
                           expressionWithBlock
                            blockExpression
                             {
                             statements
                              statement
                               expressionStatement
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        state
                                  .
                                  identifier
                                   pending_mod_evaluate
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    take
                                 (
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       scope
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    perform_microtask_checkpoint
                                 (
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        sender
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     try_send
                                  (
                                  callParams
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Ok
                                    (
                                    callParams
                                     expression
                                      (
                                      )
                                    )
                                  )
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    unwrap
                                 (
                                 )
                                ;
                             }
                          matchArm
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              pathPattern
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   v8
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PromiseState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Rejected
                          =>
                          expression
                           expressionWithBlock
                            blockExpression
                             {
                             statements
                              statement
                               letStatement
                                let
                                patternNoTopAlt
                                 patternWithoutRange
                                  identifierPattern
                                   identifier
                                    exception
                                =
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       promise
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    result
                                 (
                                 callParams
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        scope
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        state
                                  .
                                  identifier
                                   pending_mod_evaluate
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    take
                                 (
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       drop
                                 (
                                 callParams
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        state
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       scope
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    perform_microtask_checkpoint
                                 (
                                 )
                                ;
                              statement
                               letStatement
                                let
                                patternNoTopAlt
                                 patternWithoutRange
                                  identifierPattern
                                   identifier
                                    err1
                                =
                                expression
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         exception_to_err_result
                                       ::
                                       genericArgs
                                        <
                                        genericArgsTypes
                                         type_
                                          typeNoBounds
                                           tupleType
                                            (
                                            )
                                        >
                                   (
                                   callParams
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          scope
                                    ,
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          exception
                                    ,
                                    expression
                                     literalExpression
                                      false
                                   )
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     map_err
                                  (
                                  callParams
                                   expression
                                    closureExpression
                                     |
                                     closureParameters
                                      closureParam
                                       pattern
                                        patternNoTopAlt
                                         patternWithoutRange
                                          identifierPattern
                                           identifier
                                            err
                                     |
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            attach_handle_to_error
                                      (
                                      callParams
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             scope
                                       ,
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             err
                                       ,
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             exception
                                      )
                                  )
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    unwrap_err
                                 (
                                 )
                                ;
                              statement
                               expressionStatement
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        sender
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     try_send
                                  (
                                  callParams
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Err
                                    (
                                    callParams
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           err1
                                    )
                                  )
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    unwrap
                                 (
                                 )
                                ;
                             }
                         }
                    }
              }
           ;
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        evaluate_dyn_imports
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      context
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        self
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      global_context
                   (
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      maybe_result
                  =
                  expression
                   expressionWithBlock
                    blockExpression
                     {
                     statements
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            scope
                        =
                        expression
                         &
                         mut
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                v8
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                HandleScope
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                with_context
                          (
                          callParams
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 self
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               v8_isolate
                            (
                            )
                           ,
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 context
                          )
                        ;
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           mut
                           identifier
                            state
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state_rc
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            borrow_mut
                         (
                         )
                        ;
                      statement
                       expressionStatement
                        expressionWithBlock
                         ifLetExpression
                          if
                          let
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             tupleStructPattern
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Some
                              (
                              tupleStructItems
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  referencePattern
                                   &
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      dyn_import_id
                              )
                          =
                          expression
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   state
                             .
                             identifier
                              pending_dyn_mod_evaluate
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               keys
                            (
                            )
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              next
                           (
                           )
                          blockExpression
                           {
                           statements
                            statement
                             letStatement
                              let
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  handle
                              =
                              expression
                               expression
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       state
                                 .
                                 identifier
                                  pending_dyn_mod_evaluate
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   remove
                                (
                                callParams
                                 expression
                                  &
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        dyn_import_id
                                )
                               .
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  unwrap
                               (
                               )
                              ;
                            statement
                             expressionStatement
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     drop
                               (
                               callParams
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      state
                               )
                              ;
                            statement
                             letStatement
                              let
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  module_id
                              =
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     handle
                               .
                               identifier
                                module_id
                              ;
                            statement
                             letStatement
                              let
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  promise
                              =
                              expression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      handle
                                .
                                identifier
                                 promise
                               .
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  get
                               (
                               callParams
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      scope
                               )
                              ;
                            statement
                             letStatement
                              let
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  _module
                              =
                              expression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      handle
                                .
                                identifier
                                 module
                               .
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  get
                               (
                               callParams
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      scope
                               )
                              ;
                            statement
                             letStatement
                              let
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  promise_state
                              =
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     promise
                               .
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  state
                               (
                               )
                              ;
                            statement
                             expressionStatement
                              expressionWithBlock
                               matchExpression
                                match
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      promise_state
                                {
                                matchArms
                                 matchArm
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     pathPattern
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          v8
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          PromiseState
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Pending
                                 =>
                                 matchArmExpression
                                  expressionWithBlock
                                   blockExpression
                                    {
                                    statements
                                     statement
                                      expressionStatement
                                       expression
                                        expression
                                         expression
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                state_rc
                                          .
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             borrow_mut
                                          (
                                          )
                                         .
                                         identifier
                                          pending_dyn_mod_evaluate
                                        .
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           insert
                                        (
                                        callParams
                                         expression
                                          pathExpression
                                           pathInExpression
                                            pathExprSegment
                                             pathIdentSegment
                                              identifier
                                               dyn_import_id
                                         ,
                                         expression
                                          pathExpression
                                           pathInExpression
                                            pathExprSegment
                                             pathIdentSegment
                                              identifier
                                               handle
                                        )
                                       ;
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           None
                                    }
                                 matchArm
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     pathPattern
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          v8
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          PromiseState
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Fulfilled
                                 =>
                                 matchArmExpression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Some
                                   (
                                   callParams
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           Ok
                                     (
                                     callParams
                                      expression
                                       (
                                       tupleElements
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              dyn_import_id
                                        ,
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              module_id
                                       )
                                     )
                                   )
                                  ,
                                 matchArm
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     pathPattern
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          v8
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          PromiseState
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Rejected
                                 =>
                                 expression
                                  expressionWithBlock
                                   blockExpression
                                    {
                                    statements
                                     statement
                                      letStatement
                                       let
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           exception
                                       =
                                       expression
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              promise
                                        .
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           result
                                        (
                                        callParams
                                         expression
                                          pathExpression
                                           pathInExpression
                                            pathExprSegment
                                             pathIdentSegment
                                              identifier
                                               scope
                                        )
                                       ;
                                     statement
                                      letStatement
                                       let
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           err1
                                       =
                                       expression
                                        expression
                                         expression
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                exception_to_err_result
                                              ::
                                              genericArgs
                                               <
                                               genericArgsTypes
                                                type_
                                                 typeNoBounds
                                                  tupleType
                                                   (
                                                   )
                                               >
                                          (
                                          callParams
                                           expression
                                            pathExpression
                                             pathInExpression
                                              pathExprSegment
                                               pathIdentSegment
                                                identifier
                                                 scope
                                           ,
                                           expression
                                            pathExpression
                                             pathInExpression
                                              pathExprSegment
                                               pathIdentSegment
                                                identifier
                                                 exception
                                           ,
                                           expression
                                            literalExpression
                                             false
                                          )
                                         .
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            map_err
                                         (
                                         callParams
                                          expression
                                           closureExpression
                                            |
                                            closureParameters
                                             closureParam
                                              pattern
                                               patternNoTopAlt
                                                patternWithoutRange
                                                 identifierPattern
                                                  identifier
                                                   err
                                            |
                                            expression
                                             expression
                                              pathExpression
                                               pathInExpression
                                                pathExprSegment
                                                 pathIdentSegment
                                                  identifier
                                                   attach_handle_to_error
                                             (
                                             callParams
                                              expression
                                               pathExpression
                                                pathInExpression
                                                 pathExprSegment
                                                  pathIdentSegment
                                                   identifier
                                                    scope
                                              ,
                                              expression
                                               pathExpression
                                                pathInExpression
                                                 pathExprSegment
                                                  pathIdentSegment
                                                   identifier
                                                    err
                                              ,
                                              expression
                                               pathExpression
                                                pathInExpression
                                                 pathExprSegment
                                                  pathIdentSegment
                                                   identifier
                                                    exception
                                             )
                                         )
                                        .
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           unwrap_err
                                        (
                                        )
                                       ;
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            Some
                                      (
                                      callParams
                                       expression
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              Err
                                        (
                                        callParams
                                         expression
                                          (
                                          tupleElements
                                           expression
                                            pathExpression
                                             pathInExpression
                                              pathExprSegment
                                               pathIdentSegment
                                                identifier
                                                 dyn_import_id
                                           ,
                                           expression
                                            pathExpression
                                             pathInExpression
                                              pathExprSegment
                                               pathIdentSegment
                                                identifier
                                                 err1
                                          )
                                        )
                                      )
                                    }
                                }
                           }
                          else
                          blockExpression
                           {
                           statements
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  None
                           }
                     }
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   ifLetExpression
                    if
                    let
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       tupleStructPattern
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Some
                        (
                        tupleStructItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              result
                        )
                    =
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          maybe_result
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expressionWithBlock
                         matchExpression
                          match
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                result
                          {
                          matchArms
                           matchArm
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Ok
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tuplePattern
                                     (
                                     tuplePatternItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           dyn_import_id
                                      ,
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           module_id
                                     )
                                )
                           =>
                           matchArmExpression
                            expressionWithBlock
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       self
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     dyn_import_done
                                  (
                                  callParams
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         dyn_import_id
                                   ,
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         module_id
                                  )
                                 ;
                              }
                           matchArm
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Err
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tuplePattern
                                     (
                                     tuplePatternItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           dyn_import_id
                                      ,
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           err1
                                     )
                                )
                           =>
                           expression
                            expressionWithBlock
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       self
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     dyn_import_error
                                  (
                                  callParams
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         dyn_import_id
                                   ,
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         err1
                                  )
                                 ;
                              }
                          }
                     }
                    else
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expression
                         break
                        ;
                     }
               }
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        register_during_load
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               info
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleSource
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               load
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    RecursiveModuleLoad
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             structPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  ModuleSource
              {
              structPatternElements
               structPatternFields
                structPatternField
                 identifier
                  code
                ,
                structPatternField
                 identifier
                  module_url_specified
                ,
                structPatternField
                 identifier
                  module_url_found
               ,
              }
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 info
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               is_main
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    load
              .
              identifier
               state
             comparisonOperator
              ==
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   LoadState
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   LoadingRoot
            &&
            expression
             !
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    load
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 is_dynamic_import
              (
              )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               referrer_specifier
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   ModuleSpecifier
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   resolve_url
             (
             callParams
              expression
               &
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     module_url_found
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    module_url_specified
              comparisonOperator
               !=
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    module_url_found
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    mut
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow_mut
                  (
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    modules
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     alias
                  (
                  callParams
                   expression
                    &
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module_url_specified
                   ,
                   expression
                    &
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module_url_found
                  )
                 ;
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               maybe_mod_id
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow
                  (
                  )
                 ;
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       state
                 .
                 identifier
                  modules
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   get_id
                (
                callParams
                 expression
                  &
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        module_url_found
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module_id
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    maybe_mod_id
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          id
                    )
               =>
               matchArmExpression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          debug
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           "Already-registered module fetched again: {}"
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           module_url_found
                       )
                       ;
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         id
                  }
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     None
               =>
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      self
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    mod_new
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        is_main
                  ,
                  expression
                   &
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         module_url_found
                  ,
                  expression
                   &
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         code
                 )
                ?
               ,
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               imports
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state_rc
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       Self
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state
                  (
                  callParams
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       v8_isolate
                    (
                    )
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow
                  (
                  )
                 ;
               expression
                expression
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    modules
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     get_children
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         module_id
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    unwrap
                 (
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   clone
                (
                )
              }
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             iteratorLoopExpression
              for
              pattern
               patternNoTopAlt
                patternWithoutRange
                 identifierPattern
                  identifier
                   module_specifier
              in
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    imports
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      is_registered
                  =
                  expression
                   expressionWithBlock
                    blockExpression
                     {
                     statements
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            state_rc
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              Self
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state
                         (
                         callParams
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                self
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              v8_isolate
                           (
                           )
                         )
                        ;
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            state
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               state_rc
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            borrow
                         (
                         )
                        ;
                      expression
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              state
                        .
                        identifier
                         modules
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          is_registered
                       (
                       callParams
                        expression
                         &
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               module_specifier
                       )
                     }
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   ifExpression
                    if
                    expression
                     !
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           is_registered
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               load
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            add_import
                         (
                         callParams
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 module_specifier
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              to_owned
                           (
                           )
                          ,
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 referrer_specifier
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              clone
                           (
                           )
                         )
                        ;
                     }
               }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     load
               .
               identifier
                state
              comparisonOperator
               ==
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    LoadState
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    LoadingRoot
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         load
                   .
                   identifier
                    root_module_id
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          module_id
                   )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         load
                   .
                   identifier
                    state
                  =
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        LoadState
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        LoadingImports
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     load
               .
               identifier
                pending
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 is_empty
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         load
                   .
                   identifier
                    state
                  =
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        LoadState
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Done
                 ;
              }
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                Ok
          (
          callParams
           expression
            (
            )
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
        async
       fn
       identifier
        load_module
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               specifier
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    ModuleSpecifier
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               code
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Option
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          String
                 >
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ModuleId
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               shared_init
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               loader
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state_rc
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       Self
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state
                  (
                  callParams
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       v8_isolate
                    (
                    )
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     state
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state_rc
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     borrow
                  (
                  )
                 ;
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       state
                 .
                 identifier
                  loader
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   clone
                (
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               load
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  RecursiveModuleLoad
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  main
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 op_state
              (
              )
             ,
             expression
              &
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     specifier
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  to_string
               (
               )
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   code
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   loader
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    _load_id
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    prepare_result
              )
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   load
             .
             pathExprSegment
              pathIdentSegment
               identifier
                prepare
             (
             )
            .
            await
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               load
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  prepare_result
            ?
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             predicatePatternLoopExpression
              while
              let
              pattern
               patternNoTopAlt
                patternWithoutRange
                 tupleStructPattern
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                  (
                  tupleStructItems
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        info_result
                  )
              =
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      load
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   next
                (
                )
               .
               await
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      info
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         info_result
                   ?
                  ;
                statement
                 expressionStatement
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       register_during_load
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           info
                     ,
                     expression
                      &
                      mut
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            load
                    )
                   ?
                  ;
               }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               root_id
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   load
             .
             identifier
              root_module_id
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "Root module id empty"
            )
           ;
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                self
           .
           pathExprSegment
            pathIdentSegment
             identifier
              mod_instantiate
           (
           callParams
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  root_id
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             map
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  wildcardPattern
                   _
             |
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   root_id
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_pending_ops
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           OpId
                   ,
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Box
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             sliceType
                              [
                              type_
                               typeNoBounds
                                traitObjectTypeOneBound
                                 traitBound
                                  typePath
                                   typePathSegment
                                    pathIdentSegment
                                     identifier
                                      u8
                              ]
                          >
                   )
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               overflow_response
           :
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Option
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     tupleType
                      (
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              OpId
                      ,
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              Box
                            genericArgs
                             <
                             genericArgsTypes
                              type_
                               typeNoBounds
                                sliceType
                                 [
                                 type_
                                  typeNoBounds
                                   traitObjectTypeOneBound
                                    traitBound
                                     typePath
                                      typePathSegment
                                       pathIdentSegment
                                        identifier
                                         u8
                                 ]
                             >
                      )
                  >
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 None
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      state
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state_rc
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      borrow_mut
                   (
                   )
                  ;
                statement
                 expressionStatement
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          state
                    .
                    identifier
                     have_unpolled_ops
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      set
                   (
                   callParams
                    expression
                     literalExpression
                      false
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      pending_r
                  =
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          state
                    .
                    identifier
                     pending_ops
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      poll_next_unpin
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          cx
                   )
                  ;
                statement
                 expressionStatement
                  expression
                   expressionWithBlock
                    matchExpression
                     match
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           pending_r
                     {
                     matchArms
                      matchArm
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          tupleStructPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                           (
                           tupleStructItems
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               identifierPattern
                                identifier
                                 None
                           )
                      =>
                      matchArmExpression
                       expression
                        break
                       ,
                      matchArm
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          pathPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Pending
                      =>
                      matchArmExpression
                       expression
                        break
                       ,
                      matchArm
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          tupleStructPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                           (
                           tupleStructItems
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Some
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tuplePattern
                                     (
                                     tuplePatternItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           op_id
                                      ,
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           buf
                                     )
                                )
                           )
                      =>
                      expression
                       expressionWithBlock
                        blockExpression
                         {
                         statements
                          statement
                           letStatement
                            let
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                successful_push
                            =
                            expression
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    state
                              .
                              identifier
                               shared
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                push
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    op_id
                              ,
                              expression
                               &
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     buf
                             )
                            ;
                          statement
                           expressionStatement
                            expressionWithBlock
                             ifExpression
                              if
                              expression
                               !
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     successful_push
                              blockExpression
                               {
                               statements
                                statement
                                 expressionStatement
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         overflow_response
                                   =
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Some
                                    (
                                    callParams
                                     expression
                                      (
                                      tupleElements
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             op_id
                                       ,
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             buf
                                      )
                                    )
                                  ;
                                statement
                                 expressionStatement
                                  expression
                                   break
                                  ;
                               }
                         }
                     }
                  ;
               }
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      state
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state_rc
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      borrow_mut
                   (
                   )
                  ;
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      unref_r
                  =
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          state
                    .
                    identifier
                     pending_unref_ops
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      poll_next_unpin
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          cx
                   )
                  ;
                statement
                 expressionStatement
                  expression
                   outerAttribute
                    #
                    [
                    attr
                     simplePath
                      simplePathSegment
                       identifier
                        allow
                     attrInput
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           clippy
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           match_wild_err_arm
                       )
                    ]
                   expression
                    expressionWithBlock
                     matchExpression
                      match
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            unref_r
                      {
                      matchArms
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tupleStructPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Poll
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Ready
                            (
                            tupleStructItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  None
                            )
                       =>
                       matchArmExpression
                        expression
                         break
                        ,
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           pathPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Poll
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Pending
                       =>
                       matchArmExpression
                        expression
                         break
                        ,
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tupleStructPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Poll
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Ready
                            (
                            tupleStructItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                tupleStructPattern
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Some
                                 (
                                 tupleStructItems
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     tuplePattern
                                      (
                                      tuplePatternItems
                                       pattern
                                        patternNoTopAlt
                                         patternWithoutRange
                                          identifierPattern
                                           identifier
                                            op_id
                                       ,
                                       pattern
                                        patternNoTopAlt
                                         patternWithoutRange
                                          identifierPattern
                                           identifier
                                            buf
                                      )
                                 )
                            )
                       =>
                       expression
                        expressionWithBlock
                         blockExpression
                          {
                          statements
                           statement
                            letStatement
                             let
                             patternNoTopAlt
                              patternWithoutRange
                               identifierPattern
                                identifier
                                 successful_push
                             =
                             expression
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     state
                               .
                               identifier
                                shared
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 push
                              (
                              callParams
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     op_id
                               ,
                               expression
                                &
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      buf
                              )
                             ;
                           statement
                            expressionStatement
                             expressionWithBlock
                              ifExpression
                               if
                               expression
                                !
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      successful_push
                               blockExpression
                                {
                                statements
                                 statement
                                  expressionStatement
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          overflow_response
                                    =
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           Some
                                     (
                                     callParams
                                      expression
                                       (
                                       tupleElements
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              op_id
                                        ,
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              buf
                                       )
                                     )
                                   ;
                                 statement
                                  expressionStatement
                                   expression
                                    break
                                   ;
                                }
                          }
                      }
                  ;
               }
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               overflow_response
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        check_promise_exceptions
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  state_rc
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow_mut
            (
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state
               .
               identifier
                pending_promise_exceptions
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 is_empty
              (
              )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     (
                     )
                   )
                 ;
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               key
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               expression
                expression
                 expression
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          state
                    .
                    identifier
                     pending_promise_exceptions
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      keys
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     next
                  (
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    unwrap
                 (
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   clone
                (
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               handle
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state
              .
              identifier
               pending_promise_exceptions
             .
             pathExprSegment
              pathIdentSegment
               identifier
                remove
             (
             callParams
              expression
               &
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     key
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  drop
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   state
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               exception
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  Local
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   handle
            )
           ;
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                exception_to_err_result
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 scope
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 exception
           ,
           expression
            literalExpression
             true
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        async_op_response
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               maybe_overflown_response
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Option
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    tupleType
                     (
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             OpId
                     ,
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             Box
                           genericArgs
                            <
                            genericArgsTypes
                             type_
                              typeNoBounds
                               sliceType
                                [
                                type_
                                 typeNoBounds
                                  traitObjectTypeOneBound
                                   traitBound
                                    typePath
                                     typePathSegment
                                      pathIdentSegment
                                       identifier
                                        u8
                                ]
                            >
                     )
                 >
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 Self
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               shared_queue_size
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    state_rc
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 borrow
              (
              )
             .
             identifier
              shared
            .
            pathExprSegment
             pathIdentSegment
              identifier
               size
            (
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     shared_queue_size
               comparisonOperator
                ==
               expression
                literalExpression
                 0
              &&
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     maybe_overflown_response
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  is_none
               (
               )
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     (
                     )
                   )
                 ;
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_recv_cb_handle
           =
           expression
            expression
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     state_rc
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  borrow
               (
               )
              .
              identifier
               js_recv_cb
             .
             pathExprSegment
              pathIdentSegment
               identifier
                clone
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "Deno.core.recv has not been called."
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  scope
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get_current_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               global
           :
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                typePathSegment
                 pathIdentSegment
                  identifier
                   Local
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           v8
                        ::
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Value
                  >
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   context
             .
             pathExprSegment
              pathIdentSegment
               identifier
                global
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_recv_cb
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  js_recv_cb_handle
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tc_scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   TryCatch
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    shared_queue_size
              comparisonOperator
               >
              expression
               literalExpression
                0
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        js_recv_cb
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     call
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         tc_scope
                   ,
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         global
                   ,
                   expression
                    &
                    expression
                     [
                     ]
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     shared_queue_size
                 =
                 expression
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          state_rc
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       borrow
                    (
                    )
                   .
                   identifier
                    shared
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     size
                  (
                  )
                 ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      assert_eq
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       shared_queue_size
                    tokenTreeToken
                     macroPunctuationToken
                      ,
                    tokenTreeToken
                     macroLiteralToken
                      literalExpression
                       0
                   )
                   ;
              }
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       overflown_response
                 )
             =
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   maybe_overflown_response
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   tuplePattern
                    (
                    tuplePatternItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          op_id
                     ,
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          buf
                    )
                 =
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       overflown_response
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     op_id
                 :
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Local
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 v8
                              ::
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Value
                        >
                 =
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Integer
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         new
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           op_id
                     as
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            i32
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     into
                  (
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     ui8
                 :
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         v8
                      ::
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Local
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 v8
                              ::
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Value
                        >
                 =
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         bindings
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         boxed_slice_to_uint8array
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          buf
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     into
                  (
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        js_recv_cb
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     call
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         tc_scope
                   ,
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         global
                   ,
                   expression
                    &
                    expression
                     [
                     arrayElements
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            op_id
                      ,
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ui8
                     ]
                  )
                 ;
              }
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    tc_scope
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 exception
              (
              )
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    None
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ok
                (
                callParams
                 expression
                  (
                  )
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         exception
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     exception_to_err_result
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      tc_scope
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      exception
                ,
                expression
                 literalExpression
                  false
               )
              ,
             }
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        drain_macrotasks
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_macrotask_cb_handle
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               &
               expression
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       Self
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state
                  (
                  callParams
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         self
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       v8_isolate
                    (
                    )
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    borrow
                 (
                 )
                .
                identifier
                 js_macrotask_cb
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          handle
                    )
               =>
               matchArmExpression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       handle
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    clone
                 (
                 )
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     None
               =>
               expression
                return
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Ok
                 (
                 callParams
                  expression
                   (
                   )
                 )
               ,
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            pathExprSegment
             pathIdentSegment
              identifier
               global_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   HandleScope
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   with_context
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate
               (
               )
              ,
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    context
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               context
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  scope
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get_current_context
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               global
           :
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                typePathSegment
                 pathIdentSegment
                  identifier
                   Local
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           v8
                        ::
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Value
                  >
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   context
             .
             pathExprSegment
              pathIdentSegment
               identifier
                global
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_macrotask_cb
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  js_macrotask_cb_handle
            .
            pathExprSegment
             pathIdentSegment
              identifier
               get
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   scope
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tc_scope
           =
           expression
            &
            mut
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   TryCatch
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    scope
             )
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      is_done
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         js_macrotask_cb
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      call
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          tc_scope
                    ,
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          global
                    ,
                    expression
                     &
                     expression
                      [
                      ]
                   )
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   ifLetExpression
                    if
                    let
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       tupleStructPattern
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Some
                        (
                        tupleStructItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              exception
                        )
                    =
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           tc_scope
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        exception
                     (
                     )
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expression
                         return
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                exception_to_err_result
                          (
                          callParams
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 tc_scope
                           ,
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 exception
                           ,
                           expression
                            literalExpression
                             false
                          )
                        ;
                     }
                statement
                 letStatement
                  let
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      is_done
                  =
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         is_done
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      unwrap
                   (
                   )
                  ;
                statement
                 expressionStatement
                  expressionWithBlock
                   ifExpression
                    if
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           is_done
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        is_true
                     (
                     )
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expression
                         break
                        ;
                     }
               }
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                Ok
          (
          callParams
           expression
            (
            )
          )
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          test
      )
   ]
  visItem
   visibility
    pub
   module
    mod
    identifier
     tests
    {
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          super
        ::
        *
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          crate
         ::
         simplePathSegment
          identifier
           modules
         ::
         simplePathSegment
          identifier
           ModuleSourceFuture
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          crate
         ::
         simplePathSegment
          identifier
           BufVec
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           futures
         ::
         simplePathSegment
          identifier
           future
         ::
         simplePathSegment
          identifier
           lazy
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           futures
         ::
         simplePathSegment
          identifier
           FutureExt
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           std
         ::
         simplePathSegment
          identifier
           io
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           std
         ::
         simplePathSegment
          identifier
           ops
         ::
         simplePathSegment
          identifier
           FnOnce
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           std
         ::
         simplePathSegment
          identifier
           rc
         ::
         simplePathSegment
          identifier
           Rc
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           std
         ::
         simplePathSegment
          identifier
           sync
         ::
         simplePathSegment
          identifier
           atomic
        ::
        {
        useTree
         simplePath
          simplePathSegment
           identifier
            AtomicUsize
        ,
        useTree
         simplePath
          simplePathSegment
           identifier
            Ordering
        }
       ;
    item
     visItem
      useDeclaration
       use
       useTree
        simplePath
         simplePathSegment
          identifier
           std
         ::
         simplePathSegment
          identifier
           sync
         ::
         simplePathSegment
          identifier
           Arc
       ;
    item
     visItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        run_in_task
       genericParams
        <
        genericParam
         typeParam
          identifier
           F
        >
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               f
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  F
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  F
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 FnOnce
               typePathFn
                (
                typePathInputs
                 type_
                  typeNoBounds
                   referenceType
                    &
                    mut
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Context
                )
           +
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Send
           +
           typeParamBound
            lifetime
             'static
        ,
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  futures
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  executor
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  block_on
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    lazy
              (
              callParams
               expression
                closureExpression
                 move
                 |
                 closureParameters
                  closureParam
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        cx
                 |
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        f
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         cx
                  )
              )
            )
           ;
        }
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        poll_until_ready
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               runtime
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    JsRuntime
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               max_poll_count
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  usize
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  tupleType
                   (
                   )
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        AnyError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               cx
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Context
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  from_waker
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    futures
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    task
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    noop_waker_ref
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             iteratorLoopExpression
              for
              pattern
               patternNoTopAlt
                patternWithoutRange
                 wildcardPattern
                  _
              in
              expression
               expression
                literalExpression
                 0
               ..
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     max_poll_count
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        poll_event_loop
                     (
                     callParams
                      expression
                       &
                       mut
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             cx
                     )
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Pending
                     =>
                     matchArmExpression
                      expression
                       continue
                      ,
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Poll
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ready
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                val
                          )
                     =>
                     expression
                      return
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            val
                     ,
                    }
               }
         expression
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              panic
           !
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroLiteralToken
               literalExpression
                "JsRuntime still not ready after polling {} times."
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                max_poll_count
            )
        }
    item
     visItem
      enumeration
       enum
       identifier
        Mode
       {
       enumItems
        enumItem
         identifier
          Async
        ,
        enumItem
         identifier
          AsyncUnref
        ,
        enumItem
         identifier
          AsyncZeroCopy
         enumItemTuple
          (
          tupleFields
           tupleField
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    u8
          )
        ,
        enumItem
         identifier
          OverflowReqSync
        ,
        enumItem
         identifier
          OverflowResSync
        ,
        enumItem
         identifier
          OverflowReqAsync
        ,
        enumItem
         identifier
          OverflowResAsync
        ,
       }
    item
     visItem
      struct_
       structStruct
        struct
        identifier
         TestState
        {
        structFields
         structField
          identifier
           mode
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Mode
         ,
         structField
          identifier
           dispatch_count
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Arc
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          AtomicUsize
                 >
         ,
        }
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        dispatch
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               op_state
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Rc
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          RefCell
                        genericArgs
                         <
                         genericArgsTypes
                          type_
                           typeNoBounds
                            traitObjectTypeOneBound
                             traitBound
                              typePath
                               typePathSegment
                                pathIdentSegment
                                 identifier
                                  OpState
                         >
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               bufs
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  BufVec
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Op
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               op_state_
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  op_state
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               test_state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  op_state_
            .
            pathExprSegment
             pathIdentSegment
              identifier
               borrow
             ::
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       TestState
              >
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   test_state
             .
             identifier
              dispatch_count
            .
            pathExprSegment
             pathIdentSegment
              identifier
               fetch_add
            (
            callParams
             expression
              literalExpression
               1
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Ordering
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Relaxed
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    test_state
              .
              identifier
               mode
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Async
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          42
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          vec
                       !
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            43u8
                        ]
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Async
                   (
                   callParams
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            futures
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            future
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ready
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             buf
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        boxed
                     (
                     )
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       AsyncUnref
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          42
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        fut
                    =
                    expression
                     expressionWithBlock
                      asyncBlockExpression
                       async
                       blockExpression
                        {
                        statements
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   futures
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   future
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   pending
                                 ::
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     tupleType
                                      (
                                      )
                                  >
                             (
                             )
                            .
                            await
                           ;
                         expression
                          expression
                           macroInvocation
                            simplePath
                             simplePathSegment
                              identifier
                               vec
                            !
                            delimTokenTree
                             [
                             tokenTree
                              tokenTreeToken
                               macroLiteralToken
                                literalExpression
                                 43u8
                             ]
                          .
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             into_boxed_slice
                          (
                          )
                        }
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         AsyncUnref
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           fut
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        boxed
                     (
                     )
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       AsyncZeroCopy
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         count
                   )
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          count
                       tokenTreeToken
                        macroIdentifierLikeToken
                         keyword
                          as
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          usize
                      )
                      ;
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             bufs
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          iter
                       (
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         enumerate
                      (
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        for_each
                     (
                     callParams
                      expression
                       closureExpression
                        |
                        closureParameters
                         closureParam
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             tuplePattern
                              (
                              tuplePatternItems
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  identifierPattern
                                   identifier
                                    idx
                               ,
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  identifierPattern
                                   identifier
                                    buf
                              )
                        |
                        expression
                         expressionWithBlock
                          blockExpression
                           {
                           statements
                            statement
                             item
                              macroItem
                               macroInvocationSemi
                                simplePath
                                 simplePathSegment
                                  identifier
                                   assert_eq
                                !
                                (
                                tokenTree
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    buf
                                 tokenTreeToken
                                  macroPunctuationToken
                                   .
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    len
                                tokenTree
                                 delimTokenTree
                                  (
                                  )
                                tokenTree
                                 tokenTreeToken
                                  macroPunctuationToken
                                   ,
                                 tokenTreeToken
                                  macroLiteralToken
                                   literalExpression
                                    1
                                )
                                ;
                            statement
                             item
                              macroItem
                               macroInvocationSemi
                                simplePath
                                 simplePathSegment
                                  identifier
                                   assert_eq
                                !
                                (
                                tokenTree
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    idx
                                 tokenTreeToken
                                  macroPunctuationToken
                                   ,
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    buf
                                tokenTree
                                 delimTokenTree
                                  [
                                  tokenTree
                                   tokenTreeToken
                                    macroLiteralToken
                                     literalExpression
                                      0
                                  ]
                                tokenTree
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   keyword
                                    as
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    usize
                                )
                                ;
                           }
                     )
                    ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          vec
                       !
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            43u8
                        ]
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Async
                   (
                   callParams
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            futures
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            future
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ready
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             buf
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        boxed
                     (
                     )
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       OverflowReqSync
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          100
                       tokenTreeToken
                        macroRepOp
                         *
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1024
                       tokenTreeToken
                        macroRepOp
                         *
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1024
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          vec
                       !
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            43u8
                        ]
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Sync
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          buf
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       OverflowResSync
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          42
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       mut
                       identifier
                        vec
                    =
                    expression
                     macroInvocation
                      simplePath
                       simplePathSegment
                        identifier
                         vec
                      !
                      delimTokenTree
                       [
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           0u8
                        tokenTreeToken
                         macroPunctuationToken
                          ;
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           100
                        tokenTreeToken
                         macroRepOp
                          *
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1024
                        tokenTreeToken
                         macroRepOp
                          *
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1024
                       ]
                    ;
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            vec
                      [
                      expression
                       literalExpression
                        0
                      ]
                     =
                     expression
                      literalExpression
                       99
                    ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           vec
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Sync
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          buf
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       OverflowReqAsync
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          100
                       tokenTreeToken
                        macroRepOp
                         *
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1024
                       tokenTreeToken
                        macroRepOp
                         *
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1024
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          vec
                       !
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            43u8
                        ]
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Async
                   (
                   callParams
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            futures
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            future
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ready
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             buf
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        boxed
                     (
                     )
                   )
                 }
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Mode
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       OverflowResAsync
              =>
              expression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          len
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          1
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          bufs
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       delimTokenTree
                        [
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            0
                        ]
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          42
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       mut
                       identifier
                        vec
                    =
                    expression
                     macroInvocation
                      simplePath
                       simplePathSegment
                        identifier
                         vec
                      !
                      delimTokenTree
                       [
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           0u8
                        tokenTreeToken
                         macroPunctuationToken
                          ;
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           100
                        tokenTreeToken
                         macroRepOp
                          *
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1024
                        tokenTreeToken
                         macroRepOp
                          *
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1024
                       ]
                    ;
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            vec
                      [
                      expression
                       literalExpression
                        0
                      ]
                     =
                     expression
                      literalExpression
                       4
                    ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        buf
                    =
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           vec
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        into_boxed_slice
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Op
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Async
                   (
                   callParams
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            futures
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            future
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ready
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             buf
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        boxed
                     (
                     )
                   )
                 }
             }
        }
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        setup
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               mode
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Mode
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          tupleType
           (
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   JsRuntime
           ,
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Arc
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           AtomicUsize
                  >
           )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dispatch_count
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Arc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AtomicUsize
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              callParams
               expression
                literalExpression
                 0
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Default
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               op_state
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               op_state
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   op_state
             .
             pathExprSegment
              pathIdentSegment
               identifier
                borrow_mut
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               put
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    TestState
                {
                structExprFields
                 structExprField
                  identifier
                   mode
                 ,
                 structExprField
                  identifier
                   dispatch_count
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         dispatch_count
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      clone
                   (
                   )
                 ,
                }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               register_op
            (
            callParams
             expression
              literalExpression
               "test"
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   dispatch
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "setup.js"
              ,
              expression
               literalExpression
                r#"\n        function assert(cond) {\n          if (!cond) {\n            throw Error("assert");\n          }\n        }\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
         expression
          (
          tupleElements
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 runtime
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 dispatch_count
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_dispatch
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Mode
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Async
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "filename.js"
              ,
              expression
               literalExpression
                r#"\n        let control = new Uint8Array([42]);\n        Deno.core.send(1, control);\n        async function main() {\n          Deno.core.send(1, control);\n        }\n        main();\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 2
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_dispatch_no_zero_copy_buf
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Mode
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AsyncZeroCopy
              (
              callParams
               expression
                literalExpression
                 0
              )
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "filename.js"
              ,
              expression
               literalExpression
                r#"\n        Deno.core.send(1);\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_dispatch_stack_zero_copy_bufs
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Mode
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AsyncZeroCopy
              (
              callParams
               expression
                literalExpression
                 2
              )
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "filename.js"
              ,
              expression
               literalExpression
                r#"\n        let zero_copy_a = new Uint8Array([0]);\n        let zero_copy_b = new Uint8Array([1]);\n        Deno.core.send(1, zero_copy_a, zero_copy_b);\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_dispatch_heap_zero_copy_bufs
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Mode
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AsyncZeroCopy
              (
              callParams
               expression
                literalExpression
                 5
              )
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "filename.js"
              ,
              expression
               literalExpression
                r#"\n        let zero_copy_a = new Uint8Array([0]);\n        let zero_copy_b = new Uint8Array([1]);\n        let zero_copy_c = new Uint8Array([2]);\n        let zero_copy_d = new Uint8Array([3]);\n        let zero_copy_e = new Uint8Array([4]);\n        Deno.core.send(1, zero_copy_a, zero_copy_b, zero_copy_c, zero_copy_d, zero_copy_e);\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_poll_async_delayed_ops
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Async
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "setup2.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         let nrecv = 0;\n         Deno.core.setAsyncHandler(1, (buf) => {\n           nrecv++;\n         });\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           0
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check1.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         assert(nrecv == 0);\n         let control = new Uint8Array([42]);\n         Deno.core.send(1, control);\n         assert(nrecv == 0);\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1
                       )
                       ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           matches
                        tokenTreeToken
                         macroPunctuationToken
                          !
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             runtime
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             poll_event_loop
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               cx
                           )
                         tokenTree
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Poll
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ready
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               Ok
                           tokenTree
                            delimTokenTree
                             (
                             tokenTree
                              tokenTreeToken
                               macroPunctuationToken
                                _
                             )
                           )
                         )
                       )
                       ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check2.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         assert(nrecv == 1);\n         Deno.core.send(1, control);\n         assert(nrecv == 1);\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           2
                       )
                       ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           matches
                        tokenTreeToken
                         macroPunctuationToken
                          !
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             runtime
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             poll_event_loop
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               cx
                           )
                         tokenTree
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Poll
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ready
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               Ok
                           tokenTree
                            delimTokenTree
                             (
                             tokenTree
                              tokenTreeToken
                               macroPunctuationToken
                                _
                             )
                           )
                         )
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check3.js"
                        ,
                        expression
                         literalExpression
                          "assert(nrecv == 2)"
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           2
                       )
                       ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           matches
                        tokenTreeToken
                         macroPunctuationToken
                          !
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             runtime
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             poll_event_loop
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               cx
                           )
                         tokenTree
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Poll
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ready
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               Ok
                           tokenTree
                            delimTokenTree
                             (
                             tokenTree
                              tokenTreeToken
                               macroPunctuationToken
                                _
                             )
                           )
                         )
                       )
                       ;
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_poll_async_optional_ops
       (
       )
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                run_in_task
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    cx
             |
             expression
              expressionWithBlock
               blockExpression
                {
                statements
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     tuplePattern
                      (
                      tuplePatternItems
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           mut
                           identifier
                            runtime
                       ,
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            dispatch_count
                      )
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          setup
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Mode
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           AsyncUnref
                    )
                   ;
                 statement
                  expressionStatement
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        execute
                     (
                     callParams
                      expression
                       literalExpression
                        "check1.js"
                      ,
                      expression
                       literalExpression
                        r#"\n          Deno.core.setAsyncHandler(1, (buf) => {\n            // This handler will never be called\n            assert(false);\n          });\n          let control = new Uint8Array([42]);\n          Deno.core.send(1, control);\n        "#
                      ,
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                   ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         dispatch_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         1
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         matches
                      tokenTreeToken
                       macroPunctuationToken
                        !
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           runtime
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           poll_event_loop
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             cx
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Poll
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ready
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ok
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroPunctuationToken
                              _
                           )
                         )
                       )
                     )
                     ;
                }
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        terminate_execution
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    isolate
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    _dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Mode
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Async
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               v8_isolate_handle
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   isolate
             .
             pathExprSegment
              pathIdentSegment
               identifier
                v8_isolate
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               thread_safe_handle
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               terminator_thread
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  std
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  thread
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  spawn
            (
            callParams
             expression
              closureExpression
               move
               ||
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            std
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            thread
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            sleep
                      (
                      callParams
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              std
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              time
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Duration
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              from_millis
                        (
                        callParams
                         expression
                          literalExpression
                           100
                        )
                      )
                     ;
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         ok
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            v8_isolate_handle
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         terminate_execution
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           ok
                       )
                       ;
                  }
            )
           ;
         statement
          expressionStatement
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     isolate
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  execute
               (
               callParams
                expression
                 literalExpression
                  "infinite_loop.js"
                ,
                expression
                 literalExpression
                  "for(;;) {}"
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Ok
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        wildcardPattern
                         _
                    )
               =>
               matchArmExpression
                expression
                 macroInvocation
                  simplePath
                   simplePathSegment
                    identifier
                     panic
                  !
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     macroLiteralToken
                      literalExpression
                       "execution should be terminated"
                   )
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Err
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          e
                    )
               =>
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   expression
                    macroInvocation
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          e
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          to_string
                      tokenTree
                       delimTokenTree
                        (
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "Uncaught Error: execution terminated"
                      )
                  }
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               ok
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    isolate
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                thread_safe_handle
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               cancel_terminate_execution
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 ok
             )
             ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   isolate
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "simple.js"
              ,
              expression
               literalExpression
                "1 + 1"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect
            (
            callParams
             expression
              literalExpression
               "execution should be possible again"
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   terminator_thread
             .
             pathExprSegment
              pathIdentSegment
               identifier
                join
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        dangling_shared_isolate
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               v8_isolate_handle
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   tuplePattern
                    (
                    tuplePatternItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         mut
                         identifier
                          runtime
                     ,
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          _dispatch_count
                    )
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        setup
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Mode
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Async
                  )
                 ;
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       runtime
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    v8_isolate
                 (
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   thread_safe_handle
                (
                )
              }
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  v8_isolate_handle
            .
            pathExprSegment
             pathIdentSegment
              identifier
               terminate_execution
            (
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        overflow_req_sync
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Mode
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   OverflowReqSync
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "overflow_req_sync.js"
              ,
              expression
               literalExpression
                r#"\n        let asyncRecv = 0;\n        Deno.core.setAsyncHandler(1, (buf) => { asyncRecv++ });\n        // Large message that will overflow the shared space.\n        let control = new Uint8Array(100 * 1024 * 1024);\n        let response = Deno.core.dispatch(1, control);\n        assert(response instanceof Uint8Array);\n        assert(response.length == 1);\n        assert(response[0] == 43);\n        assert(asyncRecv == 0);\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        overflow_res_sync
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   mut
                   identifier
                    runtime
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dispatch_count
              )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  setup
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Mode
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   OverflowResSync
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "overflow_res_sync.js"
              ,
              expression
               literalExpression
                r#"\n        let asyncRecv = 0;\n        Deno.core.setAsyncHandler(1, (buf) => { asyncRecv++ });\n        // Large message that will overflow the shared space.\n        let control = new Uint8Array([42]);\n        let response = Deno.core.dispatch(1, control);\n        assert(response instanceof Uint8Array);\n        assert(response.length == 100 * 1024 * 1024);\n        assert(response[0] == 99);\n        assert(asyncRecv == 0);\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        overflow_req_async
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             OverflowReqAsync
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "overflow_req_async.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         let asyncRecv = 0;\n         Deno.core.setAsyncHandler(1, (buf) => {\n           assert(buf.byteLength === 1);\n           assert(buf[0] === 43);\n           asyncRecv++;\n         });\n         // Large message that will overflow the shared space.\n         let control = new Uint8Array(100 * 1024 * 1024);\n         let response = Deno.core.dispatch(1, control);\n         // Async messages always have null response.\n         assert(response == null);\n         assert(asyncRecv == 0);\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1
                       )
                       ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           matches
                        tokenTreeToken
                         macroPunctuationToken
                          !
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             runtime
                          tokenTreeToken
                           macroPunctuationToken
                            .
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             poll_event_loop
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               cx
                           )
                         tokenTree
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Poll
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ready
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroIdentifierLikeToken
                              identifier
                               Ok
                           tokenTree
                            delimTokenTree
                             (
                             tokenTree
                              tokenTreeToken
                               macroPunctuationToken
                                _
                             )
                           )
                         )
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check.js"
                        ,
                        expression
                         literalExpression
                          "assert(asyncRecv == 1);"
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        overflow_res_async
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             OverflowResAsync
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "overflow_res_async.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         let asyncRecv = 0;\n         Deno.core.setAsyncHandler(1, (buf) => {\n           assert(buf.byteLength === 100 * 1024 * 1024);\n           assert(buf[0] === 4);\n           asyncRecv++;\n         });\n         // Large message that will overflow the shared space.\n         let control = new Uint8Array([42]);\n         let response = Deno.core.dispatch(1, control);\n         assert(response == null);\n         assert(asyncRecv == 0);\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           1
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             poll_until_ready
                       (
                       callParams
                        expression
                         &
                         mut
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               runtime
                        ,
                        expression
                         literalExpression
                          3
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check.js"
                        ,
                        expression
                         literalExpression
                          "assert(asyncRecv == 1);"
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        overflow_res_multiple_dispatch_async
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             OverflowResAsync
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "overflow_res_multiple_dispatch_async.js"
                        ,
                        expression
                         literalExpression
                          r#"\n         let asyncRecv = 0;\n         Deno.core.setAsyncHandler(1, (buf) => {\n           assert(buf.byteLength === 100 * 1024 * 1024);\n           assert(buf[0] === 4);\n           asyncRecv++;\n         });\n         // Large message that will overflow the shared space.\n         let control = new Uint8Array([42]);\n         let response = Deno.core.dispatch(1, control);\n         assert(response == null);\n         assert(asyncRecv == 0);\n         // Dispatch another message to verify that pending ops\n         // are done even if shared space overflows\n         Deno.core.dispatch(1, control);\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          assert_eq
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           dispatch_count
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           load
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ordering
                          tokenTreeToken
                           macroPunctuationToken
                            ::
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Relaxed
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           2
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             poll_until_ready
                       (
                       callParams
                        expression
                         &
                         mut
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               runtime
                        ,
                        expression
                         literalExpression
                          3
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "check.js"
                        ,
                        expression
                         literalExpression
                          "assert(asyncRecv == 2);"
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_pre_dispatch
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              _dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             OverflowResAsync
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "bad_op_id.js"
                        ,
                        expression
                         literalExpression
                          r#"\n          let thrown;\n          try {\n            Deno.core.dispatch(100);\n          } catch (e) {\n            thrown = e;\n          }\n          assert(String(thrown) === "TypeError: Unknown op id: 100");\n         "#
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expressionWithBlock
                      ifLetExpression
                       if
                       let
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          tupleStructPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                           (
                           tupleStructItems
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Err
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    wildcardPattern
                                     _
                                )
                           )
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              runtime
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           poll_event_loop
                        (
                        callParams
                         expression
                          &
                          mut
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                cx
                        )
                       blockExpression
                        {
                        statements
                         statement
                          item
                           macroItem
                            macroInvocationSemi
                             simplePath
                              simplePathSegment
                               identifier
                                unreachable
                             !
                             (
                             )
                             ;
                        }
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        core_test_js
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              _dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Async
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "core_test.js"
                        ,
                        expression
                         macroInvocation
                          simplePath
                           simplePathSegment
                            identifier
                             include_str
                          !
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroLiteralToken
                              literalExpression
                               "core_test.js"
                           )
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expressionWithBlock
                      ifLetExpression
                       if
                       let
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          tupleStructPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                           (
                           tupleStructItems
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Err
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    wildcardPattern
                                     _
                                )
                           )
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              runtime
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           poll_event_loop
                        (
                        callParams
                         expression
                          &
                          mut
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                cx
                        )
                       blockExpression
                        {
                        statements
                         statement
                          item
                           macroItem
                            macroInvocationSemi
                             simplePath
                              simplePathSegment
                               identifier
                                unreachable
                             !
                             (
                             )
                             ;
                        }
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        syntax_error
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Default
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               src
           =
           expression
            literalExpression
             "hocuspocus("
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               r
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               execute
            (
            callParams
             expression
              literalExpression
               "i.js"
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   src
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               e
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  r
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_err
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               js_error
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   e
             .
             pathExprSegment
              pathIdentSegment
               identifier
                downcast
              ::
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        JsError
               >
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 js_error
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 end_column
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Some
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   11
               )
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_encode_decode
       (
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  run_in_task
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     mut
                     identifier
                      cx
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    letStatement
                     let
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             mut
                             identifier
                              runtime
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              _dispatch_count
                        )
                     =
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            setup
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Mode
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Async
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          execute
                       (
                       callParams
                        expression
                         literalExpression
                          "encode_decode_test.js"
                        ,
                        expression
                         macroInvocation
                          simplePath
                           simplePathSegment
                            identifier
                             include_str
                          !
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroLiteralToken
                              literalExpression
                               "encode_decode_test.js"
                           )
                        ,
                       )
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         unwrap
                      (
                      )
                     ;
                   statement
                    expressionStatement
                     expressionWithBlock
                      ifLetExpression
                       if
                       let
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          tupleStructPattern
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Poll
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ready
                           (
                           tupleStructItems
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Err
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    wildcardPattern
                                     _
                                )
                           )
                       =
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              runtime
                        .
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           poll_event_loop
                        (
                        callParams
                         expression
                          &
                          mut
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                cx
                        )
                       blockExpression
                        {
                        statements
                         statement
                          item
                           macroItem
                            macroInvocationSemi
                             simplePath
                              simplePathSegment
                               identifier
                                unreachable
                             !
                             (
                             )
                             ;
                        }
                  }
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        will_snapshot
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    mut
                    identifier
                     runtime
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        JsRuntime
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        new
                  (
                  callParams
                   expression
                    structExpression
                     structExprStruct
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          RuntimeOptions
                      {
                      structExprFields
                       structExprField
                        identifier
                         will_snapshot
                        :
                        expression
                         literalExpression
                          true
                       ,
                       structBase
                        ..
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Default
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               default
                         (
                         )
                      }
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         runtime
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      execute
                   (
                   callParams
                    expression
                     literalExpression
                      "a.js"
                    ,
                    expression
                     literalExpression
                      "a = 1 + 2"
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      runtime
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   snapshot
                (
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Snapshot
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  JustCreated
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   snapshot
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime2
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   startup_snapshot
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          snapshot
                   )
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime2
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "check.js"
              ,
              expression
               literalExpression
                "if (a != 3) throw Error('x')"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_from_boxed_snapshot
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot
           =
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    mut
                    identifier
                     runtime
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        JsRuntime
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        new
                  (
                  callParams
                   expression
                    structExpression
                     structExprStruct
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          RuntimeOptions
                      {
                      structExprFields
                       structExprField
                        identifier
                         will_snapshot
                        :
                        expression
                         literalExpression
                          true
                       ,
                       structBase
                        ..
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Default
                            ::
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               default
                         (
                         )
                      }
                  )
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         runtime
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      execute
                   (
                   callParams
                    expression
                     literalExpression
                      "a.js"
                    ,
                    expression
                     literalExpression
                      "a = 1 + 2"
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     unwrap
                  (
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     snap
                 :
                 type_
                  typeNoBounds
                   referenceType
                    &
                    typeNoBounds
                     sliceType
                      [
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              u8
                      ]
                 =
                 expression
                  &
                  expression
                   *
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          runtime
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       snapshot
                    (
                    )
                 ;
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Vec
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       from
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        snap
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   into_boxed_slice
                (
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               snapshot
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Snapshot
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  Boxed
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   snapshot
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime2
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   startup_snapshot
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          snapshot
                   )
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime2
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "check.js"
              ,
              expression
               literalExpression
                "if (a != 3) throw Error('x')"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_heap_limits
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               create_params
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Isolate
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   create_params
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               heap_limits
            (
            callParams
             expression
              literalExpression
               0
             ,
             expression
              expression
               literalExpression
                20
              *
              expression
               literalExpression
                1024
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   create_params
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          create_params
                   )
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cb_handle
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                v8_isolate
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               thread_safe_handle
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               callback_invoke_count
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AtomicUsize
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               inner_invoke_count
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  clone
            (
            callParams
             expression
              &
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    callback_invoke_count
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               add_near_heap_limit_callback
            (
            callParams
             expression
              closureExpression
               move
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      current_limit
                ,
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _initial_limit
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            inner_invoke_count
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         fetch_add
                      (
                      callParams
                       expression
                        literalExpression
                         1
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Ordering
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             SeqCst
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            cb_handle
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         terminate_execution
                      (
                      )
                     ;
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          current_limit
                    *
                    expression
                     literalExpression
                      2
                  }
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               err
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "script name"
              ,
              expression
               literalExpression
                r#"let s = ""; while(true) { s += "Hello"; }"#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect_err
            (
            callParams
             expression
              literalExpression
               "script should fail"
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Uncaught Error: execution terminated"
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 err
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 downcast
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroPunctuationToken
                <
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JsError
              tokenTreeToken
               macroPunctuationToken
                >
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unwrap
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 message
             )
             ;
         expression
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              assert
           !
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                callback_invoke_count
             tokenTreeToken
              macroPunctuationToken
               .
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                load
            tokenTree
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  Ordering
               tokenTreeToken
                macroPunctuationToken
                 ::
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  SeqCst
              )
            tokenTree
             tokenTreeToken
              macroPunctuationToken
               >
             tokenTreeToken
              macroLiteralToken
               literalExpression
                0
            )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_heap_limit_cb_remove
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Default
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               add_near_heap_limit_callback
            (
            callParams
             expression
              closureExpression
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      current_limit
                ,
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _initial_limit
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          current_limit
                    *
                    expression
                     literalExpression
                      2
                  }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               remove_near_heap_limit_callback
            (
            callParams
             expression
              expression
               literalExpression
                20
              *
              expression
               literalExpression
                1024
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 runtime
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 allocations
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 near_heap_limit_callback_data
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 is_none
             tokenTree
              delimTokenTree
               (
               )
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_heap_limit_cb_multiple
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               create_params
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   v8
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Isolate
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   create_params
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               heap_limits
            (
            callParams
             expression
              literalExpression
               0
             ,
             expression
              expression
               literalExpression
                20
              *
              expression
               literalExpression
                1024
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   create_params
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          create_params
                   )
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cb_handle
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                v8_isolate
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               thread_safe_handle
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               callback_invoke_count_first
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AtomicUsize
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               inner_invoke_count_first
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  clone
            (
            callParams
             expression
              &
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    callback_invoke_count_first
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               add_near_heap_limit_callback
            (
            callParams
             expression
              closureExpression
               move
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      current_limit
                ,
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _initial_limit
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            inner_invoke_count_first
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         fetch_add
                      (
                      callParams
                       expression
                        literalExpression
                         1
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Ordering
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             SeqCst
                      )
                     ;
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          current_limit
                    *
                    expression
                     literalExpression
                      2
                  }
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               callback_invoke_count_second
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AtomicUsize
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               inner_invoke_count_second
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  clone
            (
            callParams
             expression
              &
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    callback_invoke_count_second
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               add_near_heap_limit_callback
            (
            callParams
             expression
              closureExpression
               move
               |
               closureParameters
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      current_limit
                ,
                closureParam
                 pattern
                  patternNoTopAlt
                   patternWithoutRange
                    identifierPattern
                     identifier
                      _initial_limit
               |
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            inner_invoke_count_second
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         fetch_add
                      (
                      callParams
                       expression
                        literalExpression
                         1
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Ordering
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             SeqCst
                      )
                     ;
                   statement
                    expressionStatement
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            cb_handle
                      .
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         terminate_execution
                      (
                      )
                     ;
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          current_limit
                    *
                    expression
                     literalExpression
                      2
                  }
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               err
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "script name"
              ,
              expression
               literalExpression
                r#"let s = ""; while(true) { s += "Hello"; }"#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               expect_err
            (
            callParams
             expression
              literalExpression
               "script should fail"
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Uncaught Error: execution terminated"
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 err
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 downcast
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroPunctuationToken
                <
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JsError
              tokenTreeToken
               macroPunctuationToken
                >
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unwrap
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 message
             )
             ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 callback_invoke_count_first
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SeqCst
               )
             )
             ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 callback_invoke_count_second
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SeqCst
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                >
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_mods
       (
       )
       blockExpression
        {
        statements
         statement
          item
           outerAttribute
            #
            [
            attr
             simplePath
              simplePathSegment
               identifier
                derive
             attrInput
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Default
               )
            ]
           visItem
            struct_
             structStruct
              struct
              identifier
               ModsLoader
              {
              structFields
               structField
                visibility
                 pub
                identifier
                 count
                :
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Arc
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AtomicUsize
                       >
               ,
              }
         statement
          item
           visItem
            implementation
             traitImpl
              impl
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoader
              for
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      ModsLoader
              {
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 resolve
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        referrer
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_main
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Result
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 ModuleSpecifier
                         ,
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 AnyError
                        >
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           self
                      .
                      identifier
                       count
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        fetch_add
                     (
                     callParams
                      expression
                       literalExpression
                        1
                      ,
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Ordering
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Relaxed
                     )
                    ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          specifier
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "./b.js"
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          referrer
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "file:///a.js"
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        s
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ModuleSpecifier
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            resolve_import
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             specifier
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             referrer
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          s
                   )
                 }
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 load
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _module_specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             ModuleSpecifier
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _maybe_referrer
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Option
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   ModuleSpecifier
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_dyn_import
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Pin
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Box
                               genericArgs
                                <
                                genericArgsTypes
                                 type_
                                  typeNoBounds
                                   traitObjectTypeOneBound
                                    traitBound
                                     typePath
                                      typePathSegment
                                       pathIdentSegment
                                        identifier
                                         ModuleSourceFuture
                                >
                        >
                blockExpression
                 {
                 statements
                  expression
                   macroInvocation
                    simplePath
                     simplePathSegment
                      identifier
                       unreachable
                    !
                    delimTokenTree
                     (
                     )
                 }
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               loader
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModsLoader
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               resolve_count
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   loader
             .
             identifier
              count
            .
            pathExprSegment
             pathIdentSegment
              identifier
               clone
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dispatch_count
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Arc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    AtomicUsize
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new
              (
              callParams
               expression
                literalExpression
                 0
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dispatch_count_
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  dispatch_count
            .
            pathExprSegment
             pathIdentSegment
              identifier
               clone
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dispatcher
           =
           expression
            closureExpression
             move
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    _state
               :
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Rc
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               RefCell
                             genericArgs
                              <
                              genericArgsTypes
                               type_
                                typeNoBounds
                                 traitObjectTypeOneBound
                                  traitBound
                                   typePath
                                    typePathSegment
                                     pathIdentSegment
                                      identifier
                                       OpState
                              >
                      >
              ,
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    bufs
               :
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       BufVec
             |
             ->
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Op
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        dispatch_count_
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     fetch_add
                  (
                  callParams
                   expression
                    literalExpression
                     1
                   ,
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ordering
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Relaxed
                  )
                 ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      assert_eq
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       bufs
                    tokenTreeToken
                     macroPunctuationToken
                      .
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       len
                   tokenTree
                    delimTokenTree
                     (
                     )
                   tokenTree
                    tokenTreeToken
                     macroPunctuationToken
                      ,
                    tokenTreeToken
                     macroLiteralToken
                      literalExpression
                       1
                   )
                   ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      assert_eq
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       bufs
                   tokenTree
                    delimTokenTree
                     [
                     tokenTree
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         0
                     ]
                   tokenTree
                    tokenTreeToken
                     macroPunctuationToken
                      .
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       len
                   tokenTree
                    delimTokenTree
                     (
                     )
                   tokenTree
                    tokenTreeToken
                     macroPunctuationToken
                      ,
                    tokenTreeToken
                     macroLiteralToken
                      literalExpression
                       1
                   )
                   ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      assert_eq
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       bufs
                   tokenTree
                    delimTokenTree
                     [
                     tokenTree
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         0
                     ]
                   tokenTree
                    delimTokenTree
                     [
                     tokenTree
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         0
                     ]
                   tokenTree
                    tokenTreeToken
                     macroPunctuationToken
                      ,
                    tokenTreeToken
                     macroLiteralToken
                      literalExpression
                       42
                   )
                   ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     buf
                 =
                 expression
                  expression
                   expression
                    [
                    arrayElements
                     expression
                      literalExpression
                       43u8
                     ,
                     expression
                      literalExpression
                       0
                     ,
                     expression
                      literalExpression
                       0
                     ,
                     expression
                      literalExpression
                       0
                    ]
                   [
                   expression
                    ..
                   ]
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     into
                  (
                  )
                 ;
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Op
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Async
                (
                callParams
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         futures
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         future
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         ready
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          buf
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     boxed
                  (
                  )
                )
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   module_loader
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          loader
                   )
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               register_op
            (
            callParams
             expression
              literalExpression
               "test"
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   dispatcher
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "setup.js"
              ,
              expression
               literalExpression
                r#"\n        function assert(cond) {\n          if (!cond) {\n            throw Error("assert");\n          }\n        }\n        "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               specifier_a
           =
           expression
            expression
             literalExpression
              "file:///a.js"
            .
            pathExprSegment
             pathIdentSegment
              identifier
               to_string
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               mod_a
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                mod_new
             (
             callParams
              expression
               literalExpression
                true
              ,
              expression
               &
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     specifier_a
              ,
              expression
               literalExpression
                r#"\n        import { b } from './b.js'\n        if (b() != 'b') throw Error();\n        let control = new Uint8Array([42]);\n        Deno.core.send(1, control);\n      "#
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               state_rc
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  state
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    runtime
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 v8_isolate
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            blockExpression
             {
             statements
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    state
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       state_rc
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    borrow
                 (
                 )
                ;
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    imports
                =
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        state
                  .
                  identifier
                   modules
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    get_children
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        mod_a
                 )
                ;
              statement
               item
                macroItem
                 macroInvocationSemi
                  simplePath
                   simplePathSegment
                    identifier
                     assert_eq
                  !
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      imports
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      Some
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       &
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        vec
                     tokenTreeToken
                      macroPunctuationToken
                       !
                    tokenTree
                     delimTokenTree
                      [
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          ModuleSpecifier
                       tokenTreeToken
                        macroPunctuationToken
                         ::
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          resolve_url
                      tokenTree
                       delimTokenTree
                        (
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            "file:///b.js"
                        )
                      tokenTree
                       tokenTreeToken
                        macroPunctuationToken
                         .
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          unwrap
                      tokenTree
                       delimTokenTree
                        (
                        )
                      ]
                    )
                  )
                  ;
             }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               mod_b
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                mod_new
             (
             callParams
              expression
               literalExpression
                false
              ,
              expression
               literalExpression
                "file:///b.js"
              ,
              expression
               literalExpression
                "export function b() { return 'b' }"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            blockExpression
             {
             statements
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    state
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       state_rc
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    borrow
                 (
                 )
                ;
              statement
               letStatement
                let
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    imports
                =
                expression
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         state
                   .
                   identifier
                    modules
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     get_children
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         mod_b
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    unwrap
                 (
                 )
                ;
              statement
               item
                macroItem
                 macroInvocationSemi
                  simplePath
                   simplePathSegment
                    identifier
                     assert_eq
                  !
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      imports
                   tokenTreeToken
                    macroPunctuationToken
                     .
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      len
                  tokenTree
                   delimTokenTree
                    (
                    )
                  tokenTree
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      0
                  )
                  ;
             }
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                mod_instantiate
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    mod_b
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 resolve_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SeqCst
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                mod_instantiate
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    mod_a
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 0
             )
             ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               mod_evaluate_inner
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   mod_a
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dispatch_count
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 load
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Ordering
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Relaxed
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 1
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_err
       (
       )
       blockExpression
        {
        statements
         statement
          item
           outerAttribute
            #
            [
            attr
             simplePath
              simplePathSegment
               identifier
                derive
             attrInput
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Clone
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Default
               )
            ]
           visItem
            struct_
             structStruct
              struct
              identifier
               DynImportErrLoader
              {
              structFields
               structField
                visibility
                 pub
                identifier
                 count
                :
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Arc
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                AtomicUsize
                       >
               ,
              }
         statement
          item
           visItem
            implementation
             traitImpl
              impl
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoader
              for
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      DynImportErrLoader
              {
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 resolve
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        referrer
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_main
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Result
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 ModuleSpecifier
                         ,
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 AnyError
                        >
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           self
                      .
                      identifier
                       count
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        fetch_add
                     (
                     callParams
                      expression
                       literalExpression
                        1
                      ,
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Ordering
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            Relaxed
                     )
                    ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          specifier
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "/foo.js"
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          referrer
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "file:///dyn_import2.js"
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        s
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ModuleSpecifier
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            resolve_import
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             specifier
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             referrer
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          s
                   )
                 }
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 load
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _module_specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             ModuleSpecifier
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _maybe_referrer
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Option
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   ModuleSpecifier
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_dyn_import
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Pin
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Box
                               genericArgs
                                <
                                genericArgsTypes
                                 type_
                                  typeNoBounds
                                   traitObjectTypeOneBound
                                    traitBound
                                     typePath
                                      typePathSegment
                                       pathIdentSegment
                                        identifier
                                         ModuleSourceFuture
                                >
                        >
                blockExpression
                 {
                 statements
                  expression
                   expression
                    expressionWithBlock
                     asyncBlockExpression
                      async
                      blockExpression
                       {
                       statements
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Err
                         (
                         callParams
                          expression
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  io
                               ::
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Error
                               ::
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  from
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   io
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   ErrorKind
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   NotFound
                            )
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              into
                           (
                           )
                         )
                       }
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      boxed
                   (
                   )
                 }
              }
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                run_in_task
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    cx
             |
             expression
              expressionWithBlock
               blockExpression
                {
                statements
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       loader
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Rc
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            DynImportErrLoader
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            default
                      (
                      )
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       count
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           loader
                     .
                     identifier
                      count
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       clone
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      mut
                      identifier
                       runtime
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          JsRuntime
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      structExpression
                       structExprStruct
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            RuntimeOptions
                        {
                        structExprFields
                         structExprField
                          identifier
                           module_loader
                          :
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Some
                           (
                           callParams
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  loader
                           )
                         ,
                         structBase
                          ..
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Default
                              ::
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 default
                           (
                           )
                        }
                    )
                   ;
                 statement
                  expressionStatement
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        execute
                     (
                     callParams
                      expression
                       literalExpression
                        "file:///dyn_import2.js"
                      ,
                      expression
                       literalExpression
                        r#"\n        (async () => {\n          await import("/foo.js");\n        })();\n        "#
                      ,
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                   ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         0
                     )
                     ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       result
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          runtime
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       poll_event_loop
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           cx
                    )
                   ;
                 statement
                  expressionStatement
                   expressionWithBlock
                    ifLetExpression
                     if
                     let
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Poll
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Ready
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             tupleStructPattern
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Ok
                              (
                              tupleStructItems
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  wildcardPattern
                                   _
                              )
                         )
                     =
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           result
                     blockExpression
                      {
                      statements
                       statement
                        item
                         macroItem
                          macroInvocationSemi
                           simplePath
                            simplePathSegment
                             identifier
                              unreachable
                           !
                           (
                           )
                           ;
                      }
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         2
                     )
                     ;
                }
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          derive
       attrInput
        delimTokenTree
         (
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             Clone
          tokenTreeToken
           macroPunctuationToken
            ,
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             Default
         )
      ]
     visItem
      struct_
       structStruct
        struct
        identifier
         DynImportOkLoader
        {
        structFields
         structField
          visibility
           pub
          identifier
           prepare_load_count
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Arc
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          AtomicUsize
                 >
         ,
         structField
          visibility
           pub
          identifier
           resolve_count
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Arc
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          AtomicUsize
                 >
         ,
         structField
          visibility
           pub
          identifier
           load_count
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Arc
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          AtomicUsize
                 >
         ,
        }
    item
     visItem
      implementation
       traitImpl
        impl
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            ModuleLoader
        for
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                DynImportOkLoader
        {
        associatedItem
         function_
          functionQualifiers
          fn
          identifier
           resolve
          (
          functionParameters
           selfParam
            shorthandSelf
             &
             self
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _op_state
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Rc
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             RefCell
                           genericArgs
                            <
                            genericArgsTypes
                             type_
                              typeNoBounds
                               traitObjectTypeOneBound
                                traitBound
                                 typePath
                                  typePathSegment
                                   pathIdentSegment
                                    identifier
                                     OpState
                            >
                    >
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  specifier
             :
             type_
              typeNoBounds
               referenceType
                &
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       str
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  referrer
             :
             type_
              typeNoBounds
               referenceType
                &
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       str
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _is_main
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     bool
           ,
          )
          functionReturnType
           ->
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Result
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           ModuleSpecifier
                   ,
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           AnyError
                  >
          blockExpression
           {
           statements
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  c
              =
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     self
                .
                identifier
                 resolve_count
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  fetch_add
               (
               callParams
                expression
                 literalExpression
                  1
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ordering
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Relaxed
               )
              ;
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   assert
                !
                (
                tokenTree
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    c
                 tokenTreeToken
                  macroPunctuationToken
                   <
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    4
                )
                ;
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   assert_eq
                !
                (
                tokenTree
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    specifier
                 tokenTreeToken
                  macroPunctuationToken
                   ,
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "./b.js"
                )
                ;
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   assert_eq
                !
                (
                tokenTree
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    referrer
                 tokenTreeToken
                  macroPunctuationToken
                   ,
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "file:///dyn_import3.js"
                )
                ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  s
              =
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      ModuleSpecifier
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      resolve_import
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       specifier
                 ,
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       referrer
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  unwrap
               (
               )
              ;
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Ok
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    s
             )
           }
        associatedItem
         function_
          functionQualifiers
          fn
          identifier
           load
          (
          functionParameters
           selfParam
            shorthandSelf
             &
             self
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _op_state
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Rc
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             RefCell
                           genericArgs
                            <
                            genericArgsTypes
                             type_
                              typeNoBounds
                               traitObjectTypeOneBound
                                traitBound
                                 typePath
                                  typePathSegment
                                   pathIdentSegment
                                    identifier
                                     OpState
                            >
                    >
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  specifier
             :
             type_
              typeNoBounds
               referenceType
                &
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModuleSpecifier
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _maybe_referrer
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Option
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             ModuleSpecifier
                    >
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _is_dyn_import
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     bool
           ,
          )
          functionReturnType
           ->
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Pin
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Box
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   ModuleSourceFuture
                          >
                  >
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     self
                .
                identifier
                 load_count
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  fetch_add
               (
               callParams
                expression
                 literalExpression
                  1
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ordering
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Relaxed
               )
              ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  info
              =
              expression
               structExpression
                structExprStruct
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     ModuleSource
                 {
                 structExprFields
                  structExprField
                   identifier
                    module_url_specified
                   :
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          specifier
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       to_string
                    (
                    )
                  ,
                  structExprField
                   identifier
                    module_url_found
                   :
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          specifier
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       to_string
                    (
                    )
                  ,
                  structExprField
                   identifier
                    code
                   :
                   expression
                    expression
                     literalExpression
                      "export function b() { return 'b' }"
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       to_owned
                    (
                    )
                  ,
                 }
              ;
            expression
             expression
              expressionWithBlock
               asyncBlockExpression
                async
                move
                blockExpression
                 {
                 statements
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          info
                   )
                 }
             .
             pathExprSegment
              pathIdentSegment
               identifier
                boxed
             (
             )
           }
        associatedItem
         function_
          functionQualifiers
          fn
          identifier
           prepare_load
          (
          functionParameters
           selfParam
            shorthandSelf
             &
             self
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _op_state
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Rc
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             RefCell
                           genericArgs
                            <
                            genericArgsTypes
                             type_
                              typeNoBounds
                               traitObjectTypeOneBound
                                traitBound
                                 typePath
                                  typePathSegment
                                   pathIdentSegment
                                    identifier
                                     OpState
                            >
                    >
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _load_id
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     ModuleLoadId
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _module_specifier
             :
             type_
              typeNoBounds
               referenceType
                &
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ModuleSpecifier
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _maybe_referrer
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Option
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             String
                    >
           ,
           functionParam
            functionParamPattern
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  _is_dyn_import
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     bool
           ,
          )
          functionReturnType
           ->
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Pin
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Box
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              dyn
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   Future
                                 genericArgs
                                  <
                                  genericArg
                                   genericArgsBinding
                                    identifier
                                     Output
                                    =
                                    type_
                                     typeNoBounds
                                      traitObjectTypeOneBound
                                       traitBound
                                        typePath
                                         typePathSegment
                                          pathIdentSegment
                                           identifier
                                            Result
                                          genericArgs
                                           <
                                           genericArgsTypes
                                            type_
                                             typeNoBounds
                                              tupleType
                                               (
                                               )
                                            ,
                                            type_
                                             typeNoBounds
                                              traitObjectTypeOneBound
                                               traitBound
                                                typePath
                                                 typePathSegment
                                                  pathIdentSegment
                                                   identifier
                                                    AnyError
                                           >
                                  >
                          >
                  >
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     self
                .
                identifier
                 prepare_load_count
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  fetch_add
               (
               callParams
                expression
                 literalExpression
                  1
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ordering
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Relaxed
               )
              ;
            expression
             expression
              expressionWithBlock
               asyncBlockExpression
                async
                blockExpression
                 {
                 statements
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     (
                     )
                   )
                 }
             .
             pathExprSegment
              pathIdentSegment
               identifier
                boxed_local
             (
             )
           }
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_ok
       (
       )
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                run_in_task
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    cx
             |
             expression
              expressionWithBlock
               blockExpression
                {
                statements
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       loader
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Rc
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            DynImportOkLoader
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            default
                      (
                      )
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       prepare_load_count
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           loader
                     .
                     identifier
                      prepare_load_count
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       clone
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       resolve_count
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           loader
                     .
                     identifier
                      resolve_count
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       clone
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       load_count
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           loader
                     .
                     identifier
                      load_count
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       clone
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      mut
                      identifier
                       runtime
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          JsRuntime
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      structExpression
                       structExprStruct
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            RuntimeOptions
                        {
                        structExprFields
                         structExprField
                          identifier
                           module_loader
                          :
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Some
                           (
                           callParams
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  loader
                           )
                         ,
                         structBase
                          ..
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Default
                              ::
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 default
                           (
                           )
                        }
                    )
                   ;
                 statement
                  expressionStatement
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        execute
                     (
                     callParams
                      expression
                       literalExpression
                        "file:///dyn_import3.js"
                      ,
                      expression
                       literalExpression
                        r#"\n          (async () => {\n            let mod = await import("./b.js");\n            if (mod.b() !== 'b') {\n              throw Error("bad1");\n            }\n            // And again!\n            mod = await import("./b.js");\n            if (mod.b() !== 'b') {\n              throw Error("bad2");\n            }\n          })();\n          "#
                      ,
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                   ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         matches
                      tokenTreeToken
                       macroPunctuationToken
                        !
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           runtime
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           poll_event_loop
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             cx
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Poll
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Pending
                       )
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         prepare_load_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         1
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         matches
                      tokenTreeToken
                       macroPunctuationToken
                        !
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           runtime
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           poll_event_loop
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             cx
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Poll
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ready
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ok
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroPunctuationToken
                              _
                           )
                         )
                       )
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         resolve_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         4
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         2
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         matches
                      tokenTreeToken
                       macroPunctuationToken
                        !
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           runtime
                        tokenTreeToken
                         macroPunctuationToken
                          .
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           poll_event_loop
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             cx
                         )
                       tokenTree
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Poll
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ready
                       tokenTree
                        delimTokenTree
                         (
                         tokenTree
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             Ok
                         tokenTree
                          delimTokenTree
                           (
                           tokenTree
                            tokenTreeToken
                             macroPunctuationToken
                              _
                           )
                         )
                       )
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         resolve_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         4
                     )
                     ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         2
                     )
                     ;
                }
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        dyn_import_borrow_mut_error
       (
       )
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                run_in_task
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    cx
             |
             expression
              expressionWithBlock
               blockExpression
                {
                statements
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       loader
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Rc
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            DynImportOkLoader
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            default
                      (
                      )
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       prepare_load_count
                   =
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           loader
                     .
                     identifier
                      prepare_load_count
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       clone
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      mut
                      identifier
                       runtime
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          JsRuntime
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      structExpression
                       structExprStruct
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            RuntimeOptions
                        {
                        structExprFields
                         structExprField
                          identifier
                           module_loader
                          :
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Some
                           (
                           callParams
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  loader
                           )
                         ,
                         structBase
                          ..
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 Default
                              ::
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 default
                           (
                           )
                        }
                    )
                   ;
                 statement
                  expressionStatement
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        execute
                     (
                     callParams
                      expression
                       literalExpression
                        "file:///dyn_import3.js"
                      ,
                      expression
                       literalExpression
                        r#"\n          (async () => {\n            let mod = await import("./b.js");\n            if (mod.b() !== 'b') {\n              throw Error("bad");\n            }\n            // Now do any op\n            Deno.core.ops();\n          })();\n          "#
                      ,
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     wildcardPattern
                      _
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          runtime
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       poll_event_loop
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           cx
                    )
                   ;
                 statement
                  item
                   macroItem
                    macroInvocationSemi
                     simplePath
                      simplePathSegment
                       identifier
                        assert_eq
                     !
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         prepare_load_count
                      tokenTreeToken
                       macroPunctuationToken
                        .
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         load
                     tokenTree
                      delimTokenTree
                       (
                       tokenTree
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Ordering
                        tokenTreeToken
                         macroPunctuationToken
                          ::
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           Relaxed
                       )
                     tokenTree
                      tokenTreeToken
                       macroPunctuationToken
                        ,
                      tokenTreeToken
                       macroLiteralToken
                        literalExpression
                         1
                     )
                     ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     wildcardPattern
                      _
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          runtime
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       poll_event_loop
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           cx
                    )
                   ;
                }
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        es_snapshot
       (
       )
       blockExpression
        {
        statements
         statement
          item
           outerAttribute
            #
            [
            attr
             simplePath
              simplePathSegment
               identifier
                derive
             attrInput
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Default
               )
            ]
           visItem
            struct_
             structStruct
              struct
              identifier
               ModsLoader
              ;
         statement
          item
           visItem
            implementation
             traitImpl
              impl
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ModuleLoader
              for
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      ModsLoader
              {
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 resolve
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        referrer
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             str
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_main
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Result
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 ModuleSpecifier
                         ,
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 AnyError
                        >
                blockExpression
                 {
                 statements
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          specifier
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "file:///main.js"
                      )
                      ;
                  statement
                   item
                    macroItem
                     macroInvocationSemi
                      simplePath
                       simplePathSegment
                        identifier
                         assert_eq
                      !
                      (
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          referrer
                       tokenTreeToken
                        macroPunctuationToken
                         ,
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "."
                      )
                      ;
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        s
                    =
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            ModuleSpecifier
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            resolve_import
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             specifier
                       ,
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             referrer
                      )
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        unwrap
                     (
                     )
                    ;
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          s
                   )
                 }
              associatedItem
               function_
                functionQualifiers
                fn
                identifier
                 load
                (
                functionParameters
                 selfParam
                  shorthandSelf
                   &
                   self
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _op_state
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Rc
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   RefCell
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           OpState
                                  >
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _module_specifier
                   :
                   type_
                    typeNoBounds
                     referenceType
                      &
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             ModuleSpecifier
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _maybe_referrer
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Option
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   ModuleSpecifier
                          >
                 ,
                 functionParam
                  functionParamPattern
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        _is_dyn_import
                   :
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           bool
                 ,
                )
                functionReturnType
                 ->
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         Pin
                       genericArgs
                        <
                        genericArgsTypes
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Box
                               genericArgs
                                <
                                genericArgsTypes
                                 type_
                                  typeNoBounds
                                   traitObjectTypeOneBound
                                    traitBound
                                     typePath
                                      typePathSegment
                                       pathIdentSegment
                                        identifier
                                         ModuleSourceFuture
                                >
                        >
                blockExpression
                 {
                 statements
                  expression
                   macroInvocation
                    simplePath
                     simplePathSegment
                      identifier
                       unreachable
                    !
                    delimTokenTree
                     (
                     )
                 }
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               loader
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  std
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  Rc
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ModsLoader
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              structExpression
               structExprStruct
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                {
                structExprFields
                 structExprField
                  identifier
                   module_loader
                  :
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Some
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          loader
                   )
                 ,
                 structExprField
                  identifier
                   will_snapshot
                  :
                  expression
                   literalExpression
                    true
                 ,
                 structBase
                  ..
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Default
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         default
                   (
                   )
                }
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               specifier
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   ModuleSpecifier
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   resolve_url
             (
             callParams
              expression
               literalExpression
                "file:///main.js"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               source_code
           =
           expression
            expression
             literalExpression
              "Deno.core.print('hello\\n')"
            .
            pathExprSegment
             pathIdentSegment
              identifier
               to_string
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               module_id
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   futures
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   executor
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   block_on
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     runtime
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  load_module
               (
               callParams
                expression
                 &
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       specifier
                ,
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        source_code
                 )
               )
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   futures
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   executor
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   block_on
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     runtime
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  mod_evaluate
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      module_id
               )
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               _snapshot
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               snapshot
            (
            )
           ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_error_without_stack
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               result
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               execute
            (
            callParams
             expression
              literalExpression
               "error_without_stack.js"
             ,
             expression
              literalExpression
               r#"\nfunction main() {\n  console.log("asdf);\n}\nmain();\n"#
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               expected_error
           =
           expression
            literalExpression
             r#"Uncaught SyntaxError: Invalid or unexpected token\n    at error_without_stack.js:3:14"#
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 result
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unwrap_err
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 to_string
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 expected_error
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_error_stack
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               result
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  runtime
            .
            pathExprSegment
             pathIdentSegment
              identifier
               execute
            (
            callParams
             expression
              literalExpression
               "error_stack.js"
             ,
             expression
              literalExpression
               r#"\nfunction assert(cond) {\n  if (!cond) {\n    throw Error("assert");\n  }\n}\nfunction main() {\n  assert(false);\n}\nmain();\n        "#
             ,
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               expected_error
           =
           expression
            literalExpression
             r#"Error: assert\n    at assert (error_stack.js:4:11)\n    at main (error_stack.js:9:3)\n    at error_stack.js:12:1"#
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert_eq
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 result
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unwrap_err
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 to_string
             tokenTree
              delimTokenTree
               (
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 expected_error
             )
             ;
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_error_async_stack
       (
       )
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                run_in_task
          (
          callParams
           expression
            closureExpression
             |
             closureParameters
              closureParam
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    cx
             |
             expression
              expressionWithBlock
               blockExpression
                {
                statements
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      mut
                      identifier
                       runtime
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          JsRuntime
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          new
                    (
                    callParams
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            RuntimeOptions
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            default
                      (
                      )
                    )
                   ;
                 statement
                  expressionStatement
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           runtime
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        execute
                     (
                     callParams
                      expression
                       literalExpression
                        "error_async_stack.js"
                      ,
                      expression
                       literalExpression
                        r#"\n(async () => {\n  const p = (async () => {\n    await Promise.resolve().then(() => {\n      throw new Error("async");\n    });\n  })();\n  try {\n    await p;\n  } catch (error) {\n    console.log(error.stack);\n    throw error;\n  }\n})();"#
                      ,
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                   ;
                 statement
                  letStatement
                   let
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       expected_error
                   =
                   expression
                    literalExpression
                     r#"Error: async\n    at error_async_stack.js:5:13\n    at async error_async_stack.js:4:5\n    at async error_async_stack.js:10:5"#
                   ;
                 statement
                  expressionStatement
                   expression
                    expressionWithBlock
                     matchExpression
                      match
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             runtime
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          poll_event_loop
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              cx
                       )
                      {
                      matchArms
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tupleStructPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Poll
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Ready
                            (
                            tupleStructItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                tupleStructPattern
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Err
                                 (
                                 tupleStructItems
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     identifierPattern
                                      identifier
                                       e
                                 )
                            )
                       =>
                       matchArmExpression
                        expressionWithBlock
                         blockExpression
                          {
                          statements
                           statement
                            item
                             macroItem
                              macroInvocationSemi
                               simplePath
                                simplePathSegment
                                 identifier
                                  assert_eq
                               !
                               (
                               tokenTree
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   e
                                tokenTreeToken
                                 macroPunctuationToken
                                  .
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   to_string
                               tokenTree
                                delimTokenTree
                                 (
                                 )
                               tokenTree
                                tokenTreeToken
                                 macroPunctuationToken
                                  ,
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   expected_error
                               )
                               ;
                          }
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           wildcardPattern
                            _
                       =>
                       expression
                        macroInvocation
                         simplePath
                          simplePathSegment
                           identifier
                            panic
                         !
                         delimTokenTree
                          (
                          )
                       ,
                      }
                   ;
                }
          )
        }
    item
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          test
      ]
     visItem
      function_
       functionQualifiers
       fn
       identifier
        test_core_js_stack_frame
       (
       )
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               runtime
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  JsRuntime
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    RuntimeOptions
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    default
              (
              )
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               error
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   runtime
             .
             pathExprSegment
              pathIdentSegment
               identifier
                execute
             (
             callParams
              expression
               literalExpression
                "core_js_stack_frame.js"
              ,
              expression
               literalExpression
                "Deno.core.dispatchByName('non_existent');"
              ,
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_err
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               error_string
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  error
            .
            pathExprSegment
             pathIdentSegment
              identifier
               to_string
            (
            )
           ;
         statement
          item
           macroItem
            macroInvocationSemi
             simplePath
              simplePathSegment
               identifier
                assert
             !
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 error_string
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 contains
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "deno:core/core.js"
               )
             )
             ;
        }
    }
 <EOF>
