crate
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         net
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          IpAddr
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          SocketAddr
      }
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         time
       ::
       simplePathSegment
        identifier
         Duration
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        clap
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         clap_app
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Arg
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
      ::
      simplePathSegment
       identifier
        future
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Either
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        log
      ::
      simplePathSegment
       identifier
        info
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        tokio
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         runtime
       ::
       simplePathSegment
        identifier
         Builder
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        shadowsocks_service
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         acl
       ::
       simplePathSegment
        identifier
         AccessControl
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         config
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          Config
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          ConfigType
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          ManagerConfig
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          Mode
      }
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         run_server
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         shadowsocks
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          config
       ::
       {
       useTree
        simplePath
         simplePathSegment
          identifier
           ManagerAddr
       ,
       useTree
        simplePath
         simplePathSegment
          identifier
           ServerAddr
       ,
       useTree
        simplePath
         simplePathSegment
          identifier
           ServerConfig
       }
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          crypto
        ::
        simplePathSegment
         identifier
          v1
       ::
       {
       useTree
        simplePath
         simplePathSegment
          identifier
           available_ciphers
       ,
       useTree
        simplePath
         simplePathSegment
          identifier
           CipherKind
       }
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          plugin
        ::
        simplePathSegment
         identifier
          PluginConfig
      ,
      }
     ,
     }
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          feature
       tokenTreeToken
        macroPunctuationToken
         =
       tokenTreeToken
        macroLiteralToken
         literalExpression
          "logging"
      )
   ]
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        common
      ::
      simplePathSegment
       identifier
        logging
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        common
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         monitor
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         validator
     }
    ;
 item
  visItem
   module
    mod
    identifier
     common
    ;
 item
  visItem
   constantItem
    const
    identifier
     VERSION
    :
    type_
     typeNoBounds
      referenceType
       &
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              str
    =
    expression
     macroInvocation
      simplePath
       simplePathSegment
        identifier
         env
      !
      delimTokenTree
       (
       tokenTree
        tokenTreeToken
         macroLiteralToken
          literalExpression
           "CARGO_PKG_VERSION"
       )
    ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             allow
          attrInput
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                unused_mut
            )
         ]
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            app
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             clap_app
          !
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               shadowsocks
            tokenTreeToken
             macroPunctuationToken
              =>
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 version
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 VERSION
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 about
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "A fast tunnel proxy that helps you bypass firewalls."
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 UDP_ONLY
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 u
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 conflicts_with
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   TCP_AND_UDP
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server mode UDP_ONLY"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 TCP_AND_UDP
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 U
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server mode TCP_AND_UDP"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 CONFIG
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 c
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 config
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 required_unless
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "SERVER_ADDR"
               )
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Shadowsocks configuration file (https://shadowsocks.org/en/config/quick-guide.html)"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 BIND_ADDR
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 b
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "bind-addr"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Bind address, outbound socket will bind this address"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 SERVER_ADDR
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 s
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "server-addr"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
             tokenTree
              delimTokenTree
               {
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validator
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validate_server_addr
               }
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   PASSWORD
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   ENCRYPT_METHOD
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server address"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 PASSWORD
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 k
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 password
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SERVER_ADDR
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server's password"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 ENCRYPT_METHOD
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 m
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "encrypt-method"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SERVER_ADDR
               ]
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 possible_values
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   available_ciphers
               tokenTree
                delimTokenTree
                 (
                 )
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 next_line_help
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server's encryption method"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 TIMEOUT
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 timeout
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
             tokenTree
              delimTokenTree
               {
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validator
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validate_u64
               }
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SERVER_ADDR
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Server's timeout seconds for TCP relay"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 PLUGIN
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 plugin
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   SERVER_ADDR
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "SIP003 (https://shadowsocks.org/en/spec/Plugin.html) plugin"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 PLUGIN_OPT
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "plugin-opts"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 requires
             tokenTree
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   PLUGIN
               ]
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Set SIP003 plugin options"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 MANAGER_ADDRESS
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "manager-address"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "ShadowSocks Manager (ssmgr) address, could be \"IP:Port\", \"Domain:Port\" or \"/path/to/unix.sock\""
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 NO_DELAY
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "no-delay"
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                !
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Set TCP_NODELAY option for socket"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 NOFILE
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 n
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 nofile
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Set RLIMIT_NOFILE with both soft and hard limit (only for *nix systems)"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 ACL
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 acl
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Path to ACL (Access Control List)"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 UDP_TIMEOUT
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "udp-timeout"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
             tokenTree
              delimTokenTree
               {
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validator
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validate_u64
               }
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Timeout seconds for UDP relay"
             )
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                @
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 arg
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 UDP_MAX_ASSOCIATIONS
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                -
              tokenTreeToken
               macroPunctuationToken
                -
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "udp-max-associations"
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 takes_value
             tokenTree
              delimTokenTree
               {
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validator
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   validate_u64
               }
             tokenTree
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "Maximum associations to be kept simultaneously for UDP relay"
             )
           )
        ;
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 feature
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "logging"
             )
          ]
         expressionWithBlock
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     app
               =
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    clap_app
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroPunctuationToken
                     @
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      app
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        app
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        VERBOSE
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        v
                     tokenTreeToken
                      macroPunctuationToken
                       ...
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Set log level"
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        LOG_WITHOUT_TIME
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "log-without-time"
                      )
                    tokenTree
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Log without datetime prefix"
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        LOG_CONFIG
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "log-config"
                      )
                    tokenTree
                     tokenTreeToken
                      macroRepOp
                       +
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        takes_value
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "log4rs configuration file"
                    )
                  )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unix
             )
          ]
         expressionWithBlock
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     app
               =
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    clap_app
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroPunctuationToken
                     @
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      app
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        app
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        DAEMONIZE
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        d
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "daemonize"
                      )
                    tokenTree
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Daemonize"
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        DAEMONIZE_PID_PATH
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "daemonize-pid"
                      )
                    tokenTree
                     tokenTreeToken
                      macroRepOp
                       +
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        takes_value
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "File path to store daemonized process's PID"
                    )
                  )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 any
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "linux"
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "android"
               )
             )
          ]
         expressionWithBlock
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     app
               =
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    clap_app
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroPunctuationToken
                     @
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      app
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        app
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        OUTBOUND_FWMARK
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "outbound-fwmark"
                      )
                    tokenTree
                     tokenTreeToken
                      macroRepOp
                       +
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        takes_value
                    tokenTree
                     delimTokenTree
                      {
                      tokenTree
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          validator
                       tokenTreeToken
                        macroPunctuationToken
                         ::
                       tokenTreeToken
                        macroIdentifierLikeToken
                         identifier
                          validate_u32
                      }
                    tokenTree
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Set SO_MARK option for outbound socket"
                    )
                  tokenTree
                   delimTokenTree
                    (
                    tokenTree
                     tokenTreeToken
                      macroPunctuationToken
                       @
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        arg
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        OUTBOUND_BIND_INTERFACE
                     tokenTreeToken
                      macroPunctuationToken
                       :
                     tokenTreeToken
                      macroPunctuationToken
                       -
                     tokenTreeToken
                      macroPunctuationToken
                       -
                    tokenTree
                     delimTokenTree
                      (
                      tokenTree
                       tokenTreeToken
                        macroLiteralToken
                         literalExpression
                          "outbound-bind-interface"
                      )
                    tokenTree
                     tokenTreeToken
                      macroRepOp
                       +
                     tokenTreeToken
                      macroIdentifierLikeToken
                       identifier
                        takes_value
                     tokenTreeToken
                      macroLiteralToken
                       literalExpression
                        "Set SO_BINDTODEVICE option for outbound socket"
                    )
                  )
              ;
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            matches
        =
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                app
          .
          pathExprSegment
           pathIdentSegment
            identifier
             arg
          (
          callParams
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Arg
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    with_name
              (
              callParams
               expression
                literalExpression
                 "IPV6_FIRST"
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                short
             (
             callParams
              expression
               literalExpression
                "6"
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               help
            (
            callParams
             expression
              literalExpression
               "Resolve hostname to IPv6 address first"
            )
           ,
          )
         .
         pathExprSegment
          pathIdentSegment
           identifier
            get_matches
         (
         )
        ;
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 feature
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               macroLiteralToken
                literalExpression
                 "logging"
             )
          ]
         expressionWithBlock
          matchExpression
           match
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  matches
            .
            pathExprSegment
             pathIdentSegment
              identifier
               value_of
            (
            callParams
             expression
              literalExpression
               "LOG_CONFIG"
            )
           {
           matchArms
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       path
                 )
            =>
            matchArmExpression
             expressionWithBlock
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         logging
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         init_with_file
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          path
                   )
                  ;
               }
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  None
            =>
            expression
             expressionWithBlock
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         logging
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         init_with_config
                   (
                   callParams
                    expression
                     literalExpression
                      "ssserver"
                    ,
                    expression
                     &
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           matches
                   )
                  ;
               }
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            config
        =
        expression
         expressionWithBlock
          matchExpression
           match
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  matches
            .
            pathExprSegment
             pathIdentSegment
              identifier
               value_of
            (
            callParams
             expression
              literalExpression
               "CONFIG"
            )
           {
           matchArms
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       cpath
                 )
            =>
            matchArmExpression
             expression
              expressionWithBlock
               matchExpression
                match
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Config
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       load_from_file
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        cpath
                  ,
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        ConfigType
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Server
                 )
                {
                matchArms
                 matchArm
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     tupleStructPattern
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Ok
                      (
                      tupleStructItems
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            cfg
                      )
                 =>
                 matchArmExpression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        cfg
                  ,
                 matchArm
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     tupleStructPattern
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          Err
                      (
                      tupleStructItems
                       pattern
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            err
                      )
                 =>
                 expression
                  expressionWithBlock
                   blockExpression
                    {
                    statements
                     statement
                      item
                       macroItem
                        macroInvocationSemi
                         simplePath
                          simplePathSegment
                           identifier
                            panic
                         !
                         (
                         tokenTree
                          tokenTreeToken
                           macroLiteralToken
                            literalExpression
                             "loading config \"{}\", {}"
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             cpath
                          tokenTreeToken
                           macroPunctuationToken
                            ,
                          tokenTreeToken
                           macroIdentifierLikeToken
                            identifier
                             err
                         )
                         ;
                    }
                }
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  None
            =>
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Config
                ::
                pathExprSegment
                 pathIdentSegment
                  identifier
                   new
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ConfigType
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Server
             )
            ,
           }
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    svr_addr
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "SERVER_ADDR"
           )
          blockExpression
           {
           statements
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  password
              =
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      matches
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   value_of
                (
                callParams
                 expression
                  literalExpression
                   "PASSWORD"
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  expect
               (
               callParams
                expression
                 literalExpression
                  "password"
               )
              ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  method
              =
              expression
               expression
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        matches
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     value_of
                  (
                  callParams
                   expression
                    literalExpression
                     "ENCRYPT_METHOD"
                  )
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    expect
                 (
                 callParams
                  expression
                   literalExpression
                    "encrypt-method"
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   parse
                 ::
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           CipherKind
                  >
                (
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  expect
               (
               callParams
                expression
                 literalExpression
                  "encryption method"
               )
              ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  svr_addr
              =
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      svr_addr
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   parse
                 ::
                 genericArgs
                  <
                  genericArgsTypes
                   type_
                    typeNoBounds
                     traitObjectTypeOneBound
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           ServerAddr
                  >
                (
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  expect
               (
               callParams
                expression
                 literalExpression
                  "server-addr"
               )
              ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  timeout
              =
              expression
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       matches
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    value_of
                 (
                 callParams
                  expression
                   literalExpression
                    "TIMEOUT"
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   map
                (
                callParams
                 expression
                  closureExpression
                   |
                   closureParameters
                    closureParam
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          t
                   |
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           t
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        parse
                      ::
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                u64
                       >
                     (
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       expect
                    (
                    callParams
                     expression
                      literalExpression
                       "timeout"
                    )
                )
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  map
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Duration
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      from_secs
               )
              ;
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 mut
                 identifier
                  sc
              =
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     ServerConfig
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     new
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      svr_addr
                ,
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       password
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    to_owned
                 (
                 )
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      method
               )
              ;
            statement
             expressionStatement
              expressionWithBlock
               ifLetExpression
                if
                let
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          timeout
                    )
                =
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      timeout
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           sc
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        set_timeout
                     (
                     callParams
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            timeout
                     )
                    ;
                 }
            statement
             expressionStatement
              expressionWithBlock
               ifLetExpression
                if
                let
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          p
                    )
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       matches
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    value_of
                 (
                 callParams
                  expression
                   literalExpression
                    "PLUGIN"
                 )
                blockExpression
                 {
                 statements
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       identifier
                        plugin
                    =
                    expression
                     structExpression
                      structExprStruct
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           PluginConfig
                       {
                       structExprFields
                        structExprField
                         identifier
                          plugin
                         :
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                p
                          .
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             to_owned
                          (
                          )
                        ,
                        structExprField
                         identifier
                          plugin_opts
                         :
                         expression
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 matches
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              value_of
                           (
                           callParams
                            expression
                             literalExpression
                              "PLUGIN_OPT"
                           )
                          .
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             map
                          (
                          callParams
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 ToOwned
                              ::
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 to_owned
                          )
                        ,
                        structExprField
                         identifier
                          plugin_args
                         :
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Vec
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                new
                          (
                          )
                        ,
                       }
                    ;
                  statement
                   expressionStatement
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           sc
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        set_plugin
                     (
                     callParams
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            plugin
                     )
                    ;
                 }
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 server
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  push
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      sc
               )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    bind_addr
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "BIND_ADDR"
           )
          blockExpression
           {
           statements
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  bind_addr
              =
              expression
               expressionWithBlock
                matchExpression
                 match
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        bind_addr
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     parse
                   ::
                   genericArgs
                    <
                    genericArgsTypes
                     type_
                      typeNoBounds
                       traitObjectTypeOneBound
                        traitBound
                         typePath
                          typePathSegment
                           pathIdentSegment
                            identifier
                             IpAddr
                    >
                  (
                  )
                 {
                 matchArms
                  matchArm
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Ok
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             ip
                       )
                  =>
                  matchArmExpression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          ServerAddr
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          from
                    (
                    callParams
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            SocketAddr
                         ::
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            new
                      (
                      callParams
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             ip
                       ,
                       expression
                        literalExpression
                         0
                      )
                    )
                   ,
                  matchArm
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Err
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           restPattern
                            ..
                       )
                  =>
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         ServerAddr
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         from
                   (
                   callParams
                    expression
                     (
                     tupleElements
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            bind_addr
                      ,
                      expression
                       literalExpression
                        0
                     )
                   )
                  ,
                 }
              ;
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 local_addr
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       bind_addr
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              is_present
           (
           callParams
            expression
             literalExpression
              "UDP_ONLY"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expressionWithBlock
               ifExpression
                if
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        config
                  .
                  identifier
                   mode
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    enable_tcp
                 (
                 )
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            config
                      .
                      identifier
                       mode
                     =
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Mode
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           TcpAndUdp
                    ;
                 }
                else
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            config
                      .
                      identifier
                       mode
                     =
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Mode
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           UdpOnly
                    ;
                 }
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              is_present
           (
           callParams
            expression
             literalExpression
              "TCP_AND_UDP"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 mode
               =
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Mode
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     TcpAndUdp
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              is_present
           (
           callParams
            expression
             literalExpression
              "NO_DELAY"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 no_delay
               =
               expression
                literalExpression
                 true
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 any
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "linux"
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "android"
               )
             )
          ]
         expressionWithBlock
          ifLetExpression
           if
           let
           pattern
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     mark
               )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  matches
            .
            pathExprSegment
             pathIdentSegment
              identifier
               value_of
            (
            callParams
             expression
              literalExpression
               "OUTBOUND_FWMARK"
            )
           blockExpression
            {
            statements
             statement
              expressionStatement
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       config
                 .
                 identifier
                  outbound_fwmark
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                 (
                 callParams
                  expression
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          mark
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       parse
                     ::
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         traitObjectTypeOneBound
                          traitBound
                           typePath
                            typePathSegment
                             pathIdentSegment
                              identifier
                               u32
                      >
                    (
                    )
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      expect
                   (
                   callParams
                    expression
                     literalExpression
                      "an unsigned integer for `outbound-fwmark`"
                   )
                 )
               ;
            }
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 any
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "linux"
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   target_os
                tokenTreeToken
                 macroPunctuationToken
                  =
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "android"
               )
             )
          ]
         expressionWithBlock
          ifLetExpression
           if
           let
           pattern
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     iface
               )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  matches
            .
            pathExprSegment
             pathIdentSegment
              identifier
               value_of
            (
            callParams
             expression
              literalExpression
               "OUTBOUND_BIND_INTERFACE"
            )
           blockExpression
            {
            statements
             statement
              expressionStatement
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       config
                 .
                 identifier
                  outbound_bind_interface
                =
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                 (
                 callParams
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         From
                      ::
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         from
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           iface
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        to_owned
                     (
                     )
                   )
                 )
               ;
            }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    m
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "MANAGER_ADDRESS"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 manager
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        ManagerConfig
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        new
                  (
                  callParams
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           m
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        parse
                      ::
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                ManagerAddr
                       >
                     (
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       expect
                    (
                    callParams
                     expression
                      literalExpression
                       "manager address"
                    )
                  )
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    nofile
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "NOFILE"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 nofile
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         nofile
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      parse
                    ::
                    genericArgs
                     <
                     genericArgsTypes
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              u64
                     >
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     expect
                  (
                  callParams
                   expression
                    literalExpression
                     "an unsigned integer for `nofile`"
                  )
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    acl_file
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "ACL"
           )
          blockExpression
           {
           statements
            statement
             letStatement
              let
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  acl
              =
              expression
               expressionWithBlock
                matchExpression
                 match
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        AccessControl
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        load_from_file
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         acl_file
                  )
                 {
                 matchArms
                  matchArm
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Ok
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             acl
                       )
                  =>
                  matchArmExpression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         acl
                   ,
                  matchArm
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Err
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            identifier
                             err
                       )
                  =>
                  expression
                   expressionWithBlock
                    blockExpression
                     {
                     statements
                      statement
                       item
                        macroItem
                         macroInvocationSemi
                          simplePath
                           simplePathSegment
                            identifier
                             panic
                          !
                          (
                          tokenTree
                           tokenTreeToken
                            macroLiteralToken
                             literalExpression
                              "loading ACL \"{}\", {}"
                           tokenTreeToken
                            macroPunctuationToken
                             ,
                           tokenTreeToken
                            macroIdentifierLikeToken
                             identifier
                              acl_file
                           tokenTreeToken
                            macroPunctuationToken
                             ,
                           tokenTreeToken
                            macroIdentifierLikeToken
                             identifier
                              err
                          )
                          ;
                     }
                 }
              ;
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 acl
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       acl
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              is_present
           (
           callParams
            expression
             literalExpression
              "IPV6_FIRST"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 ipv6_first
               =
               expression
                literalExpression
                 true
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    udp_timeout
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "UDP_TIMEOUT"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 udp_timeout
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Duration
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        from_secs
                  (
                  callParams
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           udp_timeout
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        parse
                      ::
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                u64
                       >
                     (
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       expect
                    (
                    callParams
                     expression
                      literalExpression
                       "udp-timeout"
                    )
                  )
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    udp_max_assoc
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 matches
           .
           pathExprSegment
            pathIdentSegment
             identifier
              value_of
           (
           callParams
            expression
             literalExpression
              "UDP_MAX_ASSOCIATIONS"
           )
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      config
                .
                identifier
                 udp_max_associations
               =
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         udp_max_assoc
                   .
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      parse
                    ::
                    genericArgs
                     <
                     genericArgsTypes
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              usize
                     >
                   (
                   )
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     expect
                  (
                  callParams
                   expression
                    literalExpression
                     "udp-max-associations"
                  )
                )
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  config
            .
            identifier
             server
           .
           pathExprSegment
            pathIdentSegment
             identifier
              is_empty
           (
           )
          blockExpression
           {
           statements
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   eprintln
                !
                (
                tokenTree
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "missing proxy servers, consider specifying it by \\n             --server-addr, --encrypt-method, --password command line option, \\n                or configuration file, check more details in https://shadowsocks.org/en/config/quick-guide.html"
                )
                ;
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   println
                !
                (
                tokenTree
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "{}"
                 tokenTreeToken
                  macroPunctuationToken
                   ,
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    matches
                 tokenTreeToken
                  macroPunctuationToken
                   .
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    usage
                tokenTree
                 delimTokenTree
                  (
                  )
                )
                ;
            statement
             expressionStatement
              expression
               return
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Err
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    err
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 config
           .
           pathExprSegment
            pathIdentSegment
             identifier
              check_integrity
           (
           )
          blockExpression
           {
           statements
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   eprintln
                !
                (
                tokenTree
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "config integrity check failed, {}"
                 tokenTreeToken
                  macroPunctuationToken
                   ,
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    err
                )
                ;
            statement
             item
              macroItem
               macroInvocationSemi
                simplePath
                 simplePathSegment
                  identifier
                   println
                !
                (
                tokenTree
                 tokenTreeToken
                  macroLiteralToken
                   literalExpression
                    "{}"
                 tokenTreeToken
                  macroPunctuationToken
                   ,
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    matches
                 tokenTreeToken
                  macroPunctuationToken
                   .
                 tokenTreeToken
                  macroIdentifierLikeToken
                   identifier
                    usage
                tokenTree
                 delimTokenTree
                  (
                  )
                )
                ;
            statement
             expressionStatement
              expression
               return
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 unix
             )
          ]
         expressionWithBlock
          ifExpression
           if
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  matches
            .
            pathExprSegment
             pathIdentSegment
              identifier
               is_present
            (
            callParams
             expression
              literalExpression
               "DAEMONIZE"
            )
           blockExpression
            {
            statements
             statement
              item
               visItem
                useDeclaration
                 use
                 useTree
                  simplePath
                   simplePathSegment
                    self
                   ::
                   simplePathSegment
                    identifier
                     common
                   ::
                   simplePathSegment
                    identifier
                     daemonize
                 ;
             statement
              expressionStatement
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      daemonize
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      daemonize
                (
                callParams
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        matches
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     value_of
                  (
                  callParams
                   expression
                    literalExpression
                     "DAEMONIZE_PID_PATH"
                  )
                )
               ;
            }
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             info
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "shadowsocks {}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              VERSION
          )
          ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            builder
        =
        expression
         expressionWithBlock
          ifExpression
           if
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                cfg
             !
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  feature
               tokenTreeToken
                macroPunctuationToken
                 =
               tokenTreeToken
                macroLiteralToken
                 literalExpression
                  "single-threaded"
              )
           blockExpression
            {
            statements
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Builder
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new_current_thread
              (
              )
            }
           else
           blockExpression
            {
            statements
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Builder
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    new_multi_thread
              (
              )
            }
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            runtime
        =
        expression
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 builder
           .
           pathExprSegment
            pathIdentSegment
             identifier
              enable_all
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             build
          (
          )
         .
         pathExprSegment
          pathIdentSegment
           identifier
            expect
         (
         callParams
          expression
           literalExpression
            "create tokio Runtime"
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               runtime
         .
         pathExprSegment
          pathIdentSegment
           identifier
            block_on
         (
         callParams
          expression
           expressionWithBlock
            asyncBlockExpression
             async
             move
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     abort_signal
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        monitor
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        create_signal_monitor
                  (
                  )
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     server
                 =
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        run_server
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         config
                  )
                 ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      tokio
                    ::
                    simplePathSegment
                     identifier
                      pin
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       abort_signal
                   )
                   ;
               statement
                item
                 macroItem
                  macroInvocationSemi
                   simplePath
                    simplePathSegment
                     identifier
                      tokio
                    ::
                    simplePathSegment
                     identifier
                      pin
                   !
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       server
                   )
                   ;
               statement
                expressionStatement
                 expressionWithBlock
                  matchExpression
                   match
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           future
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           select
                     (
                     callParams
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            server
                      ,
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            abort_signal
                     )
                    .
                    await
                   {
                   matchArms
                    matchArm
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Either
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Left
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             tuplePattern
                              (
                              tuplePatternItems
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Ok
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       restPattern
                                        ..
                                   )
                               ,
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  restPattern
                                   ..
                              )
                         )
                    =>
                    matchArmExpression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          panic
                       !
                       delimTokenTree
                        (
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            "server exited unexpectly"
                        )
                     ,
                    matchArm
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Either
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Left
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             tuplePattern
                              (
                              tuplePatternItems
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  tupleStructPattern
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Err
                                   (
                                   tupleStructItems
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         err
                                   )
                               ,
                               pattern
                                patternNoTopAlt
                                 patternWithoutRange
                                  restPattern
                                   ..
                              )
                         )
                    =>
                    matchArmExpression
                     expression
                      macroInvocation
                       simplePath
                        simplePathSegment
                         identifier
                          panic
                       !
                       delimTokenTree
                        (
                        tokenTree
                         tokenTreeToken
                          macroLiteralToken
                           literalExpression
                            "aborted with {}"
                         tokenTreeToken
                          macroPunctuationToken
                           ,
                         tokenTreeToken
                          macroIdentifierLikeToken
                           identifier
                            err
                        )
                     ,
                    matchArm
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Either
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Right
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             wildcardPattern
                              _
                         )
                    =>
                    expression
                     (
                     )
                    ,
                   }
              }
         )
        ;
     }
 <EOF>
