crate
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          unix
      )
   ]
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
      ::
      simplePathSegment
       identifier
        path
      ::
      simplePathSegment
       identifier
        PathBuf
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         error
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         fmt
      ::
      {
      useTree
       simplePath
        simplePathSegment
         self
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          Display
      }
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         net
       ::
       simplePathSegment
        identifier
         SocketAddr
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         str
       ::
       simplePathSegment
        identifier
         FromStr
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         time
       ::
       simplePathSegment
        identifier
         Duration
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        base64
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         decode_config
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         encode_config
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         URL_SAFE_NO_PAD
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        log
      ::
      simplePathSegment
       identifier
        error
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        url
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Url
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         crypto
       ::
       simplePathSegment
        identifier
         v1
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          openssl_bytes_to_key
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          CipherKind
      }
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         plugin
       ::
       simplePathSegment
        identifier
         PluginConfig
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         relay
       ::
       simplePathSegment
        identifier
         socks5
       ::
       simplePathSegment
        identifier
         Address
     ,
     }
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Copy
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Clone
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Eq
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          PartialEq
      )
   ]
  visItem
   visibility
    pub
   enumeration
    enum
    identifier
     ServerType
    {
    enumItems
     enumItem
      identifier
       Local
     ,
     enumItem
      identifier
       Server
     ,
    }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerType
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        is_local
       (
       functionParameters
        selfParam
         shorthandSelf
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                bool
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               self
          comparisonOperator
           ==
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerType
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                Local
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        is_server
       (
       functionParameters
        selfParam
         shorthandSelf
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                bool
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               self
          comparisonOperator
           ==
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerType
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                Server
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Clone
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
      )
   ]
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      ServerConfig
     {
     structFields
      structField
       identifier
        addr
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ServerAddr
      ,
      structField
       identifier
        password
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               String
      ,
      structField
       identifier
        method
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               CipherKind
      ,
      structField
       identifier
        enc_key
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Box
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 sliceType
                  [
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          u8
                  ]
              >
      ,
      structField
       identifier
        timeout
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Duration
              >
      ,
      structField
       identifier
        plugin
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       PluginConfig
              >
      ,
      structField
       identifier
        plugin_addr
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
              >
      ,
      structField
       identifier
        remarks
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       String
              >
      ,
      structField
       identifier
        id
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Option
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       String
              >
      ,
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerConfig
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        new
       genericParams
        <
        genericParam
         typeParam
          identifier
           A
        ,
        genericParam
         typeParam
          identifier
           P
        >
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  A
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               password
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  P
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               method
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  CipherKind
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ServerConfig
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  A
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         ServerAddr
                >
        ,
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  P
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         String
                >
        ,
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               password
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  password
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               enc_key
           =
           expression
            expression
             macroInvocation
              simplePath
               simplePathSegment
                identifier
                 vec
              !
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   0u8
                tokenTreeToken
                 macroPunctuationToken
                  ;
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   method
                tokenTreeToken
                 macroPunctuationToken
                  .
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   key_len
               tokenTree
                delimTokenTree
                 (
                 )
               ]
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into_boxed_slice
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  openssl_bytes_to_key
            (
            callParams
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    password
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 as_bytes
              (
              )
             ,
             expression
              &
              mut
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    enc_key
            )
           ;
         expression
          structExpression
           structExprStruct
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerConfig
            {
            structExprFields
             structExprField
              identifier
               addr
              :
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     addr
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  into
               (
               )
             ,
             structExprField
              identifier
               password
             ,
             structExprField
              identifier
               method
             ,
             structExprField
              identifier
               enc_key
             ,
             structExprField
              identifier
               timeout
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
             ,
             structExprField
              identifier
               plugin
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
             ,
             structExprField
              identifier
               plugin_addr
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
             ,
             structExprField
              identifier
               remarks
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
             ,
             structExprField
              identifier
               id
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
             ,
            }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_method
       genericParams
        <
        genericParam
         typeParam
          identifier
           P
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               method
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  CipherKind
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               password
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  P
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  P
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         String
                >
        ,
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              method
            =
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  method
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              password
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   password
             .
             pathExprSegment
              pathIdentSegment
               identifier
                into
             (
             )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               enc_key
           =
           expression
            expression
             macroInvocation
              simplePath
               simplePathSegment
                identifier
                 vec
              !
              delimTokenTree
               [
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   0u8
                tokenTreeToken
                 macroPunctuationToken
                  ;
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   method
                tokenTreeToken
                 macroPunctuationToken
                  .
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   key_len
               tokenTree
                delimTokenTree
                 (
                 )
               ]
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into_boxed_slice
            (
            )
           ;
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  openssl_bytes_to_key
            (
            callParams
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    self
               .
               identifier
                password
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 as_bytes
              (
              )
             ,
             expression
              &
              mut
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    enc_key
            )
           ;
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              enc_key
            =
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  enc_key
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_plugin
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               p
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  PluginConfig
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              plugin
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    p
             )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_addr
       genericParams
        <
        genericParam
         typeParam
          identifier
           A
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               a
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  A
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  A
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         ServerAddr
                >
        ,
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              addr
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   a
             .
             pathExprSegment
              pathIdentSegment
               identifier
                into
             (
             )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        addr
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ServerAddr
       blockExpression
        {
        statements
         expression
          &
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                self
           .
           identifier
            addr
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        key
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            sliceType
             [
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     u8
             ]
       blockExpression
        {
        statements
         expression
          &
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             enc_key
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_ref
           (
           )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        password
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  str
       blockExpression
        {
        statements
         expression
          &
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             password
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_str
           (
           )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        method
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                CipherKind
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               self
          .
          identifier
           method
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        plugin
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  referenceType
                   &
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          PluginConfig
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                self
           .
           identifier
            plugin
          .
          pathExprSegment
           pathIdentSegment
            identifier
             as_ref
          (
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_plugin_addr
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               a
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ServerAddr
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              plugin_addr
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    a
             )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        plugin_addr
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  referenceType
                   &
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          ServerAddr
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                self
           .
           identifier
            plugin_addr
          .
          pathExprSegment
           pathIdentSegment
            identifier
             as_ref
          (
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        external_addr
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ServerAddr
       blockExpression
        {
        statements
         expression
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             plugin_addr
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_ref
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             unwrap_or
          (
          callParams
           expression
            &
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              addr
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_timeout
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               timeout
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Duration
       )
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              timeout
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    timeout
             )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        timeout
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Duration
               >
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               self
          .
          identifier
           timeout
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        remarks
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  referenceType
                   &
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          str
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             remarks
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_ref
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             map
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 AsRef
              ::
              pathExprSegment
               pathIdentSegment
                identifier
                 as_ref
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_remarks
       genericParams
        <
        genericParam
         typeParam
          identifier
           S
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               remarks
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         String
                >
        ,
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              remarks
            =
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
             (
             callParams
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     remarks
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  into
               (
               )
             )
           ;
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        id
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  referenceType
                   &
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          str
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 self
            .
            identifier
             id
           .
           pathExprSegment
            pathIdentSegment
             identifier
              as_ref
           (
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             map
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 AsRef
              ::
              pathExprSegment
               pathIdentSegment
                identifier
                 as_ref
          )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        set_id
       genericParams
        <
        genericParam
         typeParam
          identifier
           S
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               id
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
       )
       whereClause
        where
        whereClauseItem
         typeBoundWhereClauseItem
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
          :
          typeParamBounds
           typeParamBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Into
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         String
                >
        ,
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                self
           .
           identifier
            id
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 Some
           (
           callParams
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   id
             .
             pathExprSegment
              pathIdentSegment
               identifier
                into
             (
             )
           )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        to_qrcode_url
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                String
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               param
           =
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                format
             !
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroLiteralToken
                 literalExpression
                  "{}:{}@{}"
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  method
              tokenTree
               delimTokenTree
                (
                )
              tokenTree
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  password
              tokenTree
               delimTokenTree
                (
                )
              tokenTree
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  addr
              tokenTree
               delimTokenTree
                (
                )
              )
           ;
         expression
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              format
           !
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroLiteralToken
               literalExpression
                "ss://{}"
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                encode_config
            tokenTree
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroPunctuationToken
                 &
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  param
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  URL_SAFE_NO_PAD
              )
            )
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        to_url
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                String
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               user_info
           =
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                format
             !
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroLiteralToken
                 literalExpression
                  "{}:{}"
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  method
              tokenTree
               delimTokenTree
                (
                )
              tokenTree
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  password
              tokenTree
               delimTokenTree
                (
                )
              )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               encoded_user_info
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  encode_config
            (
            callParams
             expression
              &
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    user_info
             ,
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   URL_SAFE_NO_PAD
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               url
           =
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                format
             !
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroLiteralToken
                 literalExpression
                  "ss://{}@{}"
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  encoded_user_info
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 keyword
                  self
               tokenTreeToken
                macroPunctuationToken
                 .
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  addr
              tokenTree
               delimTokenTree
                (
                )
              )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       c
                 )
             =
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 plugin
              (
              )
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    mut
                    identifier
                     plugin
                 =
                 expression
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         c
                   .
                   identifier
                    plugin
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     clone
                  (
                  )
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  ifLetExpression
                   if
                   let
                   pattern
                    patternNoTopAlt
                     patternWithoutRange
                      tupleStructPattern
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           Some
                       (
                       tupleStructItems
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           identifierPattern
                            ref
                            identifier
                             opt
                       )
                   =
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          c
                    .
                    identifier
                     plugin_opts
                   blockExpression
                    {
                    statements
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              plugin
                        compoundAssignOperator
                         +=
                        expression
                         literalExpression
                          ";"
                       ;
                     statement
                      expressionStatement
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              plugin
                        compoundAssignOperator
                         +=
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              opt
                       ;
                    }
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     plugin_param
                 =
                 expression
                  [
                  arrayElements
                   expression
                    (
                    tupleElements
                     expression
                      literalExpression
                       "plugin"
                     ,
                     expression
                      &
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            plugin
                    )
                  ]
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        url
                  compoundAssignOperator
                   +=
                  expression
                   literalExpression
                    "/?"
                 ;
               statement
                expressionStatement
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        url
                  compoundAssignOperator
                   +=
                  expression
                   &
                   expression
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           serde_urlencoded
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           to_string
                     (
                     callParams
                      expression
                       &
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             plugin_param
                     )
                    .
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       unwrap
                    (
                    )
                 ;
              }
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               url
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        from_url
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               encoded
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ServerConfig
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        UrlParseError
               >
       blockExpression
        {
        statements
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               parsed
           =
           expression
            expression
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    Url
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    parse
              (
              callParams
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     encoded
              )
             .
             pathExprSegment
              pathIdentSegment
               identifier
                map_err
             (
             callParams
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    UrlParseError
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    from
             )
            ?
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifExpression
             if
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     parsed
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  scheme
               (
               )
              comparisonOperator
               !=
              expression
               literalExpression
                "ss"
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  return
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Err
                   (
                   callParams
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          UrlParseError
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          InvalidScheme
                   )
                 ;
              }
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               user_info
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  parsed
            .
            pathExprSegment
             pathIdentSegment
              identifier
               username
            (
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               account
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     decode_config
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      user_info
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      URL_SAFE_NO_PAD
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Ok
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          account
                    )
               =>
               matchArmExpression
                expression
                 expressionWithBlock
                  matchExpression
                   match
                   expression
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          String
                       ::
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          from_utf8
                    (
                    callParams
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           account
                    )
                   {
                   matchArms
                    matchArm
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Ok
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               ac
                         )
                    =>
                    matchArmExpression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           ac
                     ,
                    matchArm
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Err
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             restPattern
                              ..
                         )
                    =>
                    expression
                     expressionWithBlock
                      blockExpression
                       {
                       statements
                        statement
                         expressionStatement
                          expression
                           return
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Err
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   UrlParseError
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   InvalidAuthInfo
                            )
                          ;
                       }
                   }
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Err
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          err
                    )
               =>
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          error
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           "Failed to parse UserInfo with Base64, err: {}"
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           err
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      return
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Err
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              UrlParseError
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              InvalidUserInfo
                       )
                     ;
                  }
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               host
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     parsed
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  host_str
               (
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Some
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          host
                    )
               =>
               matchArmExpression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      host
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     None
               =>
               expression
                return
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Err
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        UrlParseError
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        MissingHost
                 )
               ,
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               port
           =
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   parsed
             .
             pathExprSegment
              pathIdentSegment
               identifier
                port
             (
             )
            .
            pathExprSegment
             pathIdentSegment
              identifier
               unwrap_or
            (
            callParams
             expression
              literalExpression
               8388
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
           =
           expression
            macroInvocation
             simplePath
              simplePathSegment
               identifier
                format
             !
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroLiteralToken
                 literalExpression
                  "{}:{}"
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  host
               tokenTreeToken
                macroPunctuationToken
                 ,
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  port
              )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               sp2
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  account
            .
            pathExprSegment
             pathIdentSegment
              identifier
               splitn
            (
            callParams
             expression
              literalExpression
               2
             ,
             expression
              literalExpression
               ':'
            )
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    method
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    pwd
              )
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               (
               tupleElements
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sp2
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    next
                 (
                 )
                ,
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sp2
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    next
                 (
                 )
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tuplePattern
                    (
                    tuplePatternItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Some
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               m
                         )
                     ,
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        tupleStructPattern
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Some
                         (
                         tupleStructItems
                          pattern
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               p
                         )
                    )
               =>
               matchArmExpression
                expression
                 (
                 tupleElements
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        m
                  ,
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        p
                 )
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   wildcardPattern
                    _
               =>
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    panic
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "Malformed input"
                  )
               ,
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
           =
           expression
            expressionWithBlock
             matchExpression
              match
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     addr
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  parse
                ::
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          ServerAddr
                 >
               (
               )
              {
              matchArms
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Ok
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          a
                    )
               =>
               matchArmExpression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      a
                ,
               matchArm
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   tupleStructPattern
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        Err
                    (
                    tupleStructItems
                     pattern
                      patternNoTopAlt
                       patternWithoutRange
                        identifierPattern
                         identifier
                          err
                    )
               =>
               expression
                expressionWithBlock
                 blockExpression
                  {
                  statements
                   statement
                    item
                     macroItem
                      macroInvocationSemi
                       simplePath
                        simplePathSegment
                         identifier
                          error
                       !
                       (
                       tokenTree
                        tokenTreeToken
                         macroLiteralToken
                          literalExpression
                           "Failed to parse \"{}\" to ServerAddr, err: {:?}"
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           addr
                        tokenTreeToken
                         macroPunctuationToken
                          ,
                        tokenTreeToken
                         macroIdentifierLikeToken
                          identifier
                           err
                       )
                       ;
                   statement
                    expressionStatement
                     expression
                      return
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             Err
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              UrlParseError
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              InvalidServerAddr
                       )
                     ;
                  }
              }
           ;
         statement
          letStatement
           let
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              mut
              identifier
               svrconfig
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  ServerConfig
               ::
               pathExprSegment
                pathIdentSegment
                 identifier
                  new
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   addr
             ,
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    pwd
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 to_owned
              (
              )
             ,
             expression
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     method
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  parse
               (
               )
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 unwrap
              (
              )
            )
           ;
         statement
          expressionStatement
           expressionWithBlock
            ifLetExpression
             if
             let
             pattern
              patternNoTopAlt
               patternWithoutRange
                tupleStructPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Some
                 (
                 tupleStructItems
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     identifierPattern
                      identifier
                       q
                 )
             =
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    parsed
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 query
              (
              )
             blockExpression
              {
              statements
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     query
                 =
                 expression
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           serde_urlencoded
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           from_bytes
                         ::
                         genericArgs
                          <
                          genericArgsTypes
                           type_
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   Vec
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     tupleType
                                      (
                                      type_
                                       typeNoBounds
                                        traitObjectTypeOneBound
                                         traitBound
                                          typePath
                                           typePathSegment
                                            pathIdentSegment
                                             identifier
                                              String
                                      ,
                                      type_
                                       typeNoBounds
                                        traitObjectTypeOneBound
                                         traitBound
                                          typePath
                                           typePathSegment
                                            pathIdentSegment
                                             identifier
                                              String
                                      )
                                  >
                          >
                     (
                     callParams
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             q
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          as_bytes
                       (
                       )
                     )
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Ok
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                q
                          )
                     =>
                     matchArmExpression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            q
                      ,
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Err
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                err
                          )
                     =>
                     expression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          item
                           macroItem
                            macroInvocationSemi
                             simplePath
                              simplePathSegment
                               identifier
                                error
                             !
                             (
                             tokenTree
                              tokenTreeToken
                               macroLiteralToken
                                literalExpression
                                 "Failed to parse QueryString, err: {}"
                              tokenTreeToken
                               macroPunctuationToken
                                ,
                              tokenTreeToken
                               macroIdentifierLikeToken
                                identifier
                                 err
                             )
                             ;
                         statement
                          expressionStatement
                           expression
                            return
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Err
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    UrlParseError
                                 ::
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    InvalidQueryString
                             )
                           ;
                        }
                    }
                 ;
               statement
                expressionStatement
                 expressionWithBlock
                  loopExpression
                   iteratorLoopExpression
                    for
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       tuplePattern
                        (
                        tuplePatternItems
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              key
                         ,
                         pattern
                          patternNoTopAlt
                           patternWithoutRange
                            identifierPattern
                             identifier
                              value
                        )
                    in
                    expression
                     pathExpression
                      pathInExpression
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          query
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expressionWithBlock
                         ifExpression
                          if
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 key
                           comparisonOperator
                            !=
                           expression
                            literalExpression
                             "plugin"
                          blockExpression
                           {
                           statements
                            statement
                             expressionStatement
                              expression
                               continue
                              ;
                           }
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           mut
                           identifier
                            vsp
                        =
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               value
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            splitn
                         (
                         callParams
                          expression
                           literalExpression
                            2
                          ,
                          expression
                           literalExpression
                            ';'
                         )
                        ;
                      statement
                       expressionStatement
                        expressionWithBlock
                         matchExpression
                          match
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 vsp
                           .
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              next
                           (
                           )
                          {
                          matchArms
                           matchArm
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               identifierPattern
                                identifier
                                 None
                           =>
                           matchArmExpression
                            expressionWithBlock
                             blockExpression
                              {
                              }
                           matchArm
                            pattern
                             patternNoTopAlt
                              patternWithoutRange
                               tupleStructPattern
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Some
                                (
                                tupleStructItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      p
                                )
                           =>
                           expression
                            expressionWithBlock
                             blockExpression
                              {
                              statements
                               statement
                                letStatement
                                 let
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     plugin
                                 =
                                 expression
                                  structExpression
                                   structExprStruct
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        PluginConfig
                                    {
                                    structExprFields
                                     structExprField
                                      identifier
                                       plugin
                                      :
                                      expression
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             p
                                       .
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          to_owned
                                       (
                                       )
                                     ,
                                     structExprField
                                      identifier
                                       plugin_opts
                                      :
                                      expression
                                       expression
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              vsp
                                        .
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           next
                                        (
                                        )
                                       .
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          map
                                       (
                                       callParams
                                        expression
                                         pathExpression
                                          pathInExpression
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              ToOwned
                                           ::
                                           pathExprSegment
                                            pathIdentSegment
                                             identifier
                                              to_owned
                                       )
                                     ,
                                     structExprField
                                      identifier
                                       plugin_args
                                      :
                                      expression
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             Vec
                                          ::
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             new
                                       (
                                       )
                                     ,
                                    }
                                 ;
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        svrconfig
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     set_plugin
                                  (
                                  callParams
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         plugin
                                  )
                                 ;
                              }
                          }
                     }
              }
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                Ok
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 svrconfig
          )
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Clone
      )
   ]
  visItem
   visibility
    pub
   enumeration
    enum
    identifier
     UrlParseError
    {
    enumItems
     enumItem
      identifier
       ParseError
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 url
              ::
              typePathSegment
               pathIdentSegment
                identifier
                 ParseError
       )
     ,
     enumItem
      identifier
       InvalidScheme
     ,
     enumItem
      identifier
       InvalidUserInfo
     ,
     enumItem
      identifier
       MissingHost
     ,
     enumItem
      identifier
       InvalidAuthInfo
     ,
     enumItem
      identifier
       InvalidServerAddr
     ,
     enumItem
      identifier
       InvalidQueryString
     ,
    }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 url
              ::
              typePathSegment
               pathIdentSegment
                identifier
                 ParseError
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             UrlParseError
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               err
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  url
               ::
               typePathSegment
                pathIdentSegment
                 identifier
                  ParseError
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                UrlParseError
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                UrlParseError
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                ParseError
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 err
          )
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         fmt
      ::
      typePathSegment
       pathIdentSegment
        identifier
         Display
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             UrlParseError
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        fmt
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               f
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    fmt
                 ::
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Formatter
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                fmt
             ::
             typePathSegment
              pathIdentSegment
               identifier
                Result
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ParseError
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         err
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      fmt
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Display
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      fmt
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       err
                 ,
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       f
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidScheme
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "URL must have \"ss://\" scheme"
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidUserInfo
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "invalid user info"
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       MissingHost
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "missing host"
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidAuthInfo
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "invalid authentication info"
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidServerAddr
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "invalid server address"
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidQueryString
              =>
              expression
               macroInvocation
                simplePath
                 simplePathSegment
                  identifier
                   write
                !
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     f
                  tokenTreeToken
                   macroPunctuationToken
                    ,
                  tokenTreeToken
                   macroLiteralToken
                    literalExpression
                     "invalid query string"
                 )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         error
      ::
      typePathSegment
       pathIdentSegment
        identifier
         Error
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             UrlParseError
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        source
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Option
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  referenceType
                   &
                   typeNoBounds
                    parenthesizedType
                     (
                     type_
                      traitObjectType
                       dyn
                       typeParamBounds
                        typeParamBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              error
                           ::
                           typePathSegment
                            pathIdentSegment
                             identifier
                              Error
                        +
                        typeParamBound
                         lifetime
                          'static
                     )
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ParseError
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         err
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Some
                (
                callParams
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        err
                  as
                  typeNoBounds
                   referenceType
                    &
                    typeNoBounds
                     traitObjectTypeOneBound
                      dyn
                      traitBound
                       typePath
                        typePathSegment
                         pathIdentSegment
                          identifier
                           error
                        ::
                        typePathSegment
                         pathIdentSegment
                          identifier
                           Error
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidScheme
              =>
              matchArmExpression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     None
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidUserInfo
              =>
              matchArmExpression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     None
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       MissingHost
              =>
              matchArmExpression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     None
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidAuthInfo
              =>
              matchArmExpression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     None
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidServerAddr
              =>
              matchArmExpression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     None
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  pathPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UrlParseError
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       InvalidQueryString
              =>
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    None
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         FromStr
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerConfig
     {
     associatedItem
      typeAlias
       type
       identifier
        Err
       =
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               UrlParseError
       ;
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from_str
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               s
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ServerConfig
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       Self
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Err
               >
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerConfig
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                from_url
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 s
          )
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Clone
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          PartialEq
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Eq
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          PartialOrd
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Ord
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Hash
      )
   ]
  visItem
   visibility
    pub
   enumeration
    enum
    identifier
     ServerAddr
    {
    enumItems
     enumItem
      identifier
       SocketAddr
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 SocketAddr
       )
     ,
     enumItem
      identifier
       DomainName
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 String
        ,
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 u16
       )
     ,
    }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        host
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                String
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         s
                   )
              =>
              matchArmExpression
               expression
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       s
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ip
                 (
                 )
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   to_string
                (
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         dm
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       wildcardPattern
                        _
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     dm
               .
               pathExprSegment
                pathIdentSegment
                 identifier
                  clone
               (
               )
              ,
             }
        }
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        port
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                u16
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         s
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      s
                .
                pathExprSegment
                 pathIdentSegment
                  identifier
                   port
                (
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       wildcardPattern
                        _
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         p
                   )
              =>
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    p
              ,
             }
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
      )
   ]
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      ServerAddrError
     ;
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         FromStr
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      typeAlias
       type
       identifier
        Err
       =
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ServerAddrError
       ;
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from_str
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               s
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ServerAddr
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ServerAddrError
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    s
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 parse
               ::
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         SocketAddr
                >
              (
              )
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Ok
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         addr
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Ok
                (
                callParams
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        ServerAddr
                     ::
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        SocketAddr
                  (
                  callParams
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         addr
                  )
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Err
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       restPattern
                        ..
                   )
              =>
              expression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   letStatement
                    let
                    patternNoTopAlt
                     patternWithoutRange
                      identifierPattern
                       mut
                       identifier
                        sp
                    =
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           s
                     .
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        split
                     (
                     callParams
                      expression
                       literalExpression
                        ':'
                     )
                    ;
                  statement
                   expressionStatement
                    expressionWithBlock
                     matchExpression
                      match
                      expression
                       (
                       tupleElements
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               sp
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            next
                         (
                         )
                        ,
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               sp
                         .
                         pathExprSegment
                          pathIdentSegment
                           identifier
                            next
                         (
                         )
                       )
                      {
                      matchArms
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tuplePattern
                            (
                            tuplePatternItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                tupleStructPattern
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Some
                                 (
                                 tupleStructItems
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     identifierPattern
                                      identifier
                                       dn
                                 )
                             ,
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                tupleStructPattern
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Some
                                 (
                                 tupleStructItems
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     identifierPattern
                                      identifier
                                       port
                                 )
                            )
                       =>
                       matchArmExpression
                        expressionWithBlock
                         blockExpression
                          {
                          statements
                           statement
                            expressionStatement
                             expressionWithBlock
                              ifExpression
                               if
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      dn
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   is_empty
                                (
                                )
                               blockExpression
                                {
                                statements
                                 statement
                                  expressionStatement
                                   expression
                                    return
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           Err
                                     (
                                     callParams
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            ServerAddrError
                                     )
                                   ;
                                }
                           statement
                            expressionStatement
                             expressionWithBlock
                              matchExpression
                               match
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      port
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   parse
                                 ::
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           u16
                                  >
                                (
                                )
                               {
                               matchArms
                                matchArm
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tupleStructPattern
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Ok
                                     (
                                     tupleStructItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           port
                                     )
                                =>
                                matchArmExpression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        Ok
                                  (
                                  callParams
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          ServerAddr
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          DomainName
                                    (
                                    callParams
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            dn
                                      .
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         to_owned
                                      (
                                      )
                                     ,
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           port
                                    )
                                  )
                                 ,
                                matchArm
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tupleStructPattern
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Err
                                     (
                                     tupleStructItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         restPattern
                                          ..
                                     )
                                =>
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Err
                                 (
                                 callParams
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        ServerAddrError
                                 )
                                ,
                               }
                          }
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           wildcardPattern
                            _
                       =>
                       expression
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              Err
                        (
                        callParams
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               ServerAddrError
                        )
                       ,
                      }
                 }
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         Display
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        fmt
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               f
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    fmt
                 ::
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Formatter
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                fmt
             ::
             typePathSegment
              pathIdentSegment
               identifier
                Result
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         a
                   )
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "{}"
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      a
                  )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         d
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              expression
               macroInvocation
                simplePath
                 simplePathSegment
                  identifier
                   write
                !
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     f
                  tokenTreeToken
                   macroPunctuationToken
                    ,
                  tokenTreeToken
                   macroLiteralToken
                    literalExpression
                     "{}:{}"
                  tokenTreeToken
                   macroPunctuationToken
                    ,
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     d
                  tokenTreeToken
                   macroPunctuationToken
                    ,
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     port
                 )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 SocketAddr
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  SocketAddr
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ServerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                SocketAddr
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 addr
          )
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         I
        :
        typeParamBounds
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Into
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       String
              >
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           tupleType
            (
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    I
            ,
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    u16
            )
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dname
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    port
              )
          :
          type_
           typeNoBounds
            tupleType
             (
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     I
             ,
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     u16
             )
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ServerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ServerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                DomainName
          (
          callParams
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  dname
            .
            pathExprSegment
             pathIdentSegment
              identifier
               into
            (
            )
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 port
          )
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Address
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Address
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ServerAddr
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   addr
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Address
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddress
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         sa
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      ServerAddr
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      SocketAddr
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sa
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Address
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainNameAddress
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         dn
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     ServerAddr
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     DomainName
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      dn
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      port
               )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           referenceType
            &
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Address
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ServerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Address
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ServerAddr
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    addr
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Address
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddress
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         sa
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      ServerAddr
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      SocketAddr
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sa
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Address
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainNameAddress
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         dn
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     ServerAddr
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     DomainName
               (
               callParams
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       dn
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    clone
                 (
                 )
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      port
               )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 ServerAddr
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             Address
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ServerAddr
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Address
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   addr
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         sa
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Address
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      SocketAddress
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sa
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         dn
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Address
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     DomainNameAddress
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      dn
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      port
               )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           referenceType
            &
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   ServerAddr
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             Address
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    ServerAddr
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Address
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    addr
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         sa
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Address
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      SocketAddress
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       sa
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ServerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         dn
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Address
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     DomainNameAddress
               (
               callParams
                expression
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       dn
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    clone
                 (
                 )
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      port
               )
              ,
             }
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Clone
      )
   ]
  visItem
   visibility
    pub
   enumeration
    enum
    identifier
     ManagerAddr
    {
    enumItems
     enumItem
      identifier
       SocketAddr
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 SocketAddr
       )
     ,
     enumItem
      identifier
       DomainName
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 String
        ,
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 u16
       )
     ,
     enumItem
      outerAttribute
       #
       [
       attr
        simplePath
         simplePathSegment
          identifier
           cfg
        attrInput
         delimTokenTree
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              unix
          )
       ]
      identifier
       UnixSocketAddr
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 PathBuf
       )
     ,
    }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       derive
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          Debug
      )
   ]
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      ManagerAddrError
     ;
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         FromStr
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      typeAlias
       type
       identifier
        Err
       =
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ManagerAddrError
       ;
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from_str
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               s
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    str
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Result
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ManagerAddr
                ,
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        ManagerAddrError
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    s
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 find
              (
              callParams
               expression
                literalExpression
                 ':'
              )
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       Some
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         pos
                   )
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  statement
                   expressionStatement
                    expressionWithBlock
                     matchExpression
                      match
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             s
                       .
                       pathExprSegment
                        pathIdentSegment
                         identifier
                          parse
                        ::
                        genericArgs
                         <
                         genericArgsTypes
                          type_
                           typeNoBounds
                            traitObjectTypeOneBound
                             traitBound
                              typePath
                               typePathSegment
                                pathIdentSegment
                                 identifier
                                  SocketAddr
                         >
                       (
                       )
                      {
                      matchArms
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tupleStructPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Ok
                            (
                            tupleStructItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                identifierPattern
                                 identifier
                                  saddr
                            )
                       =>
                       matchArmExpression
                        expression
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               Ok
                         (
                         callParams
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 ManagerAddr
                              ::
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 SocketAddr
                           (
                           callParams
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  saddr
                           )
                         )
                        ,
                       matchArm
                        pattern
                         patternNoTopAlt
                          patternWithoutRange
                           tupleStructPattern
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Err
                            (
                            tupleStructItems
                             pattern
                              patternNoTopAlt
                               patternWithoutRange
                                restPattern
                                 ..
                            )
                       =>
                       expression
                        expressionWithBlock
                         blockExpression
                          {
                          statements
                           statement
                            letStatement
                             let
                             patternNoTopAlt
                              patternWithoutRange
                               tuplePattern
                                (
                                tuplePatternItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      sdomain
                                 ,
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      sport
                                )
                             =
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    s
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 split_at
                              (
                              callParams
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     pos
                              )
                             ;
                           statement
                            letStatement
                             let
                             patternNoTopAlt
                              patternWithoutRange
                               tuplePattern
                                (
                                tuplePatternItems
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      sdomain
                                 ,
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    identifierPattern
                                     identifier
                                      sport
                                )
                             =
                             expression
                              (
                              tupleElements
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      sdomain
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   trim
                                (
                                )
                               ,
                               expression
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       sport
                                 [
                                 expression
                                  expression
                                   literalExpression
                                    1
                                  ..
                                 ]
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   trim
                                (
                                )
                              )
                             ;
                           statement
                            expressionStatement
                             expressionWithBlock
                              matchExpression
                               match
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      sport
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   parse
                                 ::
                                 genericArgs
                                  <
                                  genericArgsTypes
                                   type_
                                    typeNoBounds
                                     traitObjectTypeOneBound
                                      traitBound
                                       typePath
                                        typePathSegment
                                         pathIdentSegment
                                          identifier
                                           u16
                                  >
                                (
                                )
                               {
                               matchArms
                                matchArm
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tupleStructPattern
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Ok
                                     (
                                     tupleStructItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         identifierPattern
                                          identifier
                                           port
                                     )
                                =>
                                matchArmExpression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        Ok
                                  (
                                  callParams
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          ManagerAddr
                                       ::
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          DomainName
                                    (
                                    callParams
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            sdomain
                                      .
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         to_owned
                                      (
                                      )
                                     ,
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           port
                                    )
                                  )
                                 ,
                                matchArm
                                 pattern
                                  patternNoTopAlt
                                   patternWithoutRange
                                    tupleStructPattern
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Err
                                     (
                                     tupleStructItems
                                      pattern
                                       patternNoTopAlt
                                        patternWithoutRange
                                         restPattern
                                          ..
                                     )
                                =>
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Err
                                 (
                                 callParams
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        ManagerAddrError
                                 )
                                ,
                               }
                          }
                      }
                 }
              matchArm
               outerAttribute
                #
                [
                attr
                 simplePath
                  simplePathSegment
                   identifier
                    cfg
                 attrInput
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       unix
                   )
                ]
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    None
              =>
              matchArmExpression
               expressionWithBlock
                blockExpression
                 {
                 statements
                  expression
                   expression
                    pathExpression
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         Ok
                   (
                   callParams
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           ManagerAddr
                        ::
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           UnixSocketAddr
                     (
                     callParams
                      expression
                       expression
                        pathExpression
                         pathInExpression
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             PathBuf
                          ::
                          pathExprSegment
                           pathIdentSegment
                            identifier
                             from
                       (
                       callParams
                        expression
                         pathExpression
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              s
                       )
                     )
                   )
                 }
              matchArm
               outerAttribute
                #
                [
                attr
                 simplePath
                  simplePathSegment
                   identifier
                    cfg
                 attrInput
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       not
                   tokenTree
                    delimTokenTree
                     (
                     tokenTree
                      tokenTreeToken
                       macroIdentifierLikeToken
                        identifier
                         unix
                     )
                   )
                ]
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    None
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Err
               (
               callParams
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      ManagerAddrError
               )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         Display
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        fmt
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               f
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    fmt
                 ::
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Formatter
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                fmt
             ::
             typePathSegment
              pathIdentSegment
               identifier
                Result
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            matchExpression
             match
             expression
              *
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
             {
             matchArms
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ManagerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       SocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         saddr
                   )
              =>
              matchArmExpression
               expression
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      fmt
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      Display
                   ::
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      fmt
                (
                callParams
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       saddr
                 ,
                 expression
                  pathExpression
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       f
                )
               ,
              matchArm
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ManagerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       DomainName
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         dname
                    ,
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        identifier
                         port
                   )
              =>
              matchArmExpression
               expression
                macroInvocation
                 simplePath
                  simplePathSegment
                   identifier
                    write
                 !
                 delimTokenTree
                  (
                  tokenTree
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      f
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroLiteralToken
                     literalExpression
                      "{}:{}"
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      dname
                   tokenTreeToken
                    macroPunctuationToken
                     ,
                   tokenTreeToken
                    macroIdentifierLikeToken
                     identifier
                      port
                  )
               ,
              matchArm
               outerAttribute
                #
                [
                attr
                 simplePath
                  simplePathSegment
                   identifier
                    cfg
                 attrInput
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       unix
                   )
                ]
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  tupleStructPattern
                   pathInExpression
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       ManagerAddr
                    ::
                    pathExprSegment
                     pathIdentSegment
                      identifier
                       UnixSocketAddr
                   (
                   tupleStructItems
                    pattern
                     patternNoTopAlt
                      patternWithoutRange
                       identifierPattern
                        ref
                        identifier
                         path
                   )
              =>
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     fmt
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Display
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     fmt
               (
               callParams
                expression
                 &
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        path
                  .
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     display
                  (
                  )
                ,
                expression
                 pathExpression
                  pathInExpression
                   pathExprSegment
                    pathIdentSegment
                     identifier
                      f
               )
              ,
             }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 SocketAddr
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               addr
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  SocketAddr
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ManagerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ManagerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                SocketAddr
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 addr
          )
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       lifetimeParam
        'a
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           tupleType
            (
            type_
             typeNoBounds
              referenceType
               &
               lifetime
                'a
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      str
            ,
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    u16
            )
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dname
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    port
              )
          :
          type_
           typeNoBounds
            tupleType
             (
             type_
              typeNoBounds
               referenceType
                &
                lifetime
                 'a
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       str
             ,
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     u16
             )
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ManagerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ManagerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                DomainName
          (
          callParams
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  dname
            .
            pathExprSegment
             pathIdentSegment
              identifier
               to_owned
            (
            )
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 port
          )
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           tupleType
            (
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    String
            ,
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    u16
            )
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             tuplePattern
              (
              tuplePatternItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    dname
               ,
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    port
              )
          :
          type_
           typeNoBounds
            tupleType
             (
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     String
             ,
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     u16
             )
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ManagerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ManagerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                DomainName
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 dname
           ,
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 port
          )
        }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          unix
      )
   ]
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         From
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 PathBuf
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             ManagerAddr
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        from
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               p
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  PathBuf
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                ManagerAddr
       blockExpression
        {
        statements
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                ManagerAddr
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                UnixSocketAddr
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 p
          )
        }
     }
 <EOF>
