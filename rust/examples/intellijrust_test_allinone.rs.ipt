crate
 innerAttribute
  #
  !
  [
  attr
   simplePath
    simplePathSegment
     identifier
      crate_type
   attrInput
    =
    literalExpression
     "lib"
  ]
 innerAttribute
  #
  !
  [
  attr
   simplePath
    simplePathSegment
     identifier
      crate_name
   attrInput
    =
    literalExpression
     "rary"
  ]
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     innerAttribute
      #
      !
      [
      attr
       simplePath
        simplePathSegment
         identifier
          crate_type
       attrInput
        =
        literalExpression
         "lib"
      ]
     statements
      statement
       expressionStatement
        expression
         &&
         expression
          &
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
        ;
      statement
       expressionStatement
        expression
         expression
          &
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                a
         &
         expression
          &
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                b
        ;
      expression
       expression
        expression
         literalExpression
          false
        comparisonOperator
         ==
        expression
         literalExpression
          false
       &&
       expression
        literalExpression
         true
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main1
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             foo
         ]
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             bar
         ]
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
        =
        expression
         literalExpression
          1
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
        =
        expression
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              foo
          ]
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              bar
          ]
         expression
          literalExpression
           1
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              a
          ]
         expression
          -
          expression
           outerAttribute
            #
            [
            attr
             simplePath
              simplePathSegment
               identifier
                b
            ]
           expression
            -
            expression
             literalExpression
              1
        ;
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              foo
          ]
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              bar
          ]
         expressionWithBlock
          blockExpression
           {
           }
     }
 item
  visItem
   function_
    functionQualifiers
     async
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
     async
    fn
    identifier
     bar
    (
    )
    blockExpression
     {
     }
 item
  visItem
   trait_
    trait
    identifier
     T
    {
    associatedItem
     function_
      functionQualifiers
       async
      fn
      identifier
       foo
      (
      )
      ;
    associatedItem
     function_
      functionQualifiers
       async
      fn
      identifier
       bar
      (
      )
      ;
    }
 item
  visItem
   enumeration
    enum
    identifier
     E
    {
    enumItems
     enumItem
      outerAttribute
       #
       [
       attr
        simplePath
         simplePathSegment
          identifier
           cfg
        attrInput
         delimTokenTree
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              test
          )
       ]
      identifier
       F
      enumItemTuple
       (
       tupleFields
        tupleField
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 test
             )
          ]
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 i32
       )
    }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       empty_attr
    attrInput
     delimTokenTree
      (
      )
   ]
  visItem
   constantItem
    const
    identifier
     T
    :
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            i32
    =
    expression
     literalExpression
      92
    ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     attrs_on_statements
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             cfg
          attrInput
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                test
            )
         ]
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
        =
        expression
         literalExpression
          92
        ;
      statement
       expressionStatement
        expressionWithBlock
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              cfg
           attrInput
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 test
             )
          ]
         expressionWithBlock
          loopExpression
           infiniteLoopExpression
            loop
            blockExpression
             {
             }
      statement
       expressionStatement
        expression
         expression
          outerAttribute
           #
           [
           attr
            simplePath
             simplePathSegment
              identifier
               cfg
            attrInput
             delimTokenTree
              (
              tokenTree
               tokenTreeToken
                macroIdentifierLikeToken
                 identifier
                  test
              )
           ]
          expression
           literalExpression
            1
         +
         expression
          literalExpression
           1
        ;
      statement
       expressionStatement
        expression
         structExpression
          structExprStruct
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
           {
           structExprFields
            structExprField
             outerAttribute
              #
              [
              attr
               simplePath
                simplePathSegment
                 identifier
                  foo
              ]
             identifier
              foo
             :
             expression
              literalExpression
               92
           }
        ;
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     genericParams
      <
      genericParam
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       lifetimeParam
        'a
      ,
      genericParam
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            may_dangle
        ]
       typeParam
        identifier
         T
      >
     {
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     give_me_struct
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            #
         tokenTree
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               allow
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 non_camel_case_types
             )
           ]
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             struct
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             name
          tokenTreeToken
           macroPunctuationToken
            ;
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          not
      tokenTree
       delimTokenTree
        (
        tokenTree
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            test
        )
      )
   ]
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       give_me_struct
    !
    {
    tokenTree
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        hello_world
    }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       post
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroLiteralToken
         literalExpression
          "/"
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          data
       tokenTreeToken
        macroPunctuationToken
         =
       tokenTreeToken
        macroLiteralToken
         literalExpression
          "<todo_form>"
      )
   ]
  visItem
   function_
    functionQualifiers
    fn
    identifier
     string_value
    (
    )
    blockExpression
     {
     }
 item
  visItem
   constantItem
    const
    identifier
     C
    :
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            i32
    =
    expression
     literalExpression
      0
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          attr
      tokenTree
       delimTokenTree
        (
        tokenTree
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            value
         tokenTreeToken
          macroPunctuationToken
           =
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            C
        )
      )
   ]
  visItem
   function_
    functionQualifiers
    fn
    identifier
     const_value
    (
    )
    blockExpression
     {
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       py
     ::
     simplePathSegment
      identifier
       class
   ]
  visItem
   function_
    functionQualifiers
    fn
    identifier
     path
    (
    )
    blockExpression
     {
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg_attr
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          test
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          assert_instr
      tokenTree
       delimTokenTree
        (
        tokenTree
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            add_a
         tokenTreeToken
          macroPunctuationToken
           .
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            b
        )
      )
   ]
  visItem
   function_
    functionQualifiers
    fn
    identifier
     custom_name
    (
    )
    blockExpression
     {
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       attr
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          foo
       tokenTreeToken
        macroPunctuationToken
         ::
      tokenTree
       delimTokenTree
        {
        tokenTree
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            bar
         tokenTreeToken
          macroPunctuationToken
           ,
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            baz
        }
      tokenTree
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          qwe
      )
   ]
  visItem
   function_
    functionQualifiers
    fn
    identifier
     arbitrary_token_tree
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     f1
    (
    functionParameters
     functionParam
      outerAttribute
       #
       [
       attr
        simplePath
         simplePathSegment
          identifier
           attr1
       ]
      outerAttribute
       #
       [
       attr
        simplePath
         simplePathSegment
          identifier
           attr2
       ]
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            pat
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               S
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     f2
    (
    functionParameters
     functionParam
      outerAttribute
       #
       [
       attr
        simplePath
         simplePathSegment
          identifier
           attr
       ]
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               S
    )
    blockExpression
     {
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             S
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f3
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         shorthandSelf
          self
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f4
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         shorthandSelf
          &
          self
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f5
       genericParams
        <
        genericParam
         lifetimeParam
          'a
        >
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         shorthandSelf
          &
          mut
          self
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f6
       genericParams
        <
        genericParam
         lifetimeParam
          'a
        >
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         shorthandSelf
          &
          lifetime
           'a
          self
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f7
       genericParams
        <
        genericParam
         lifetimeParam
          'a
        >
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         shorthandSelf
          &
          lifetime
           'a
          mut
          self
        ,
        functionParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               x
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               y
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f8
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         typedSelf
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 Self
       )
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        f9
       (
       functionParameters
        selfParam
         outerAttribute
          #
          [
          attr
           simplePath
            simplePathSegment
             identifier
              attr
          ]
         typedSelf
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  S
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         Self
                 >
       )
       blockExpression
        {
        }
     }
 item
  visItem
   trait_
    trait
    identifier
     T
    {
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       f10
      (
      functionParameters
       functionParam
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             attr
         ]
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                S
      )
      ;
    }
 item
  visItem
   externBlock
    extern
    abi
     "C"
    {
    externalItem
     function_
      functionQualifiers
      fn
      identifier
       f11
      (
      functionParameters
       functionParam
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             attr
         ]
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              x
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 S
       ,
       functionParam
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             attr
         ]
        ...
      )
      ;
    }
 item
  visItem
   visibility
    pub
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               String
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              literalExpression
               1
            }
         *
         expression
          literalExpression
           2
        ;
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              literalExpression
               1
            }
         &
         expression
          literalExpression
           2
        ;
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           loopExpression
            infiniteLoopExpression
             loop
             blockExpression
              {
              }
         *
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
        ;
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           loopExpression
            predicateLoopExpression
             while
             expression
              literalExpression
               true
             blockExpression
              {
              }
         &
         expression
          literalExpression
           1
        ;
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          infiniteLoopExpression
           loop
           blockExpression
            {
            }
      statement
       expressionStatement
        expression
         &
         mut
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            foo
        =
        expression
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   foo
            }
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              literalExpression
               1
            }
         *
         expression
          literalExpression
           2
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              literalExpression
               1
            }
         &
         expression
          literalExpression
           2
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expressionWithBlock
           loopExpression
            infiniteLoopExpression
             loop
             blockExpression
              {
              }
         *
         expression
          literalExpression
           1
        ;
      statement
       expressionStatement
        expression
         expression
          literalExpression
           2
         &
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              literalExpression
               1
            }
        ;
      statement
       item
        visItem
         function_
          functionQualifiers
          fn
          identifier
           bar
          (
          )
          blockExpression
           {
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   bar
            }
         (
         )
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main3
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            simple_block
        =
        expression
         expressionWithBlock
          blockExpression
           {
           statements
            expression
             literalExpression
              123
           }
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     documented_function
    (
    )
    blockExpression
     {
     statements
      statement
       item
        visItem
         function_
          functionQualifiers
          fn
          identifier
           foo
          (
          )
          blockExpression
           {
           }
     }
 item
  visItem
   module
    mod
    identifier
     m
    {
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        undocumented_function
       (
       )
       blockExpression
        {
        }
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        documented_function
       (
       )
       blockExpression
        {
        }
    }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          test
      )
   ]
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     {
     structFields
      structField
       identifier
        field
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
     }
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      T
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     )
     ;
 item
  visItem
   enumeration
    enum
    identifier
     E
    {
    enumItems
     enumItem
      identifier
       Foo
     ,
    }
 item
  visItem
   enumeration
    enum
    identifier
     ES
    {
    enumItems
     enumItem
      identifier
       Foo
      enumItemStruct
       {
       structFields
        structField
         identifier
          field
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
       }
     ,
    }
 item
  visItem
   externBlock
    extern
    {
    externalItem
     function_
      functionQualifiers
      fn
      identifier
       foo
      (
      )
      ;
    externalItem
     staticItem
      static
      identifier
       errno
      :
      type_
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              i32
      ;
    }
 item
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     makro
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         }
      ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     blanks
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     bar
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main4
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            literalExpression
             1
           comparisonOperator
            <
           expression
            literalExpression
             2
          blockExpression
           {
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    x
              )
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                o
          blockExpression
           {
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           |
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Err
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    e
              )
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                r
          blockExpression
           {
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  V1
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    s
              )
           |
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  V2
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    s
              )
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                value
          blockExpression
           {
           }
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           |
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Cat
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    name
              )
           |
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Dog
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    name
              )
           |
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Parrot
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    name
              )
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                animal
          blockExpression
           {
           }
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          predicateLoopExpression
           while
           expression
            expression
             literalExpression
              1
            comparisonOperator
             <
            expression
             literalExpression
              2
           blockExpression
            {
            }
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          predicatePatternLoopExpression
           while
           let
           pattern
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     x
               )
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 o
           blockExpression
            {
            }
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          predicatePatternLoopExpression
           while
           let
           pattern
            |
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Err
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     e
               )
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 r
           blockExpression
            {
            }
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          predicatePatternLoopExpression
           while
           let
           pattern
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   V1
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     s
               )
            |
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   V2
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     s
               )
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 value
           blockExpression
            {
            }
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          predicatePatternLoopExpression
           while
           let
           pattern
            |
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Cat
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     name
               )
            |
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Dog
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     name
               )
            |
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Parrot
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   identifierPattern
                    identifier
                     name
               )
           =
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 animal
           blockExpression
            {
            }
     }
 item
  visItem
   constantItem
    const
    identifier
     FOO
    :
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            i32
    =
    expression
     literalExpression
      42
    ;
 item
  visItem
   constantItem
    const
    _
    :
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            i32
    =
    expression
     literalExpression
      123
    ;
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     genericParams
      <
      >
     ;
 item
  visItem
   trait_
    trait
    identifier
     T
    genericParams
     <
     >
    {
    }
 item
  visItem
   enumeration
    enum
    identifier
     E
    genericParams
     <
     >
    {
    enumItems
     enumItem
      identifier
       V
    }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         T
       genericArgs
        <
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             S
           genericArgs
            <
            >
     {
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         T
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             E
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    genericParams
     <
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     bar
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              S
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              S
            ::
            genericArgs
             <
             >
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              E
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              V
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              E
            ::
            genericArgs
             <
             >
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              V
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               foo
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               foo
             ::
             genericArgs
              <
              >
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               bar
             ::
             genericArgs
              <
              >
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                i32
              genericArgs
               <
               >
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    )
    whereClause
     where
     whereClauseItem
      typeBoundWhereClauseItem
       forLifetimes
        for
        genericParams
         <
         >
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           forLifetimes
            for
            genericParams
             <
             >
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               T
       :
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              T
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     f
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             i32
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     test
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             u32
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              y
        ;
      statement
       expressionStatement
        expression
         pathExpression
          pathInExpression
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              x
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              y
        ;
      statement
       expressionStatement
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             self
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              x
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              y
        ;
      statement
       expressionStatement
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          +
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                y
         -
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                z
          *
          expression
           literalExpression
            0
        ;
      statement
       expressionStatement
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                y
         =
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               z
        ;
      statement
       expressionStatement
        expression
         *
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
        ;
      statement
       expressionStatement
        expression
         &
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
        ;
      statement
       expressionStatement
        expression
         &
         mut
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
        ;
      statement
       expressionStatement
        expression
         expression
          (
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 x
           +
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 y
          )
         *
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               z
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               t
         =
         expression
          (
          tupleElements
           expression
            literalExpression
             0
           ,
           expression
            literalExpression
             1
           ,
           expression
            literalExpression
             2
          )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               t
         .
         identifier
          a
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               t
         .
         tupleIndex
          0
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               f
         .
         pathExprSegment
          pathIdentSegment
           identifier
            m
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               f
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           qualifiedPathInExpression
            qualifiedPathType
             <
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
             as
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Foo
             >
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               U
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               generic_method
             ::
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       f64
              >
         (
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
             ::
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       isize
              >
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               foo
             ::
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       usize
              >
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            xs
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Box
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  sliceType
                   [
                   type_
                    typeNoBounds
                     tupleType
                      (
                      )
                   ]
               >
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               Box
             ::
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 arrayType
                  [
                  type_
                   typeNoBounds
                    tupleType
                     (
                     )
                  ;
                  expression
                   literalExpression
                    0
                  ]
              >
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               new
         (
         callParams
          expression
           [
           ]
         )
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               t
         =
         expression
          (
          )
        ;
      statement
       expressionStatement
        expression
         [
         arrayElements
          expression
           literalExpression
            0
          ,
          expression
           literalExpression
            1
          ,
          expression
           literalExpression
            2
          ,
          expression
           [
           arrayElements
            expression
             literalExpression
              0
            ;
            expression
             literalExpression
              1
           ]
         ]
        ;
      statement
       expressionStatement
        expression
         [
         ]
        ;
      statement
       expressionStatement
        expression
         [
         arrayElements
          expression
           literalExpression
            1
          ,
         ]
        ;
      statement
       expressionStatement
        expression
         [
         arrayElements
          expression
           literalExpression
            1
          ;
          expression
           literalExpression
            2
         ]
        ;
      statement
       expressionStatement
        expression
         closureExpression
          ||
          expression
           expressionWithBlock
            blockExpression
             {
             }
        ;
      statement
       expressionStatement
        expression
         closureExpression
          |
          closureParameters
           closureParam
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
          |
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
        ;
      statement
       expressionStatement
        expression
         closureExpression
          |
          closureParameters
           closureParam
            pattern
             patternNoTopAlt
              patternWithoutRange
               referencePattern
                &
                patternWithoutRange
                 identifierPattern
                  identifier
                   x
          |
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
        ;
      statement
       expressionStatement
        expression
         closureExpression
          move
          |
          closureParameters
           closureParam
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
            :
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    i32
          |
          expression
           expressionWithBlock
            blockExpression
             {
             statements
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    x
             }
        ;
      statement
       expressionStatement
        expression
         closureExpression
          |
          closureParameters
           closureParam
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
            :
            type_
             typeNoBounds
              referenceType
               &
               mut
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      i32
          |
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 x
           =
           expression
            literalExpression
             92
        ;
      statement
       expressionStatement
        expressionWithBlock
         blockExpression
          {
          }
      statement
       expressionStatement
        expressionWithBlock
         unsafeBlockExpression
          unsafe
          blockExpression
           {
           statements
            expression
             literalExpression
              92
           }
      statement
       expressionStatement
        expressionWithBlock
         blockExpression
          {
          statements
           expression
            expression
             expressionWithBlock
              blockExpression
               {
               statements
                expression
                 literalExpression
                  92
               }
            .
            pathExprSegment
             pathIdentSegment
              identifier
               to_string
            (
            )
          }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expression
           literalExpression
            1
          as
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 i32
         comparisonOperator
          <=
         expression
          literalExpression
           1
        ;
      statement
       item
        visItem
         constantItem
          const
          identifier
           TEN
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  u32
          =
          expression
           literalExpression
            10
          ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          expression
           literalExpression
            1
          as
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 u32
         +
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               TEN
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          literalExpression
           1
         as
         typeNoBounds
          parenthesizedType
           (
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   i32
           )
        ;
      expression
       return
       expression
        expression
         (
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          =
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                y
         )
        +
        expression
         literalExpression
          1
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       link
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          name
       tokenTreeToken
        macroPunctuationToken
         =
       tokenTreeToken
        macroLiteralToken
         literalExpression
          "objc"
      )
   ]
  visItem
   externBlock
    extern
    {
    externalItem
     function_
      functionQualifiers
      fn
      identifier
       foo
      (
      functionParameters
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              name
         :
         type_
          typeNoBounds
           rawPointerType
            *
            const
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   libc
                ::
                typePathSegment
                 pathIdentSegment
                  identifier
                   c_uchar
      )
      ;
    externalItem
     function_
      functionQualifiers
      fn
      identifier
       bar
      (
      functionParameters
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              a
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 i32
       ,
       functionParam
        ...
      )
      functionReturnType
       ->
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
      ;
    externalItem
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          cfg
       attrInput
        delimTokenTree
         (
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             test
         )
      ]
     visibility
      pub
     function_
      functionQualifiers
      fn
      identifier
       baz
      (
      functionParameters
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              b
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 i64
       ,
      )
      ;
    externalItem
     outerAttribute
      #
      [
      attr
       simplePath
        simplePathSegment
         identifier
          doc
       attrInput
        =
        literalExpression
         "Hello"
      ]
     visibility
      pub
     staticItem
      static
      identifier
       X
      :
      type_
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              i32
      ;
    }
 item
  visItem
   externCrate
    extern
    crate
    crateRef
     identifier
      foo
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_use
   ]
  visItem
   externCrate
    extern
    crate
    crateRef
     identifier
      bar
    ;
 item
  visItem
   externCrate
    extern
    crate
    crateRef
     identifier
      spam
    asClause
     as
     identifier
      eggs
    ;
 item
  visItem
   externCrate
    extern
    crate
    crateRef
     self
    ;
 item
  visItem
   externCrate
    extern
    crate
    crateRef
     self
    asClause
     as
     identifier
      foo
    ;
 item
  visItem
   function_
    functionQualifiers
     extern
    fn
    identifier
     baz
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
     unsafe
     extern
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
     unsafe
     extern
     abi
      "C"
    fn
    identifier
     bar
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     add
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            y
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             i32
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         return
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          +
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                y
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     mul
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     ,
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            y
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             i32
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               x
         *
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               y
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     id
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     ,
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             i32
    blockExpression
     {
     statements
      expression
       pathExpression
        pathInExpression
         pathExprSegment
          pathIdentSegment
           identifier
            x
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     constant
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             i32
    blockExpression
     {
     statements
      expression
       literalExpression
        92
     }
 item
  visItem
   function_
    functionQualifiers
     const
    fn
    identifier
     a
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       tupleType
        (
        )
    blockExpression
     {
     statements
      expression
       (
       )
     }
 item
  visItem
   function_
    functionQualifiers
     const
     unsafe
    fn
    identifier
     b
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       tupleType
        (
        )
    blockExpression
     {
     statements
      expression
       (
       )
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     diverging
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       neverType
        !
    blockExpression
     {
     statements
      expression
       expression
        pathExpression
         pathInExpression
          pathExprSegment
           pathIdentSegment
            identifier
             panic
       (
       callParams
        expression
         literalExpression
          "! is a type"
       )
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     ;
 item
  visItem
   trait_
    trait
    identifier
     A
    {
    associatedItem
     typeAlias
      type
      identifier
       B
      ;
    }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         A
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             S
     {
     associatedItem
      typeAlias
       type
       identifier
        B
       =
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               S
       ;
     }
 item
  visItem
   trait_
    trait
    identifier
     T
    {
    }
 item
  visItem
   trait_
    trait
    identifier
     P
    genericParams
     <
     genericParam
      typeParam
       identifier
        X
     >
    {
    }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             T
     {
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       parenthesizedType
        (
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                T
        )
     {
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         T
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             S
     {
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         U
      >
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             P
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     U
            >
     {
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         U
      >
     type_
      typeNoBounds
       parenthesizedType
        (
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                P
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        U
               >
        )
     {
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         U
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         P
       genericArgs
        <
        genericArgsTypes
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 U
        >
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             S
     {
     }
 item
  visItem
   implementation
    traitImpl
     impl
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         T
     for
     type_
      typeNoBounds
       qualifiedPathInType
        qualifiedPathType
         <
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 S
         as
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             A
         >
        ::
        typePathSegment
         pathIdentSegment
          identifier
           B
     {
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     type_
      typeNoBounds
       parenthesizedType
        (
        type_
         typeNoBounds
          qualifiedPathInType
           qualifiedPathType
            <
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    S
            as
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                A
            >
           ::
           typePathSegment
            pathIdentSegment
             identifier
              B
        )
     {
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       lifetimeParam
        'a
      ,
      genericParam
       typeParam
        identifier
         T
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         Iterator
     for
     type_
      traitObjectType
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Iter
            genericArgs
             <
             genericArgsLifetimes
              lifetime
               'a
             ,
             genericArgsTypes
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      T
             >
        +
        typeParamBound
         lifetime
          'a
     {
     associatedItem
      typeAlias
       type
       identifier
        Item
       =
       type_
        typeNoBounds
         referenceType
          &
          lifetime
           'a
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 T
       ;
     associatedItem
      macroInvocationSemi
       simplePath
        simplePathSegment
         identifier
          foo
       !
       (
       )
       ;
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
      >
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             GenVal
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
            >
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        value
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          self
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  T
       blockExpression
        {
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        foo
       genericParams
        <
        genericParam
         typeParam
          identifier
           A
        ,
        genericParam
         typeParam
          identifier
           B
        >
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               a
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               b
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          referenceType
           &
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  A
       blockExpression
        {
        }
     }
 item
  visItem
   module
    mod
    identifier
     m
    {
    innerAttribute
     #
     !
     [
     attr
      simplePath
       simplePathSegment
        identifier
         cfg
      attrInput
       delimTokenTree
        (
        tokenTree
         tokenTreeToken
          macroIdentifierLikeToken
           identifier
            test
        )
     ]
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expressionWithBlock
         blockExpression
          {
          }
      statement
       expressionStatement
        expressionWithBlock
         blockExpression
          {
          }
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          loopLabel
           'label
           :
          predicatePatternLoopExpression
           while
           let
           pattern
            patternNoTopAlt
             patternWithoutRange
              tupleStructPattern
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   Some
               (
               tupleStructItems
                pattern
                 patternNoTopAlt
                  patternWithoutRange
                   wildcardPattern
                    _
               )
           =
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
            (
            callParams
             expression
              literalExpression
               92
            )
           blockExpression
            {
            }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expressionWithBlock
          loopExpression
           infiniteLoopExpression
            loop
            blockExpression
             {
             statements
              expression
               break
               expression
                literalExpression
                 92
             }
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expressionWithBlock
          loopExpression
           loopLabel
            'l
            :
           infiniteLoopExpression
            loop
            blockExpression
             {
             statements
              expression
               break
               'l
               expression
                literalExpression
                 92
             }
        ;
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          loopLabel
           'll
           :
          infiniteLoopExpression
           loop
           blockExpression
            {
            statements
             statement
              expressionStatement
               expression
                break
                'll
               ;
            }
     }
 item
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     vec
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           x
          :
          macroFragSpec
           identifier
            expr
         )
         macroRepSep
          macroPunctuationToken
           ,
         macroRepOp
          *
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               let
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               mut
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               temp_vec
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Vec
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               new
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 temp_vec
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 push
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   x
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ;
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              *
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               temp_vec
           }
         }
      ;
     }
 item
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     comments
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             mod
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             foo
         tokenTree
          delimTokenTree
           (
           )
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               bar
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            delimTokenTree
             {
             }
           }
         }
      ;
     }
 item
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     default
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          ty
         :
         macroFragSpec
          identifier
           ty
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         }
      ;
     }
 item
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     foobar
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         self
         :
         macroFragSpec
          identifier
           ident
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         }
      ;
     }
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       default
    !
    (
    tokenTree
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        String
    )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       thread_local
    !
    (
    tokenTree
     tokenTreeToken
      macroIdentifierLikeToken
       keyword
        static
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        HANDLE
     tokenTreeToken
      macroPunctuationToken
       :
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        Handle
     tokenTreeToken
      macroPunctuationToken
       =
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        Handle
    tokenTree
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroLiteralToken
         literalExpression
          0
      )
    )
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       cfg
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          foo
      )
   ]
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       foo
    !
    (
    )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       include
    !
    (
    tokenTree
     tokenTreeToken
      macroLiteralToken
       literalExpression
        "path/to/rust/file.rs"
    )
    ;
 item
  visItem
   constantItem
    const
    identifier
     STR
    :
    type_
     typeNoBounds
      referenceType
       &
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              str
    =
    expression
     macroInvocation
      simplePath
       simplePathSegment
        identifier
         include_str
      !
      delimTokenTree
       (
       tokenTree
        tokenTreeToken
         macroLiteralToken
          literalExpression
           "foo.in"
       )
    ;
 item
  visItem
   constantItem
    const
    identifier
     BYTES
    :
    type_
     typeNoBounds
      referenceType
       &
       typeNoBounds
        sliceType
         [
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 u8
         ]
    =
    expression
     macroInvocation
      simplePath
       simplePathSegment
        identifier
         include_bytes
      !
      delimTokenTree
       (
       tokenTree
        tokenTreeToken
         macroLiteralToken
          literalExpression
           "data.data"
        tokenTreeToken
         macroPunctuationToken
          ,
       )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       include
    !
    (
    tokenTree
     tokenTreeToken
      macroIdentifierLikeToken
       identifier
        concat
     tokenTreeToken
      macroPunctuationToken
       !
    tokenTree
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          env
       tokenTreeToken
        macroPunctuationToken
         !
      tokenTree
       delimTokenTree
        (
        tokenTree
         tokenTreeToken
          macroLiteralToken
           literalExpression
            "OUT_DIR"
        )
      tokenTree
       tokenTreeToken
        macroPunctuationToken
         ,
       tokenTreeToken
        macroLiteralToken
         literalExpression
          "/bindings.rs"
      )
    )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      identifier
       std
     ::
     simplePathSegment
      identifier
       include
    !
    (
    tokenTree
     tokenTreeToken
      macroLiteralToken
       literalExpression
        "path/to/rust/file.rs"
    )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     ::
     simplePathSegment
      identifier
       std
     ::
     simplePathSegment
      identifier
       include
    !
    (
    tokenTree
     tokenTreeToken
      macroLiteralToken
       literalExpression
        "path/to/rust/file.rs"
    )
    ;
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      crate
     ::
     simplePathSegment
      identifier
       foo
    !
    {
    }
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      self
     ::
     simplePathSegment
      identifier
       foo
    !
    {
    }
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      super
     ::
     simplePathSegment
      identifier
       foo
    !
    {
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     statements
      statement
       item
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             cfg
          attrInput
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                foo
            )
         ]
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             foo
          !
          {
          }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        =
        expression
         literalExpression
          0
        ;
      statement
       item
        macroItem
         macroRulesDefinition
          macro_rules
          !
          identifier
           bar
          macroRulesDef
           {
           macroRules
            macroRule
             macroMatcher
              (
              )
             =>
             macroTranscriber
              delimTokenTree
               {
               }
            ;
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           mut
           identifier
            macro_rules
        =
        expression
         literalExpression
          0
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               macro_rules
         compoundAssignOperator
          +=
         expression
          literalExpression
           1
        ;
      statement
       expressionStatement
        expression
         expression
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              foo
           !
           delimTokenTree
            (
            )
         +
         expression
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              foo
           !
           delimTokenTree
            (
            )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            v1
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroLiteralToken
              literalExpression
               1
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroLiteralToken
              literalExpression
               2
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroLiteralToken
              literalExpression
               3
           ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            v2
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroLiteralToken
              literalExpression
               1
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroLiteralToken
              literalExpression
               10
           ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            v
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Vec
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i32
               >
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            vv
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Vec
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i32
               >
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            vvv
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Vec
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i32
               >
        =
        expression
         macroInvocation
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             vec
          !
          delimTokenTree
           [
           ]
        ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             vec
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             println
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              92
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             format
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{argument}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              argument
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "test"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             format_args
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{name} {}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              1
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              name
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              2
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             format
          !
          [
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "hello {}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "world!"
          ]
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             format
          !
          {
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "x = {}, y = {y}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              10
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              y
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              30
          }
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             panic
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "division by zero"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             unimplemented
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{} {} {}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              1
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              2
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              3
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             todo
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "it's too {epithet} to implement"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              epithet
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "boring"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             println
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              92
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             println
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              92
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           ::
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             println
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              92
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             eprintln
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             dbg
          !
          (
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             dbg
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "Some text"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             dbg
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              123
           tokenTreeToken
            macroRepOp
             +
           tokenTreeToken
            macroLiteralToken
             literalExpression
              567
           tokenTreeToken
            macroPunctuationToken
             ,
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             dbg
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              123
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             dbg
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              123
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             dbg
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             error
          !
          (
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             debug
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "{a} {c} {b}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "a"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              'b'
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              c
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroLiteralToken
             literalExpression
              3
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             trace
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              target
           tokenTreeToken
            macroPunctuationToken
             :
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "smbc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "open_with {:?}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              options
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             log
           ::
           simplePathSegment
            identifier
             warn
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              target
           tokenTreeToken
            macroPunctuationToken
             :
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "smbc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "open_with {:?}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              options
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             log
           ::
           simplePathSegment
            identifier
             info
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              target
           tokenTreeToken
            macroPunctuationToken
             :
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "smbc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "open_with {:?}"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              options
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             debug
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              log
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "debug values"
           tokenTreeToken
            macroPunctuationToken
             ;
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "x"
           tokenTreeToken
            macroPunctuationToken
             =>
           tokenTreeToken
            macroLiteralToken
             literalExpression
              1
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "y"
           tokenTreeToken
            macroPunctuationToken
             =>
           tokenTreeToken
            macroPunctuationToken
             -
           tokenTreeToken
            macroLiteralToken
             literalExpression
              1
          )
          ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        =
        expression
         literalExpression
          42u32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            b
        =
        expression
         literalExpression
          43u32
        ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          [
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          ]
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          {
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          }
      statement
       ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_eq
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "Some text"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_ne
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "Some text"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "Some text"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "Text {} {} syntax"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "with"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "format"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             debug_assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_eq
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             debug_assert_eq
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_ne
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             debug_assert_ne
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             assert
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ==
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_eq
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "abc"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "abc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "def"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "abc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "def"
           tokenTreeToken
            macroPunctuationToken
             ,
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "abc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "def"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "abc"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "def"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             concat
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
           tokenTreeToken
            macroPunctuationToken
             ,
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "error message"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "error message"
           tokenTreeToken
            macroPunctuationToken
             ,
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "FOO"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             env
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              Foo
          tokenTree
           delimTokenTree
            [
            ]
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              options
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                pure
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                nomem
             tokenTreeToken
              macroPunctuationToken
               ,
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                nostack
            )
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              const
           tokenTreeToken
            macroLiteralToken
             literalExpression
              5
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              const
           tokenTreeToken
            macroLiteralToken
             literalExpression
              5
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              sym
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              foo
           tokenTreeToken
            macroPunctuationToken
             ::
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              bar
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              sym
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              foo
           tokenTreeToken
            macroPunctuationToken
             ::
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              bar
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              const
           tokenTreeToken
            macroLiteralToken
             literalExpression
              6
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              const
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              A
           tokenTreeToken
            macroRepOp
             +
           tokenTreeToken
            macroLiteralToken
             literalExpression
              1
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              in
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                reg
            )
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              x
           tokenTreeToken
            macroPunctuationToken
             =>
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              y
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              out
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroLiteralToken
               literalExpression
                "eax"
            )
          tokenTree
           tokenTreeToken
            macroPunctuationToken
             _
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              const
           tokenTreeToken
            macroLiteralToken
             literalExpression
              5
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              sym
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              foo
           tokenTreeToken
            macroPunctuationToken
             ::
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              bar
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              c
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             keyword
              in
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                reg
            )
          tokenTree
           tokenTreeToken
            macroPunctuationToken
             _
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              d
           tokenTreeToken
            macroPunctuationToken
             =
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              out
          tokenTree
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                reg
            )
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             =>
           tokenTreeToken
            macroPunctuationToken
             _
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
          )
          ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             std
           ::
           simplePathSegment
            identifier
             asm
          !
          (
          tokenTree
           tokenTreeToken
            macroLiteralToken
             literalExpression
              "nop"
          )
          ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expressionWithBlock
          matchExpression
           match
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 x
           {
           matchArms
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            matchArmExpression
             expressionWithBlock
              blockExpression
               {
               }
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            matchArmExpression
             expression
              literalExpression
               1
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            matchArmExpression
             expression
              expression
               expressionWithBlock
                unsafeBlockExpression
                 unsafe
                 blockExpression
                  {
                  statements
                   expression
                    literalExpression
                     1
                  }
              .
              pathExprSegment
               pathIdentSegment
                identifier
                 to_string
              (
              )
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            expression
             literalExpression
              92
           }
        ;
      statement
       expressionStatement
        expression
         expressionWithBlock
          matchExpression
           match
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 x
           {
           matchArms
            matchArm
             pattern
              |
              patternNoTopAlt
               patternWithoutRange
                literalPattern
                 0
              |
              patternNoTopAlt
               patternWithoutRange
                literalPattern
                 1
            =>
            matchArmExpression
             expression
              literalExpression
               0
             ,
            matchArm
             pattern
              |
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            expression
             literalExpression
              42
            ,
           }
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expressionWithBlock
         matchExpression
          match
          expression
           (
           )
          {
          matchArms
           matchArm
            pattern
             patternNoTopAlt
              patternWithoutRange
               tuplePattern
                (
                )
           =>
           matchArmExpression
            expressionWithBlock
             blockExpression
              {
              }
           matchArm
            pattern
             patternNoTopAlt
              patternWithoutRange
               tuplePattern
                (
                )
           =>
           expression
            expressionWithBlock
             blockExpression
              {
              }
          }
     }
 item
  visItem
   module
    mod
    identifier
     arith
    {
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        add
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               x
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               y
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                i32
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            return
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
             +
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   y
           ;
        }
    item
     visItem
      function_
       functionQualifiers
       fn
       identifier
        mul
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               x
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               y
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                i32
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  x
            *
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  y
           ;
        }
    }
 item
  visItem
   module
    mod
    identifier
     empty
    {
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1.0
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1f32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1f64
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1.0f64
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1.0e92
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1.0e92f32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1.
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          10e_6
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          literalExpression
           0f32
         .
         pathExprSegment
          pathIdentSegment
           identifier
            foo
         (
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1234567890
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1234567890i32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1_________
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          1_________i32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          0x1234567890abcdef
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          0o1234567
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         literalExpression
          0b10101011101010000111
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          wildcardPattern
           _
        =
        expression
         expression
          literalExpression
           0
         .
         pathExprSegment
          pathIdentSegment
           identifier
            foo
         (
         )
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     moo
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                a
          ||
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                b
         ||
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               c
        ;
      statement
       expressionStatement
        expression
         expression
          expression
           expression
            expression
             literalExpression
              5
            |
            expression
             literalExpression
              3
           comparisonOperator
            ==
           expression
            literalExpression
             2
          ||
          expression
           expression
            expression
             expression
              literalExpression
               4
             |
             expression
              literalExpression
               2
            |
            expression
             literalExpression
              0
           comparisonOperator
            ==
           expression
            literalExpression
             4
         ||
         expression
          expression
           expression
            literalExpression
             1
           |
           expression
            literalExpression
             0
          comparisonOperator
           ==
          expression
           literalExpression
            1
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     patterns
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          structPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
           {
           structPatternElements
            structPatternEtCetera
             ..
           }
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          structPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
           {
           structPatternElements
            structPatternFields
             structPatternField
              identifier
               field
           }
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          structPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
           {
           structPatternElements
            structPatternFields
             structPatternField
              identifier
               field
            ,
           }
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          structPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S
           {
           structPatternElements
            structPatternFields
             structPatternField
              identifier
               field
            ,
            structPatternEtCetera
             ..
           }
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          tupleStructPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               T
           (
           tupleStructItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 field
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               restPattern
                ..
           )
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          tupleStructPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               T
           (
           tupleStructItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               restPattern
                ..
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 field
           )
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              x
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          tuplePattern
           (
           tuplePatternItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               restPattern
                ..
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 y
           )
        =
        expression
         (
         tupleElements
          expression
           literalExpression
            1
          ,
          expression
           literalExpression
            2
          ,
          expression
           literalExpression
            3
          ,
          expression
           literalExpression
            4
          ,
          expression
           literalExpression
            5
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          slicePattern
           [
           slicePatternItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               restPattern
                ..
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 y
           ]
        =
        expression
         [
         arrayElements
          expression
           literalExpression
            1
          ,
          expression
           literalExpression
            2
          ,
          expression
           literalExpression
            3
          ,
          expression
           literalExpression
            4
         ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          referencePattern
           &
           patternWithoutRange
            slicePattern
             [
             slicePatternItems
              pattern
               patternNoTopAlt
                patternWithoutRange
                 identifierPattern
                  identifier
                   x
              ,
              pattern
               patternNoTopAlt
                patternWithoutRange
                 identifierPattern
                  ref
                  identifier
                   y
                  @
                  pattern
                   patternNoTopAlt
                    patternWithoutRange
                     restPattern
                      ..
             ]
        =
        expression
         [
         arrayElements
          expression
           literalExpression
            1
          ,
          expression
           literalExpression
            2
          ,
          expression
           literalExpression
            3
         ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          slicePattern
           [
           slicePatternItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               restPattern
                ..
           ]
        =
        expression
         [
         arrayElements
          expression
           literalExpression
            1
          ,
          expression
           literalExpression
            2
         ]
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           ref
           identifier
            a
           @
           pattern
            patternNoTopAlt
             patternWithoutRange
              wildcardPattern
               _
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              value
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifLetExpression
          if
          let
          pattern
           patternNoTopAlt
            patternWithoutRange
             tupleStructPattern
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  Some
              (
              tupleStructItems
               pattern
                patternNoTopAlt
                 patternWithoutRange
                  identifierPattern
                   identifier
                    x
               ,
              )
          =
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 Some
           (
           callParams
            expression
             literalExpression
              92
           )
          blockExpression
           {
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              m
           !
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                x
            )
        =
        expression
         literalExpression
          92
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         rangePattern
          rangePatternBound
           pathPattern
            qualifiedPathInExpression
             qualifiedPathType
              <
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      i32
              >
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                foo
          ...
          rangePatternBound
           pathPattern
            qualifiedPathInExpression
             qualifiedPathType
              <
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      i32
              >
             ::
             pathExprSegment
              pathIdentSegment
               identifier
                bar
        =
        expression
         literalExpression
          92
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          pathPattern
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               Option
            ::
            pathExprSegment
             pathIdentSegment
              identifier
               None
        =
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              None
        ;
      statement
       expressionStatement
        expression
         expressionWithBlock
          matchExpression
           match
           expression
            literalExpression
             10
           {
           matchArms
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                literalPattern
                 -
                 100
            =>
            matchArmExpression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                identifierPattern
                 identifier
                  X
            =>
            matchArmExpression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                pathPattern
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     Q
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     T
            =>
            matchArmExpression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
             ,
            matchArm
             pattern
              patternNoTopAlt
               rangePattern
                rangePatternBound
                 2
                ...
                rangePatternBound
                 4
            =>
            matchArmExpression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
             ,
            matchArm
             pattern
              patternNoTopAlt
               patternWithoutRange
                wildcardPattern
                 _
            =>
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  x
           }
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     single_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
       :
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
       :
       typeParamBounds
        typeParamBound
         traitBound
          (
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
          )
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      QuestionBound
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
        :
        typeParamBounds
         typeParamBound
          traitBound
           ?
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Sized
      >
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Unique
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       T
              >
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      ParenthesizedQuestionBound
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
        :
        typeParamBounds
         typeParamBound
          traitBound
           (
           ?
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Sized
           )
      >
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Unique
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       T
              >
     )
     ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     multiple_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
       :
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
        +
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Baz
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_multiple_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
       :
       typeParamBounds
        typeParamBound
         traitBound
          (
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
          )
        +
        typeParamBound
         traitBound
          (
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Baz
          )
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     lifetime_bound
    genericParams
     <
     genericParam
      lifetimeParam
       'a
     ,
     genericParam
      typeParam
       identifier
        T
       :
       typeParamBounds
        typeParamBound
         lifetime
          'a
     >
    (
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     for_lifetime_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        F
     >
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            f
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
    )
    whereClause
     where
     whereClauseItem
      typeBoundWhereClauseItem
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
       :
       typeParamBounds
        typeParamBound
         traitBound
          forLifetimes
           for
           genericParams
            <
            genericParam
             lifetimeParam
              'a
            >
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Fn
            typePathFn
             (
             typePathInputs
              type_
               typeNoBounds
                referenceType
                 &
                 lifetime
                  'a
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i32
             )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_for_lifetime_bound
    genericParams
     <
     genericParam
      typeParam
       identifier
        F
     >
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            f
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
    )
    whereClause
     where
     whereClauseItem
      typeBoundWhereClauseItem
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
       :
       typeParamBounds
        typeParamBound
         traitBound
          (
          forLifetimes
           for
           genericParams
            <
            genericParam
             lifetimeParam
              'a
            >
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Fn
            typePathFn
             (
             typePathInputs
              type_
               typeNoBounds
                referenceType
                 &
                 lifetime
                  'a
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i32
             )
          )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     impl_bound
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       implTraitTypeOneBound
        impl
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             Bar
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_impl_bound
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       implTraitTypeOneBound
        impl
        traitBound
         (
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             Bar
         )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     impl_multiple_bound
    (
    )
    functionReturnType
     ->
     type_
      implTraitType
       impl
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
        +
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Baz
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_impl_multiple_bound
    (
    )
    functionReturnType
     ->
     type_
      implTraitType
       impl
       typeParamBounds
        typeParamBound
         traitBound
          (
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Bar
          )
        +
        typeParamBound
         traitBound
          (
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Baz
          )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     dyn_bound
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            b
       :
       type_
        typeNoBounds
         referenceType
          &
          mut
          typeNoBounds
           traitObjectTypeOneBound
            dyn
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Bar
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     parenthesized_dyn_bound
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            b
       :
       type_
        typeNoBounds
         referenceType
          &
          mut
          typeNoBounds
           traitObjectTypeOneBound
            dyn
            traitBound
             (
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Bar
             )
    )
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     lifetime_bound_on_Fn_returning_reference
    genericParams
     <
     genericParam
      lifetimeParam
       'b
     ,
     genericParam
      typeParam
       identifier
        F
     ,
     genericParam
      typeParam
       identifier
        Z
       :
       typeParamBounds
        typeParamBound
         lifetime
          'b
     >
    (
    )
    whereClause
     where
     whereClauseItem
      typeBoundWhereClauseItem
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               F
       :
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Fn
            typePathFn
             (
             )
             ->
             type_
              typeNoBounds
               referenceType
                &
                lifetime
                 'b
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Z
        +
        typeParamBound
         lifetime
          'static
    blockExpression
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        =
        expression
         expression
          literalExpression
           1
         +
         expression
          expression
           literalExpression
            2
          *
          expression
           literalExpression
            3
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            b
        =
        expression
         expression
          *
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
         comparisonOperator
          ==
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               y
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          expression
           literalExpression
            1
          ..
          expression
           literalExpression
            2
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          ..
          expression
           literalExpression
            2
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          expression
           literalExpression
            1
          ..
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          ..
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          expression
           expressionWithBlock
            blockExpression
             {
             statements
              expression
               literalExpression
                1
             }
          ..
          expression
           expressionWithBlock
            blockExpression
             {
             statements
              expression
               literalExpression
                2
             }
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          expression
           literalExpression
            1
          ..=
          expression
           literalExpression
            10
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          expression
           literalExpression
            1
          ..=
          expression
           literalExpression
            10
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               r
         =
         expression
          ..=
          expression
           literalExpression
            10
        ;
      statement
       expressionStatement
        expressionWithBlock
         loopExpression
          iteratorLoopExpression
           for
           pattern
            patternNoTopAlt
             patternWithoutRange
              identifierPattern
               identifier
                i
           in
           expression
            expression
             literalExpression
              0
            ..
           blockExpression
            {
            statements
             expression
              literalExpression
               2
            }
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     {
     structFields
      structField
       identifier
        f
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S2
     {
     structFields
      structField
       identifier
        foo
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
      ,
      structField
       identifier
        bar
       :
       type_
        typeNoBounds
         tupleType
          (
          )
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expressionWithBlock
          ifExpression
           if
           expression
            expressionWithBlock
             ifExpression
              if
              expression
               literalExpression
                true
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expression
                   structExpression
                    structExprStruct
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         S
                     {
                     structExprFields
                      structExprField
                       identifier
                        f
                       :
                       expression
                        literalExpression
                         1
                     }
                  ;
                expression
                 literalExpression
                  true
               }
              else
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expression
                   structExpression
                    structExprStruct
                     pathInExpression
                      pathExprSegment
                       pathIdentSegment
                        identifier
                         S
                     {
                     structExprFields
                      structExprField
                       identifier
                        f
                       :
                       expression
                        literalExpression
                         1
                     }
                  ;
                expression
                 literalExpression
                  false
               }
           blockExpression
            {
            statements
             expression
              (
              )
            }
           else
           blockExpression
            {
            statements
             expression
              (
              )
            }
        ;
      statement
       expressionStatement
        expression
         expressionWithBlock
          ifExpression
           if
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               statement
                expressionStatement
                 expression
                  structExpression
                   structExprStruct
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        S
                    {
                    structExprFields
                     structExprField
                      identifier
                       f
                      :
                      expression
                       literalExpression
                        1
                    }
                 ;
               statement
                letStatement
                 let
                 patternNoTopAlt
                  patternWithoutRange
                   wildcardPattern
                    _
                 =
                 expression
                  structExpression
                   structExprStruct
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        S
                    {
                    structExprFields
                     structExprField
                      identifier
                       f
                      :
                      expression
                       literalExpression
                        1
                    }
                 ;
               expression
                literalExpression
                 true
              }
           blockExpression
            {
            statements
             expression
              (
              )
            }
        ;
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            expressionWithBlock
             blockExpression
              {
              statements
               expression
                literalExpression
                 1
              }
           comparisonOperator
            ==
           expression
            literalExpression
             1
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               literalExpression
                1
              ;
           }
      statement
       expressionStatement
        expressionWithBlock
         ifExpression
          if
          expression
           expression
            expressionWithBlock
             unsafeBlockExpression
              unsafe
              blockExpression
               {
               statements
                expression
                 literalExpression
                  0
               }
           comparisonOperator
            ==
           expression
            literalExpression
             0
          blockExpression
           {
           statements
            statement
             expressionStatement
              expression
               literalExpression
                0
              ;
           }
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          tuplePattern
           (
           tuplePatternItems
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 foo
            ,
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 bar
           )
        =
        expression
         (
         tupleElements
          expression
           literalExpression
            1
          ,
          expression
           (
           )
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            s2
        =
        expression
         structExpression
          structExprStruct
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               S2
           {
           structExprFields
            structExprField
             identifier
              foo
            ,
            structExprField
             identifier
              bar
           }
        ;
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S1
     ;
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S2
     {
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S3
     {
     structFields
      structField
       identifier
        field
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S4
     {
     structFields
      structField
       identifier
        field
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
      ,
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S5
     {
     structFields
      structField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       identifier
        field
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
     }
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S6
     {
     structFields
      structField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       identifier
        field
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
      ,
      structField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       identifier
        field2
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               f32
     }
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S10
     (
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S11
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S12
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
      ,
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S13
     (
     tupleFields
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
      ,
      tupleField
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S14
     (
     tupleFields
      tupleField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     )
     ;
 item
  visItem
   struct_
    tupleStruct
     struct
     identifier
      S15
     (
     tupleFields
      tupleField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
      ,
      tupleField
       outerAttribute
        #
        [
        attr
         simplePath
          simplePathSegment
           identifier
            foo
        ]
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               i32
     )
     ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       repr
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          C
      )
   ]
  visItem
   union_
    union
    identifier
     U
    {
    structFields
     structField
      identifier
       i
      :
      type_
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              i32
     ,
     structField
      identifier
       f
      :
      type_
       typeNoBounds
        traitObjectTypeOneBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              f32
     ,
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     statements
      statement
       item
        visItem
         struct_
          structStruct
           struct
           identifier
            S1
           ;
      statement
       item
        visItem
         struct_
          structStruct
           struct
           identifier
            S2
           {
           }
      statement
       item
        visItem
         struct_
          structStruct
           struct
           identifier
            S3
           {
           structFields
            structField
             identifier
              field
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     f32
           }
      statement
       item
        visItem
         struct_
          structStruct
           struct
           identifier
            S4
           {
           structFields
            structField
             identifier
              field
             :
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     f32
            ,
           }
      statement
       item
        outerAttribute
         #
         [
         attr
          simplePath
           simplePathSegment
            identifier
             repr
          attrInput
           delimTokenTree
            (
            tokenTree
             tokenTreeToken
              macroIdentifierLikeToken
               identifier
                C
            )
         ]
        visItem
         union_
          union
          identifier
           U
          {
          structFields
           structField
            identifier
             i
            :
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    i32
           ,
           structField
            identifier
             f
            :
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    f32
           ,
          }
     }
 item
  visItem
   trait_
    trait
    identifier
     Contains
    {
    associatedItem
     typeAlias
      type
      identifier
       A
      ;
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       inner
      (
      functionParameters
       selfParam
        shorthandSelf
         &
         self
      )
      functionReturnType
       ->
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              Self
            ::
            typePathSegment
             pathIdentSegment
              identifier
               A
      ;
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       empty
      (
      )
      ;
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       anon_param
      (
      functionParameters
       functionParam
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                i32
      )
      ;
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       self_type
      (
      functionParameters
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              x
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                Self
       ,
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              y
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 Vec
               genericArgs
                <
                genericArgsTypes
                 type_
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        Self
                >
      )
      functionReturnType
       ->
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              Self
      ;
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    (
    )
    blockExpression
     {
     statements
      statement
       item
        visItem
         trait_
          trait
          identifier
           Inner
          {
          }
      statement
       ;
      statement
       item
        visItem
         trait_
          unsafe
          trait
          identifier
           UnsafeInner
          {
          }
      statement
       ;
     }
 item
  visItem
   trait_
    trait
    identifier
     bar
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
     >
    {
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       baz
      (
      functionParameters
       selfParam
        shorthandSelf
         &
         self
       ,
      )
      ;
    }
 item
  visItem
   trait_
    trait
    identifier
     TrailingPlusIsOk
    :
    typeParamBounds
     typeParamBound
      traitBound
       typePath
        typePathSegment
         pathIdentSegment
          identifier
           Clone
     +
    {
    }
 item
  visItem
   trait_
    trait
    identifier
     EmptyBoundsAreValid
    :
    {
    }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expression
         expression
          expression
           literalExpression
            "1"
          .
          pathExprSegment
           pathIdentSegment
            identifier
             parse
           ::
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     i32
            >
          (
          )
         ?
        ;
      statement
       expressionStatement
        expression
         expression
          expressionWithBlock
           blockExpression
            {
            statements
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   x
            }
         ?
        ;
      statement
       expressionStatement
        expression
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          [
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 y
           ?
          ]
         ?
        ;
      statement
       expressionStatement
        expression
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 x
           ?
          ?
         ?
        ;
      statement
       expressionStatement
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               Ok
         (
         callParams
          expression
           literalExpression
            true
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            question_should_bind_tighter
        =
        expression
         !
         expression
          expression
           pathExpression
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                x
          ?
        ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      expression
       pathExpression
        pathInExpression
         pathExprSegment
          pathIdentSegment
           identifier
            a
          ::
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    B
                  genericArgs
                   <
                   >
           >
     }
 item
  visItem
   typeAlias
    type
    identifier
     FunType
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Fn
          typePathFn
           (
           typePathInputs
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    f64
           )
           ->
           type_
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   f64
    ;
 item
  visItem
   typeAlias
    type
    identifier
     FunType2
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            FnOnce
          ::
          typePathFn
           (
           typePathInputs
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    i32
           )
    ;
 item
  visItem
   typeAlias
    type
    identifier
     FunTypeVoid
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Fn
          typePathFn
           (
           )
    ;
 item
  visItem
   typeAlias
    type
    identifier
     ColonColon
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Vec
          ::
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              arrayType
               [
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       u8
               ;
               expression
                literalExpression
                 8
               ]
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Sum
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             traitObjectType
              typeParamBounds
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     A
               +
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Copy
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     LifetimeSum
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             traitObjectType
              typeParamBounds
               typeParamBound
                lifetime
                 'a
               +
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Copy
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     HrtbSum
    =
    type_
     typeNoBounds
      referenceType
       &
       typeNoBounds
        parenthesizedType
         (
         type_
          traitObjectType
           typeParamBounds
            typeParamBound
             traitBound
              forLifetimes
               for
               genericParams
                <
                genericParam
                 lifetimeParam
                  'a
                >
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Trait1
            +
            typeParamBound
             traitBound
              forLifetimes
               for
               genericParams
                <
                genericParam
                 lifetimeParam
                  'b
                >
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Trait2
         )
    ;
 item
  visItem
   typeAlias
    type
    identifier
     FunSum
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Fn
                  typePathFn
                   (
                   typePathInputs
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            f64
                    ,
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            f64
                   )
                   ->
                   type_
                    traitObjectType
                     typeParamBounds
                      typeParamBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            f64
                      +
                      typeParamBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Send
                      +
                      typeParamBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Sync
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     FunSum2
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             traitObjectType
              typeParamBounds
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Fn
                   typePathFn
                    (
                    )
                    ->
                    type_
                     typeNoBounds
                      tupleType
                       (
                       )
               +
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Send
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     FunRetDynTrait
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Fn
                  typePathFn
                   (
                   )
                   ->
                   type_
                    traitObjectType
                     dyn
                     typeParamBounds
                      typeParamBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Trait
                      +
                      typeParamBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Send
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Shl
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            F
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              qualifiedPathInType
               qualifiedPathType
                <
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        i
                as
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    B
                >
               ::
               typePathSegment
                pathIdentSegment
                 identifier
                  Q
           ,
           genericArgsBindings
            genericArgsBinding
             identifier
              T
             =
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     bool
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Shr
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Vec
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Vec
                  genericArgs
                   <
                   genericArgsTypes
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            f64
                   >
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Path
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            io
         ::
         typePathSegment
          pathIdentSegment
           identifier
            Result
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              tupleType
               (
               )
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     AssocType
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             traitObjectType
              typeParamBounds
               typeParamBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     Iterator
                   genericArgs
                    <
                    genericArg
                     genericArgsBinding
                      identifier
                       Item
                      =
                      type_
                       typeNoBounds
                        tupleType
                         (
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 Idx
                         ,
                         type_
                          typeNoBounds
                           traitObjectTypeOneBound
                            traitBound
                             typePath
                              typePathSegment
                               pathIdentSegment
                                identifier
                                 T
                         )
                    >
               +
               typeParamBound
                lifetime
                 'a
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     GenericAssoc
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Foo
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    T
           ,
           genericArgsBindings
            genericArgsBinding
             identifier
              U
             =
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     i32
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Trailing1
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Box
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    TypeA
                  genericArgs
                   <
                   genericArgsLifetimes
                    lifetime
                     'static
                   ,
                   >
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     Trailing2
    genericParams
     <
     genericParam
      lifetimeParam
       'a
     >
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            MyType
          genericArgs
           <
           genericArgsLifetimes
            lifetime
             'a
           ,
           genericArgsTypes
            type_
             typeNoBounds
              tupleType
               (
               )
           ,
           >
    ;
 item
  visItem
   typeAlias
    type
    identifier
     TrailingCommaInFn
    =
    type_
     typeNoBounds
      bareFunctionType
       functionTypeQualifiers
        unsafe
        extern
        abi
         "system"
       fn
       (
       functionParametersMaybeNamedVariadic
        maybeNamedFunctionParameters
         maybeNamedParam
          identifier
           x
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  i32
         ,
       )
       bareFunctionReturnType
        ->
        typeNoBounds
         tupleType
          (
          )
    ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     foo
    genericParams
     <
     genericParam
      typeParam
       identifier
        T
     >
    (
    functionParameters
     functionParam
      functionParamPattern
       pattern
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            xs
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Vec
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       T
              >
    )
    functionReturnType
     ->
     type_
      implTraitType
       impl
       typeParamBounds
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Iterator
            genericArgs
             <
             genericArg
              genericArgsBinding
               identifier
                Item
               =
               type_
                typeNoBounds
                 implTraitTypeOneBound
                  impl
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       FnOnce
                     typePathFn
                      (
                      )
                      ->
                      type_
                       typeNoBounds
                        traitObjectTypeOneBound
                         traitBound
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              T
             >
        +
        typeParamBound
         traitBound
          typePath
           typePathSegment
            pathIdentSegment
             identifier
              Clone
    blockExpression
     {
     statements
      expression
       expression
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              xs
        .
        pathExprSegment
         pathIdentSegment
          identifier
           into_iter
        (
        )
       .
       pathExprSegment
        pathIdentSegment
         identifier
          map
       (
       callParams
        expression
         closureExpression
          |
          closureParameters
           closureParam
            pattern
             patternNoTopAlt
              patternWithoutRange
               identifierPattern
                identifier
                 x
          |
          expression
           closureExpression
            ||
            expression
             pathExpression
              pathInExpression
               pathExprSegment
                pathIdentSegment
                 identifier
                  x
       )
     }
 item
  visItem
   typeAlias
    type
    identifier
     DynTrait
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       dyn
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            Trait
    ;
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S
     genericParams
      <
      genericParam
       typeParam
        identifier
         F
      >
     whereClause
      where
      whereClauseItem
       typeBoundWhereClauseItem
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                F
        :
        typeParamBounds
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               FnMut
             typePathFn
              (
              typePathInputs
               type_
                typeNoBounds
                 referenceType
                  &
                  mut
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        Self
               ,
               type_
                typeNoBounds
                 referenceType
                  &
                  typeNoBounds
                   traitObjectTypeOneBound
                    traitBound
                     typePath
                      typePathSegment
                       pathIdentSegment
                        identifier
                         T
              )
              ->
              type_
               typeNoBounds
                traitObjectTypeOneBound
                 traitBound
                  typePath
                   typePathSegment
                    pathIdentSegment
                     identifier
                      Result
                    genericArgs
                     <
                     genericArgsTypes
                      type_
                       typeNoBounds
                        tupleType
                         (
                         )
                      ,
                      type_
                       typeNoBounds
                        qualifiedPathInType
                         qualifiedPathType
                          <
                          type_
                           typeNoBounds
                            traitObjectTypeOneBound
                             traitBound
                              typePath
                               typePathSegment
                                pathIdentSegment
                                 Self
                          as
                          typePath
                           typePathSegment
                            pathIdentSegment
                             identifier
                              Encoder
                          >
                         ::
                         typePathSegment
                          pathIdentSegment
                           identifier
                            Error
                     >
     ;
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      EmptyWhere
     whereClause
      where
     {
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     bar
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       macroInvocation
        simplePath
         simplePathSegment
          identifier
           foo
        !
        delimTokenTree
         (
         )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        :
        type_
         typeNoBounds
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              foo
           !
           delimTokenTree
            (
            )
        =
        expression
         expression
          literalExpression
           0
         as
         typeNoBounds
          macroInvocation
           simplePath
            simplePathSegment
             identifier
              foo
           !
           delimTokenTree
            (
            )
        ;
      expression
       pathExpression
        pathInExpression
         pathExprSegment
          pathIdentSegment
           identifier
            a
     }
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        y
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     ::
     {
     useTree
      simplePath
       simplePathSegment
        self
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     ::
     {
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         y
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         y
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     {
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        y
     ::
     *
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        y
     as
     identifier
      z
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        y
     as
     _
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       self
      ::
      simplePathSegment
       identifier
        y
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        y
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        a
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         B
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         d
      ::
      {
      useTree
       simplePath
        simplePathSegment
         self
      ,
      useTree
       *
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          g
        ::
        simplePathSegment
         identifier
          H
      }
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     ::
     {
     useTree
      *
     ,
     useTree
      *
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        foo
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         bar
     ,
     useTree
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          baz
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          quux
      }
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     {
     useTree
      simplePath
       simplePathSegment
        crate
       ::
       simplePathSegment
        identifier
         foo
     ,
     useTree
      simplePath
       simplePathSegment
        crate
       ::
       simplePathSegment
        identifier
         bar
     ,
     useTree
      simplePath
       simplePathSegment
        super
       ::
       simplePathSegment
        identifier
         baz
     }
    ;
 item
  visItem
   struct_
    structStruct
     struct
     identifier
      S1
     ;
 item
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      S2
     ;
 item
  visItem
   visibility
    pub
    (
    crate
    )
   struct_
    structStruct
     struct
     identifier
      S3
     ;
 item
  visItem
   visibility
    pub
    (
    self
    )
   struct_
    structStruct
     struct
     identifier
      S4
     ;
 item
  visItem
   module
    mod
    identifier
     a
    {
    item
     visItem
      visibility
       pub
       (
       super
       )
      struct_
       structStruct
        struct
        identifier
         S5
        ;
    item
     visItem
      visibility
       pub
       (
       in
       simplePath
        simplePathSegment
         identifier
          a
       )
      struct_
       structStruct
        struct
        identifier
         S6
        ;
    item
     visItem
      module
       mod
       identifier
        b
       {
       item
        visItem
         visibility
          pub
          (
          in
          simplePath
           simplePathSegment
            super
           ::
           simplePathSegment
            super
          )
         struct_
          structStruct
           struct
           identifier
            S7
           ;
       }
    }
 item
  macroItem
   macroInvocationSemi
    simplePath
     simplePathSegment
      crate
     ::
     simplePathSegment
      identifier
       macro1
    !
    (
    )
    ;
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     __diesel_column
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           table
          :
          macroFragSpec
           identifier
            ident
         )
         macroRepSep
          macroPunctuationToken
           ::
         macroRepOp
          *
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
        macroMatch
         $
         identifier
          column_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ->
        macroMatch
         $
         identifier
          Type
         :
         macroFragSpec
          identifier
           ty
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            #
         tokenTree
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               allow
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 non_camel_case_types
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 dead_code
             )
           ]
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            #
         tokenTree
          delimTokenTree
           [
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               derive
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Debug
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Clone
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Copy
             )
           ]
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             pub
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             struct
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             column_name
          tokenTreeToken
           macroPunctuationToken
            ;
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroIdentifierLikeToken
            $crate
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             expression
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             Expression
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             column_name
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               SqlType
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Type
            tokenTreeToken
             macroPunctuationToken
              ;
           }
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             DB
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            $crate
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             query_builder
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             QueryFragment
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             DB
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             column_name
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             where
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             DB
          tokenTreeToken
           macroPunctuationToken
            :
          tokenTreeToken
           macroIdentifierLikeToken
            $crate
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             backend
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             Backend
          tokenTreeToken
           macroPunctuationToken
            ,
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           $
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroRepOp
            *
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             as
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             QuerySource
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             FromClause
          tokenTreeToken
           macroPunctuationToken
            :
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             QueryFragment
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             DB
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroPunctuationToken
            ,
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_sql
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 out
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 mut
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 DB
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 QueryBuilder
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               BuildQueryResult
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 try
              tokenTreeToken
               macroPunctuationToken
                !
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     table
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroRepOp
                  *
                tokenTreeToken
                 macroPunctuationToken
                  .
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   from_clause
               tokenTree
                delimTokenTree
                 (
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  .
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   to_sql
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     out
                 )
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 out
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 push_sql
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "."
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 out
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 push_identifier
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   stringify
                tokenTreeToken
                 macroPunctuationToken
                  !
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     column_name
                 )
               )
             }
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               collect_binds
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 _out
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 mut
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 DB
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 BindCollector
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               result
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               QueryResult
            tokenTreeToken
             macroPunctuationToken
              <
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              >
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Ok
             tokenTree
              delimTokenTree
               (
               tokenTree
                delimTokenTree
                 (
                 )
               )
             }
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               is_safe_to_cache_prepared
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               bool
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 true
             }
           }
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             impl_query_id
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               column_name
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             SelectableExpression
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           $
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroRepOp
            *
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             column_name
         tokenTree
          delimTokenTree
           {
           }
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     table
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         macroMatchToken
          macroIdentifierLikeToken
           keyword
            use
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           import
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepSep
          macroPunctuationToken
           ::
         macroRepOp
          +
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ;
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           rest
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepOp
          +
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 rest
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              +
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 import
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroRepOp
              +
            tokenTreeToken
             macroPunctuationToken
              ;
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           table_name
          :
          macroFragSpec
           identifier
            ident
         )
         macroRepSep
          macroPunctuationToken
           .
         macroRepOp
          +
        macroMatch
         macroMatcher
          {
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             body
            :
            macroFragSpec
             identifier
              tt
           )
           macroRepOp
            *
          }
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           imports
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepOp
          *
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table_name
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroRepOp
              +
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 id
             )
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   body
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                *
             }
           tokenTree
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 imports
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              *
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         $
         (
         macroMatch
          macroMatcher
           (
           macroMatch
            $
            (
            macroMatch
             $
             identifier
              pk
             :
             macroFragSpec
              identifier
               ident
            )
            macroRepSep
             macroPunctuationToken
              ,
            macroRepOp
             +
           )
         )
         macroRepOp
          *
        macroMatch
         macroMatcher
          {
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             body
            :
            macroFragSpec
             identifier
              tt
           )
           macroRepOp
            *
          }
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           imports
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepOp
          *
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               public
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               name
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     pk
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroRepOp
                  +
               )
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              *
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   body
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                *
             }
           tokenTree
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 imports
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              *
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           table_name
          :
          macroFragSpec
           identifier
            ident
         )
         macroRepSep
          macroPunctuationToken
           .
         macroRepOp
          +
        macroMatch
         $
         (
         macroMatch
          macroMatcher
           (
           macroMatch
            $
            (
            macroMatch
             $
             identifier
              pk
             :
             macroFragSpec
              identifier
               ident
            )
            macroRepSep
             macroPunctuationToken
              ,
            macroRepOp
             +
           )
         )
         macroRepOp
          *
        macroMatch
         macroMatcher
          {
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             body
            :
            macroFragSpec
             identifier
              tt
           )
           macroRepOp
            *
          }
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table_name
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroRepOp
              +
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     pk
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroRepOp
                  +
               )
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              *
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   body
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                *
             }
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               types
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroRepOp
              *
            tokenTreeToken
             macroPunctuationToken
              ;
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           .
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           identifier
            pk
           :
           macroFragSpec
            identifier
             ident
          )
        macroMatch
         $
         identifier
          body
         :
         macroFragSpec
          identifier
           tt
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           imports
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepOp
          +
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_body
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               name
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 pk
             )
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               body
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 imports
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              +
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           .
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           identifier
            pk
           :
           macroFragSpec
            identifier
             ident
          macroMatch
           macroMatchToken
            macroPunctuationToken
             ,
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             composite_pk
            :
            macroFragSpec
             identifier
              ident
           )
           macroRepSep
            macroPunctuationToken
             ,
           macroRepOp
            +
          )
        macroMatch
         $
         identifier
          body
         :
         macroFragSpec
          identifier
           tt
        macroMatch
         $
         (
         macroMatch
          $
          identifier
           imports
          :
          macroFragSpec
           identifier
            tt
         )
         macroRepOp
          +
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_body
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               name
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 pk
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   composite_pk
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             )
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               body
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 imports
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              +
           }
         }
      ;
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     table_body
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           .
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           identifier
            pk
           :
           macroFragSpec
            identifier
             ident
          )
        macroMatch
         macroMatcher
          {
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             column_name
            :
            macroFragSpec
             identifier
              ident
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ->
           macroMatch
            $
            identifier
             Type
            :
            macroFragSpec
             identifier
              ty
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ,
           )
           macroRepOp
            +
          }
        macroMatch
         $
         (
         macroMatch
          macroMatchToken
           macroIdentifierLikeToken
            keyword
             use
         macroMatch
          $
          (
          macroMatch
           $
           identifier
            import
           :
           macroFragSpec
            identifier
             tt
          )
          macroRepSep
           macroPunctuationToken
            ::
          macroRepOp
           +
         macroMatch
          macroMatchToken
           macroPunctuationToken
            ;
         )
         macroRepOp
          +
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_body
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table_name
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               name
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_ty
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               columns
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               pk
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_expr
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               columns
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               pk
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               columns
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             [
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   column_name
                tokenTreeToken
                 macroPunctuationToken
                  ->
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Type
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             ]
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               imports
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     import
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroRepOp
                  +
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroRepOp
                +
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           .
        macroMatch
         $
         identifier
          name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             pk
            :
            macroFragSpec
             identifier
              ident
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ,
           )
           macroRepOp
            +
          )
        macroMatch
         macroMatcher
          {
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             column_name
            :
            macroFragSpec
             identifier
              ident
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ->
           macroMatch
            $
            identifier
             Type
            :
            macroFragSpec
             identifier
              ty
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ,
           )
           macroRepOp
            +
          }
        macroMatch
         $
         (
         macroMatch
          macroMatchToken
           macroIdentifierLikeToken
            keyword
             use
         macroMatch
          $
          (
          macroMatch
           $
           identifier
            import
           :
           macroFragSpec
            identifier
             tt
          )
          macroRepSep
           macroPunctuationToken
            ::
          macroRepOp
           +
         macroMatch
          macroMatchToken
           macroPunctuationToken
            ;
         )
         macroRepOp
          +
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_body
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               schema_name
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table_name
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               name
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_ty
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   columns
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   pk
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_expr
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   columns
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   pk
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               columns
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             [
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   column_name
                tokenTreeToken
                 macroPunctuationToken
                  ->
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Type
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             ]
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               imports
            tokenTreeToken
             macroPunctuationToken
              =
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     import
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroRepOp
                  +
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroRepOp
                +
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            schema_name
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            table_name
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          table_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            primary_key_ty
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          primary_key_ty
         :
         macroFragSpec
          identifier
           ty
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            primary_key_expr
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          primary_key_expr
         :
         macroFragSpec
          identifier
           expr
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            columns
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         macroMatcher
          [
          macroMatch
           $
           (
           macroMatch
            $
            identifier
             column_name
            :
            macroFragSpec
             identifier
              ident
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ->
           macroMatch
            $
            identifier
             column_ty
            :
            macroFragSpec
             identifier
              ty
           macroMatch
            macroMatchToken
             macroPunctuationToken
              ,
           )
           macroRepOp
            +
          ]
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            imports
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           (
           macroMatch
            $
            (
            macroMatch
             $
             identifier
              import
             :
             macroFragSpec
              identifier
               tt
            )
            macroRepSep
             macroPunctuationToken
              ::
            macroRepOp
             +
           )
           macroRepSep
            macroPunctuationToken
             ,
           macroRepOp
            +
          )
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             pub
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             mod
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_name
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              #
            tokenTreeToken
             macroPunctuationToken
              !
           tokenTree
            delimTokenTree
             [
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 allow
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   dead_code
               )
             ]
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 QuerySource
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Table
              tokenTreeToken
               macroPunctuationToken
                ,
             }
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               associations
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               HasTable
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             $
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 use
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   import
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               macroPunctuationToken
                ;
             )
           tokenTree
            tokenTreeToken
             macroRepOp
              +
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               __diesel_table_query_source_impl
            tokenTreeToken
             macroPunctuationToken
              !
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 schema_name
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table_name
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               impl_query_id
            tokenTreeToken
             macroPunctuationToken
              !
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               pub
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               mod
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               columns
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 use
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 super
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 use
              tokenTreeToken
               macroIdentifierLikeToken
                $crate
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 result
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 QueryResult
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  keyword
                   use
                tokenTreeToken
                 $
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     import
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroRepOp
                  +
                tokenTreeToken
                 macroPunctuationToken
                  ;
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
              tokenTreeToken
               $
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   __diesel_column
                tokenTreeToken
                 macroPunctuationToken
                  !
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     table
                  tokenTreeToken
                   macroPunctuationToken
                    ,
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     column_name
                  tokenTreeToken
                   macroPunctuationToken
                    ->
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     column_ty
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ;
               )
             tokenTree
              tokenTreeToken
               macroRepOp
                +
             }
           }
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     __diesel_table_query_source_impl
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          table_struct
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            public
         macroMatchToken
          macroPunctuationToken
           ,
        macroMatch
         $
         identifier
          table_name
         :
         macroFragSpec
          identifier
           ident
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             QuerySource
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_struct
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Identifier
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               'static
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DefaultSelection
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Table
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               AllColumns
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               from_clause
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 Identifier
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   stringify
                tokenTreeToken
                 macroPunctuationToken
                  !
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   $
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     table_name
                 )
               )
             }
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               default_selection
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DefaultSelection
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 Self
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 all_columns
             tokenTree
              delimTokenTree
               (
               )
             }
           }
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          table_struct
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
        macroMatch
         $
         identifier
          schema_name
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
        macroMatch
         $
         identifier
          table_name
         :
         macroFragSpec
          identifier
           ident
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             QuerySource
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table_struct
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               nodes
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               InfixNode
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               'static
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Identifier
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               'static
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Identifier
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               'static
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DefaultSelection
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Table
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               AllColumns
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               from_clause
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                $crate
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 query_builder
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 nodes
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 InfixNode
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 new
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Identifier
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     stringify
                  tokenTreeToken
                   macroPunctuationToken
                    !
                 tokenTree
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     $
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       schema_name
                   )
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   Identifier
               tokenTree
                delimTokenTree
                 (
                 tokenTree
                  tokenTreeToken
                   macroIdentifierLikeToken
                    identifier
                     stringify
                  tokenTreeToken
                   macroPunctuationToken
                    !
                 tokenTree
                  delimTokenTree
                   (
                   tokenTree
                    tokenTreeToken
                     $
                    tokenTreeToken
                     macroIdentifierLikeToken
                      identifier
                       table_name
                   )
                 )
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroLiteralToken
                  literalExpression
                   "."
                tokenTreeToken
                 macroPunctuationToken
                  ,
               )
             }
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               default_selection
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DefaultSelection
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 Self
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 all_columns
             tokenTree
              delimTokenTree
               (
               )
             }
           }
         }
      ;
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     joinable
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          child
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ->
        macroMatch
         $
         identifier
          parent
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           identifier
            source
           :
           macroFragSpec
            identifier
             ident
          )
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             joinable_inner
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               child
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              =>
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               parent
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              :
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 child
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 source
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 parent
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
             )
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             joinable_inner
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               parent
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              =>
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               child
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              :
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 child
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 source
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 parent
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
             )
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     joinable_inner
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          left_table
         :
         macroFragSpec
          identifier
           path
        macroMatch
         macroMatchToken
          macroPunctuationToken
           =>
        macroMatch
         $
         identifier
          right_table
         :
         macroFragSpec
          identifier
           path
        macroMatch
         macroMatchToken
          macroPunctuationToken
           :
        macroMatch
         macroMatcher
          (
          macroMatch
           $
           identifier
            foreign_key
           :
           macroFragSpec
            identifier
             path
          macroMatch
           macroMatchToken
            macroPunctuationToken
             =
          macroMatch
           $
           identifier
            parent_table
           :
           macroFragSpec
            identifier
             path
          )
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             joinable_inner
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               left_table_ty
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               left_table
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               right_table_ty
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               right_table
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               right_table_expr
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               right_table
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               foreign_key
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               foreign_key
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_ty
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               parent_table
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_source
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Table
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               PrimaryKey
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_expr
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               parent_table
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ,
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
         }
      ;
      macroRule
       macroMatcher
        (
        macroMatch
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            left_table_ty
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          left_table_ty
         :
         macroFragSpec
          identifier
           ty
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            right_table_ty
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          right_table_ty
         :
         macroFragSpec
          identifier
           ty
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            right_table_expr
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          right_table_expr
         :
         macroFragSpec
          identifier
           expr
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            foreign_key
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          foreign_key
         :
         macroFragSpec
          identifier
           path
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            primary_key_ty
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          primary_key_ty
         :
         macroFragSpec
          identifier
           ty
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
         macroMatchToken
          macroIdentifierLikeToken
           identifier
            primary_key_expr
         macroMatchToken
          macroPunctuationToken
           =
        macroMatch
         $
         identifier
          primary_key_expr
         :
         macroFragSpec
          identifier
           expr
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ,
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinType
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            $crate
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinTo
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             right_table_ty
          tokenTreeToken
           macroPunctuationToken
            ,
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinType
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             left_table_ty
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinClause
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               nodes
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Join
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               left_table_ty
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               QuerySource
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               right_table_ty
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               QuerySource
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               FromClause
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               expression
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               helper_types
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Eq
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               expression
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               nullable
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Nullable
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               foreign_key
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               expression
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               nullable
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Nullable
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               primary_key_ty
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinType
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ;
           }
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       doc
    attrInput
     delimTokenTree
      (
      tokenTree
       tokenTreeToken
        macroIdentifierLikeToken
         identifier
          hidden
      )
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     join_through
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          parent
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ->
        macroMatch
         $
         identifier
          through
         :
         macroFragSpec
          identifier
           ident
        macroMatch
         macroMatchToken
          macroPunctuationToken
           ->
        macroMatch
         $
         identifier
          child
         :
         macroFragSpec
          identifier
           ident
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             impl
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinType
          tokenTreeToken
           macroPunctuationToken
            :
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             Copy
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            $crate
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinTo
          tokenTreeToken
           macroPunctuationToken
            <
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             child
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
          tokenTreeToken
           macroPunctuationToken
            ,
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             JoinType
          tokenTreeToken
           macroPunctuationToken
            >
          tokenTreeToken
           macroIdentifierLikeToken
            keyword
             for
          tokenTreeToken
           $
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             parent
          tokenTreeToken
           macroPunctuationToken
            ::
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             table
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               type
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinClause
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               parent
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinTo
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               through
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinType
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinClause
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               nodes
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               CombinedJoin
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               through
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               as
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinTo
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             $
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               child
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               table
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinType
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinClause
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Output
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               fn
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               join_clause
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 self
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 join_type
              tokenTreeToken
               macroPunctuationToken
                :
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JoinType
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ->
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               Self
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               JoinClause
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 use
              tokenTreeToken
               macroIdentifierLikeToken
                $crate
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 query_builder
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 nodes
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 CombinedJoin
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 let
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 parent_to_through
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               macroIdentifierLikeToken
                $crate
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JoinTo
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroPunctuationToken
                <
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 through
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JoinType
              tokenTreeToken
               macroPunctuationToken
                >
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 join_clause
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  &
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   parent
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   table
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   join_type
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 let
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 through_to_child
              tokenTreeToken
               macroPunctuationToken
                =
              tokenTreeToken
               macroIdentifierLikeToken
                $crate
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JoinTo
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroPunctuationToken
                <
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 child
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 table
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 JoinType
              tokenTreeToken
               macroPunctuationToken
                >
              tokenTreeToken
               macroPunctuationToken
                ::
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 join_clause
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroPunctuationToken
                  &
                tokenTreeToken
                 $
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   through
                tokenTreeToken
                 macroPunctuationToken
                  ::
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   table
                tokenTreeToken
                 macroPunctuationToken
                  ,
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   join_type
               )
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                ;
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 parent_to_through
              tokenTreeToken
               macroPunctuationToken
                .
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 combine_with
             tokenTree
              delimTokenTree
               (
               tokenTree
                tokenTreeToken
                 macroIdentifierLikeToken
                  identifier
                   through_to_child
               )
             }
           }
         }
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     debug_sql
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          query
         :
         macroFragSpec
          identifier
           expr
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          delimTokenTree
           {
           tokenTree
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
           tokenTree
            delimTokenTree
             {
             tokenTree
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 QueryFragment
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 QueryBuilder
             }
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               use
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               debug
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DebugQueryBuilder
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               let
            tokenTreeToken
             macroIdentifierLikeToken
              keyword
               mut
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              =
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               DebugQueryBuilder
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               new
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               QueryFragment
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroPunctuationToken
              <
            tokenTreeToken
             macroIdentifierLikeToken
              $crate
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               backend
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               Debug
            tokenTreeToken
             macroPunctuationToken
              >
            tokenTreeToken
             macroPunctuationToken
              ::
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               to_sql
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 query
              tokenTreeToken
               macroPunctuationToken
                ,
              tokenTreeToken
               macroPunctuationToken
                &
              tokenTreeToken
               macroIdentifierLikeToken
                keyword
                 mut
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 query_builder
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               unwrap
           tokenTree
            delimTokenTree
             (
             )
           tokenTree
            tokenTreeToken
             macroPunctuationToken
              ;
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               query_builder
            tokenTreeToken
             macroPunctuationToken
              .
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               finish
           tokenTree
            delimTokenTree
             (
             )
           }
         }
      ;
     }
 item
  outerAttribute
   #
   [
   attr
    simplePath
     simplePathSegment
      identifier
       macro_export
   ]
  macroItem
   macroRulesDefinition
    macro_rules
    !
    identifier
     print_sql
    macroRulesDef
     {
     macroRules
      macroRule
       macroMatcher
        (
        macroMatch
         $
         identifier
          query
         :
         macroFragSpec
          identifier
           expr
        )
       =>
       macroTranscriber
        delimTokenTree
         {
         tokenTree
          tokenTreeToken
           macroIdentifierLikeToken
            identifier
             println
          tokenTreeToken
           macroPunctuationToken
            !
         tokenTree
          delimTokenTree
           (
           tokenTree
            tokenTreeToken
             macroLiteralToken
              literalExpression
               "{}"
            tokenTreeToken
             macroPunctuationToken
              ,
            tokenTreeToken
             macroPunctuationToken
              &
            tokenTreeToken
             macroIdentifierLikeToken
              identifier
               debug_sql
            tokenTreeToken
             macroPunctuationToken
              !
           tokenTree
            delimTokenTree
             (
             tokenTree
              tokenTreeToken
               $
              tokenTreeToken
               macroIdentifierLikeToken
                identifier
                 query
             )
           )
         tokenTree
          tokenTreeToken
           macroPunctuationToken
            ;
         }
      ;
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       expressionStatement
        expressionWithBlock
         blockExpression
          {
          statements
           statement
            expressionStatement
             expressionWithBlock
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expressionWithBlock
                   blockExpression
                    {
                    statements
                     statement
                      expressionStatement
                       expressionWithBlock
                        blockExpression
                         {
                         statements
                          statement
                           expressionStatement
                            expressionWithBlock
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expressionWithBlock
                                  blockExpression
                                   {
                                   statements
                                    statement
                                     expressionStatement
                                      expressionWithBlock
                                       blockExpression
                                        {
                                        statements
                                         statement
                                          expressionStatement
                                           expressionWithBlock
                                            blockExpression
                                             {
                                             statements
                                              statement
                                               expressionStatement
                                                expressionWithBlock
                                                 blockExpression
                                                  {
                                                  statements
                                                   statement
                                                    expressionStatement
                                                     expressionWithBlock
                                                      blockExpression
                                                       {
                                                       statements
                                                        statement
                                                         expressionStatement
                                                          expressionWithBlock
                                                           blockExpression
                                                            {
                                                            statements
                                                             statement
                                                              expressionStatement
                                                               expressionWithBlock
                                                                blockExpression
                                                                 {
                                                                 statements
                                                                  statement
                                                                   expressionStatement
                                                                    expressionWithBlock
                                                                     blockExpression
                                                                      {
                                                                      statements
                                                                       statement
                                                                        expressionStatement
                                                                         expressionWithBlock
                                                                          blockExpression
                                                                           {
                                                                           statements
                                                                            statement
                                                                             expressionStatement
                                                                              expressionWithBlock
                                                                               blockExpression
                                                                                {
                                                                                statements
                                                                                 statement
                                                                                  expressionStatement
                                                                                   expressionWithBlock
                                                                                    blockExpression
                                                                                     {
                                                                                     statements
                                                                                      statement
                                                                                       expressionStatement
                                                                                        expressionWithBlock
                                                                                         blockExpression
                                                                                          {
                                                                                          statements
                                                                                           statement
                                                                                            expressionStatement
                                                                                             expressionWithBlock
                                                                                              blockExpression
                                                                                               {
                                                                                               statements
                                                                                                statement
                                                                                                 expressionStatement
                                                                                                  expressionWithBlock
                                                                                                   blockExpression
                                                                                                    {
                                                                                                    statements
                                                                                                     statement
                                                                                                      expressionStatement
                                                                                                       expressionWithBlock
                                                                                                        blockExpression
                                                                                                         {
                                                                                                         statements
                                                                                                          statement
                                                                                                           expressionStatement
                                                                                                            expressionWithBlock
                                                                                                             blockExpression
                                                                                                              {
                                                                                                              statements
                                                                                                               statement
                                                                                                                expressionStatement
                                                                                                                 expressionWithBlock
                                                                                                                  blockExpression
                                                                                                                   {
                                                                                                                   statements
                                                                                                                    statement
                                                                                                                     expressionStatement
                                                                                                                      expressionWithBlock
                                                                                                                       blockExpression
                                                                                                                        {
                                                                                                                        statements
                                                                                                                         statement
                                                                                                                          expressionStatement
                                                                                                                           expressionWithBlock
                                                                                                                            blockExpression
                                                                                                                             {
                                                                                                                             statements
                                                                                                                              statement
                                                                                                                               expressionStatement
                                                                                                                                expressionWithBlock
                                                                                                                                 blockExpression
                                                                                                                                  {
                                                                                                                                  statements
                                                                                                                                   statement
                                                                                                                                    expressionStatement
                                                                                                                                     expressionWithBlock
                                                                                                                                      blockExpression
                                                                                                                                       {
                                                                                                                                       statements
                                                                                                                                        statement
                                                                                                                                         expressionStatement
                                                                                                                                          expressionWithBlock
                                                                                                                                           blockExpression
                                                                                                                                            {
                                                                                                                                            statements
                                                                                                                                             statement
                                                                                                                                              expressionStatement
                                                                                                                                               expressionWithBlock
                                                                                                                                                blockExpression
                                                                                                                                                 {
                                                                                                                                                 statements
                                                                                                                                                  statement
                                                                                                                                                   expressionStatement
                                                                                                                                                    expressionWithBlock
                                                                                                                                                     blockExpression
                                                                                                                                                      {
                                                                                                                                                      statements
                                                                                                                                                       statement
                                                                                                                                                        expressionStatement
                                                                                                                                                         expressionWithBlock
                                                                                                                                                          blockExpression
                                                                                                                                                           {
                                                                                                                                                           statements
                                                                                                                                                            statement
                                                                                                                                                             expressionStatement
                                                                                                                                                              expressionWithBlock
                                                                                                                                                               blockExpression
                                                                                                                                                                {
                                                                                                                                                                statements
                                                                                                                                                                 statement
                                                                                                                                                                  expressionStatement
                                                                                                                                                                   expressionWithBlock
                                                                                                                                                                    blockExpression
                                                                                                                                                                     {
                                                                                                                                                                     statements
                                                                                                                                                                      statement
                                                                                                                                                                       expressionStatement
                                                                                                                                                                        expressionWithBlock
                                                                                                                                                                         blockExpression
                                                                                                                                                                          {
                                                                                                                                                                          statements
                                                                                                                                                                           statement
                                                                                                                                                                            expressionStatement
                                                                                                                                                                             expressionWithBlock
                                                                                                                                                                              blockExpression
                                                                                                                                                                               {
                                                                                                                                                                               statements
                                                                                                                                                                                statement
                                                                                                                                                                                 expressionStatement
                                                                                                                                                                                  expressionWithBlock
                                                                                                                                                                                   blockExpression
                                                                                                                                                                                    {
                                                                                                                                                                                    statements
                                                                                                                                                                                     statement
                                                                                                                                                                                      expressionStatement
                                                                                                                                                                                       expressionWithBlock
                                                                                                                                                                                        blockExpression
                                                                                                                                                                                         {
                                                                                                                                                                                         statements
                                                                                                                                                                                          statement
                                                                                                                                                                                           expressionStatement
                                                                                                                                                                                            expressionWithBlock
                                                                                                                                                                                             blockExpression
                                                                                                                                                                                              {
                                                                                                                                                                                              statements
                                                                                                                                                                                               statement
                                                                                                                                                                                                expressionStatement
                                                                                                                                                                                                 expressionWithBlock
                                                                                                                                                                                                  blockExpression
                                                                                                                                                                                                   {
                                                                                                                                                                                                   statements
                                                                                                                                                                                                    statement
                                                                                                                                                                                                     expressionStatement
                                                                                                                                                                                                      expressionWithBlock
                                                                                                                                                                                                       blockExpression
                                                                                                                                                                                                        {
                                                                                                                                                                                                        statements
                                                                                                                                                                                                         statement
                                                                                                                                                                                                          expressionStatement
                                                                                                                                                                                                           expressionWithBlock
                                                                                                                                                                                                            blockExpression
                                                                                                                                                                                                             {
                                                                                                                                                                                                             statements
                                                                                                                                                                                                              statement
                                                                                                                                                                                                               expressionStatement
                                                                                                                                                                                                                expressionWithBlock
                                                                                                                                                                                                                 blockExpression
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                  statements
                                                                                                                                                                                                                   statement
                                                                                                                                                                                                                    expressionStatement
                                                                                                                                                                                                                     expressionWithBlock
                                                                                                                                                                                                                      blockExpression
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       statements
                                                                                                                                                                                                                        statement
                                                                                                                                                                                                                         expressionStatement
                                                                                                                                                                                                                          expressionWithBlock
                                                                                                                                                                                                                           blockExpression
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            statements
                                                                                                                                                                                                                             statement
                                                                                                                                                                                                                              expressionStatement
                                                                                                                                                                                                                               expressionWithBlock
                                                                                                                                                                                                                                blockExpression
                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                 statements
                                                                                                                                                                                                                                  statement
                                                                                                                                                                                                                                   expressionStatement
                                                                                                                                                                                                                                    expressionWithBlock
                                                                                                                                                                                                                                     blockExpression
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                      statements
                                                                                                                                                                                                                                       statement
                                                                                                                                                                                                                                        expressionStatement
                                                                                                                                                                                                                                         expressionWithBlock
                                                                                                                                                                                                                                          blockExpression
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           statements
                                                                                                                                                                                                                                            statement
                                                                                                                                                                                                                                             expressionStatement
                                                                                                                                                                                                                                              expressionWithBlock
                                                                                                                                                                                                                                               blockExpression
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                statements
                                                                                                                                                                                                                                                 statement
                                                                                                                                                                                                                                                  expressionStatement
                                                                                                                                                                                                                                                   expressionWithBlock
                                                                                                                                                                                                                                                    blockExpression
                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                     statements
                                                                                                                                                                                                                                                      statement
                                                                                                                                                                                                                                                       expressionStatement
                                                                                                                                                                                                                                                        expressionWithBlock
                                                                                                                                                                                                                                                         blockExpression
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                          statements
                                                                                                                                                                                                                                                           statement
                                                                                                                                                                                                                                                            expressionStatement
                                                                                                                                                                                                                                                             expressionWithBlock
                                                                                                                                                                                                                                                              blockExpression
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               statements
                                                                                                                                                                                                                                                                statement
                                                                                                                                                                                                                                                                 expressionStatement
                                                                                                                                                                                                                                                                  expressionWithBlock
                                                                                                                                                                                                                                                                   blockExpression
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                    statements
                                                                                                                                                                                                                                                                     statement
                                                                                                                                                                                                                                                                      expressionStatement
                                                                                                                                                                                                                                                                       expressionWithBlock
                                                                                                                                                                                                                                                                        blockExpression
                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                         statements
                                                                                                                                                                                                                                                                          statement
                                                                                                                                                                                                                                                                           expressionStatement
                                                                                                                                                                                                                                                                            expressionWithBlock
                                                                                                                                                                                                                                                                             blockExpression
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                              statements
                                                                                                                                                                                                                                                                               statement
                                                                                                                                                                                                                                                                                expressionStatement
                                                                                                                                                                                                                                                                                 expressionWithBlock
                                                                                                                                                                                                                                                                                  blockExpression
                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                   statements
                                                                                                                                                                                                                                                                                    statement
                                                                                                                                                                                                                                                                                     expressionStatement
                                                                                                                                                                                                                                                                                      expressionWithBlock
                                                                                                                                                                                                                                                                                       blockExpression
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                        statements
                                                                                                                                                                                                                                                                                         statement
                                                                                                                                                                                                                                                                                          expressionStatement
                                                                                                                                                                                                                                                                                           expressionWithBlock
                                                                                                                                                                                                                                                                                            blockExpression
                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                             statements
                                                                                                                                                                                                                                                                                              statement
                                                                                                                                                                                                                                                                                               expressionStatement
                                                                                                                                                                                                                                                                                                expressionWithBlock
                                                                                                                                                                                                                                                                                                 blockExpression
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                  statements
                                                                                                                                                                                                                                                                                                   statement
                                                                                                                                                                                                                                                                                                    expressionStatement
                                                                                                                                                                                                                                                                                                     expressionWithBlock
                                                                                                                                                                                                                                                                                                      blockExpression
                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                       statements
                                                                                                                                                                                                                                                                                                        statement
                                                                                                                                                                                                                                                                                                         expressionStatement
                                                                                                                                                                                                                                                                                                          expressionWithBlock
                                                                                                                                                                                                                                                                                                           blockExpression
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                            statements
                                                                                                                                                                                                                                                                                                             statement
                                                                                                                                                                                                                                                                                                              expressionStatement
                                                                                                                                                                                                                                                                                                               expressionWithBlock
                                                                                                                                                                                                                                                                                                                blockExpression
                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                 statements
                                                                                                                                                                                                                                                                                                                  statement
                                                                                                                                                                                                                                                                                                                   expressionStatement
                                                                                                                                                                                                                                                                                                                    expressionWithBlock
                                                                                                                                                                                                                                                                                                                     blockExpression
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                      statements
                                                                                                                                                                                                                                                                                                                       statement
                                                                                                                                                                                                                                                                                                                        expressionStatement
                                                                                                                                                                                                                                                                                                                         expressionWithBlock
                                                                                                                                                                                                                                                                                                                          blockExpression
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                           statements
                                                                                                                                                                                                                                                                                                                            statement
                                                                                                                                                                                                                                                                                                                             expressionStatement
                                                                                                                                                                                                                                                                                                                              expressionWithBlock
                                                                                                                                                                                                                                                                                                                               blockExpression
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                statements
                                                                                                                                                                                                                                                                                                                                 statement
                                                                                                                                                                                                                                                                                                                                  expressionStatement
                                                                                                                                                                                                                                                                                                                                   expressionWithBlock
                                                                                                                                                                                                                                                                                                                                    blockExpression
                                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                                     statements
                                                                                                                                                                                                                                                                                                                                      statement
                                                                                                                                                                                                                                                                                                                                       expressionStatement
                                                                                                                                                                                                                                                                                                                                        expressionWithBlock
                                                                                                                                                                                                                                                                                                                                         blockExpression
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                          statements
                                                                                                                                                                                                                                                                                                                                           statement
                                                                                                                                                                                                                                                                                                                                            expressionStatement
                                                                                                                                                                                                                                                                                                                                             expressionWithBlock
                                                                                                                                                                                                                                                                                                                                              blockExpression
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                               statements
                                                                                                                                                                                                                                                                                                                                                statement
                                                                                                                                                                                                                                                                                                                                                 expressionStatement
                                                                                                                                                                                                                                                                                                                                                  expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                   blockExpression
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    statements
                                                                                                                                                                                                                                                                                                                                                     statement
                                                                                                                                                                                                                                                                                                                                                      expressionStatement
                                                                                                                                                                                                                                                                                                                                                       expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                        blockExpression
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                         statements
                                                                                                                                                                                                                                                                                                                                                          statement
                                                                                                                                                                                                                                                                                                                                                           expressionStatement
                                                                                                                                                                                                                                                                                                                                                            expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                             blockExpression
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                              statements
                                                                                                                                                                                                                                                                                                                                                               statement
                                                                                                                                                                                                                                                                                                                                                                expressionStatement
                                                                                                                                                                                                                                                                                                                                                                 expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                  blockExpression
                                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                                   statements
                                                                                                                                                                                                                                                                                                                                                                    statement
                                                                                                                                                                                                                                                                                                                                                                     expressionStatement
                                                                                                                                                                                                                                                                                                                                                                      expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                       blockExpression
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                        statements
                                                                                                                                                                                                                                                                                                                                                                         statement
                                                                                                                                                                                                                                                                                                                                                                          expressionStatement
                                                                                                                                                                                                                                                                                                                                                                           expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                            blockExpression
                                                                                                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                                                                                                             statements
                                                                                                                                                                                                                                                                                                                                                                              statement
                                                                                                                                                                                                                                                                                                                                                                               expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                 blockExpression
                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                  statements
                                                                                                                                                                                                                                                                                                                                                                                   statement
                                                                                                                                                                                                                                                                                                                                                                                    expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                     expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                      blockExpression
                                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                                       statements
                                                                                                                                                                                                                                                                                                                                                                                        statement
                                                                                                                                                                                                                                                                                                                                                                                         expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                          expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                           blockExpression
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                            statements
                                                                                                                                                                                                                                                                                                                                                                                             statement
                                                                                                                                                                                                                                                                                                                                                                                              expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                               expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                                blockExpression
                                                                                                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                                                                                                 statements
                                                                                                                                                                                                                                                                                                                                                                                                  statement
                                                                                                                                                                                                                                                                                                                                                                                                   expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                                    expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                                     blockExpression
                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                      statements
                                                                                                                                                                                                                                                                                                                                                                                                       statement
                                                                                                                                                                                                                                                                                                                                                                                                        expressionStatement
                                                                                                                                                                                                                                                                                                                                                                                                         expressionWithBlock
                                                                                                                                                                                                                                                                                                                                                                                                          blockExpression
                                                                                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                                                                                           statements
                                                                                                                                                                                                                                                                                                                                                                                                            expression
                                                                                                                                                                                                                                                                                                                                                                                                             (
                                                                                                                                                                                                                                                                                                                                                                                                             )
                                                                                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                             }
                                                                                                                                                                                                        }
                                                                                                                                                                                                   }
                                                                                                                                                                                              }
                                                                                                                                                                                         }
                                                                                                                                                                                    }
                                                                                                                                                                               }
                                                                                                                                                                          }
                                                                                                                                                                     }
                                                                                                                                                                }
                                                                                                                                                           }
                                                                                                                                                      }
                                                                                                                                                 }
                                                                                                                                            }
                                                                                                                                       }
                                                                                                                                  }
                                                                                                                             }
                                                                                                                        }
                                                                                                                   }
                                                                                                              }
                                                                                                         }
                                                                                                    }
                                                                                               }
                                                                                          }
                                                                                     }
                                                                                }
                                                                           }
                                                                      }
                                                                 }
                                                            }
                                                       }
                                                  }
                                             }
                                        }
                                   }
                              }
                         }
                    }
               }
          }
     }
 item
  visItem
   visibility
    pub
   typeAlias
    type
    identifier
     T
    =
    type_
     typeNoBounds
      traitObjectTypeOneBound
       traitBound
        typePath
         typePathSegment
          pathIdentSegment
           identifier
            A
          genericArgs
           <
           genericArgsTypes
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    A
                  genericArgs
                   <
                   genericArgsTypes
                    type_
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           identifier
                            A
                          genericArgs
                           <
                           genericArgsTypes
                            type_
                             typeNoBounds
                              traitObjectTypeOneBound
                               traitBound
                                typePath
                                 typePathSegment
                                  pathIdentSegment
                                   identifier
                                    A
                                  genericArgs
                                   <
                                   genericArgsTypes
                                    type_
                                     typeNoBounds
                                      traitObjectTypeOneBound
                                       traitBound
                                        typePath
                                         typePathSegment
                                          pathIdentSegment
                                           identifier
                                            A
                                          genericArgs
                                           <
                                           genericArgsTypes
                                            type_
                                             typeNoBounds
                                              traitObjectTypeOneBound
                                               traitBound
                                                typePath
                                                 typePathSegment
                                                  pathIdentSegment
                                                   identifier
                                                    A
                                                  genericArgs
                                                   <
                                                   genericArgsTypes
                                                    type_
                                                     typeNoBounds
                                                      traitObjectTypeOneBound
                                                       traitBound
                                                        typePath
                                                         typePathSegment
                                                          pathIdentSegment
                                                           identifier
                                                            A
                                                          genericArgs
                                                           <
                                                           genericArgsTypes
                                                            type_
                                                             typeNoBounds
                                                              traitObjectTypeOneBound
                                                               traitBound
                                                                typePath
                                                                 typePathSegment
                                                                  pathIdentSegment
                                                                   identifier
                                                                    A
                                                                  genericArgs
                                                                   <
                                                                   genericArgsTypes
                                                                    type_
                                                                     typeNoBounds
                                                                      traitObjectTypeOneBound
                                                                       traitBound
                                                                        typePath
                                                                         typePathSegment
                                                                          pathIdentSegment
                                                                           identifier
                                                                            A
                                                                          genericArgs
                                                                           <
                                                                           genericArgsTypes
                                                                            type_
                                                                             typeNoBounds
                                                                              traitObjectTypeOneBound
                                                                               traitBound
                                                                                typePath
                                                                                 typePathSegment
                                                                                  pathIdentSegment
                                                                                   identifier
                                                                                    A
                                                                                  genericArgs
                                                                                   <
                                                                                   genericArgsTypes
                                                                                    type_
                                                                                     typeNoBounds
                                                                                      traitObjectTypeOneBound
                                                                                       traitBound
                                                                                        typePath
                                                                                         typePathSegment
                                                                                          pathIdentSegment
                                                                                           identifier
                                                                                            A
                                                                                          genericArgs
                                                                                           <
                                                                                           genericArgsTypes
                                                                                            type_
                                                                                             typeNoBounds
                                                                                              traitObjectTypeOneBound
                                                                                               traitBound
                                                                                                typePath
                                                                                                 typePathSegment
                                                                                                  pathIdentSegment
                                                                                                   identifier
                                                                                                    A
                                                                                                  genericArgs
                                                                                                   <
                                                                                                   genericArgsTypes
                                                                                                    type_
                                                                                                     typeNoBounds
                                                                                                      traitObjectTypeOneBound
                                                                                                       traitBound
                                                                                                        typePath
                                                                                                         typePathSegment
                                                                                                          pathIdentSegment
                                                                                                           identifier
                                                                                                            A
                                                                                                          genericArgs
                                                                                                           <
                                                                                                           genericArgsTypes
                                                                                                            type_
                                                                                                             typeNoBounds
                                                                                                              traitObjectTypeOneBound
                                                                                                               traitBound
                                                                                                                typePath
                                                                                                                 typePathSegment
                                                                                                                  pathIdentSegment
                                                                                                                   identifier
                                                                                                                    A
                                                                                                                  genericArgs
                                                                                                                   <
                                                                                                                   genericArgsTypes
                                                                                                                    type_
                                                                                                                     typeNoBounds
                                                                                                                      traitObjectTypeOneBound
                                                                                                                       traitBound
                                                                                                                        typePath
                                                                                                                         typePathSegment
                                                                                                                          pathIdentSegment
                                                                                                                           identifier
                                                                                                                            A
                                                                                                                          genericArgs
                                                                                                                           <
                                                                                                                           genericArgsTypes
                                                                                                                            type_
                                                                                                                             typeNoBounds
                                                                                                                              traitObjectTypeOneBound
                                                                                                                               traitBound
                                                                                                                                typePath
                                                                                                                                 typePathSegment
                                                                                                                                  pathIdentSegment
                                                                                                                                   identifier
                                                                                                                                    A
                                                                                                                                  genericArgs
                                                                                                                                   <
                                                                                                                                   genericArgsTypes
                                                                                                                                    type_
                                                                                                                                     typeNoBounds
                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                       traitBound
                                                                                                                                        typePath
                                                                                                                                         typePathSegment
                                                                                                                                          pathIdentSegment
                                                                                                                                           identifier
                                                                                                                                            A
                                                                                                                                          genericArgs
                                                                                                                                           <
                                                                                                                                           genericArgsTypes
                                                                                                                                            type_
                                                                                                                                             typeNoBounds
                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                               traitBound
                                                                                                                                                typePath
                                                                                                                                                 typePathSegment
                                                                                                                                                  pathIdentSegment
                                                                                                                                                   identifier
                                                                                                                                                    A
                                                                                                                                                  genericArgs
                                                                                                                                                   <
                                                                                                                                                   genericArgsTypes
                                                                                                                                                    type_
                                                                                                                                                     typeNoBounds
                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                       traitBound
                                                                                                                                                        typePath
                                                                                                                                                         typePathSegment
                                                                                                                                                          pathIdentSegment
                                                                                                                                                           identifier
                                                                                                                                                            A
                                                                                                                                                          genericArgs
                                                                                                                                                           <
                                                                                                                                                           genericArgsTypes
                                                                                                                                                            type_
                                                                                                                                                             typeNoBounds
                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                               traitBound
                                                                                                                                                                typePath
                                                                                                                                                                 typePathSegment
                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                   identifier
                                                                                                                                                                    A
                                                                                                                                                                  genericArgs
                                                                                                                                                                   <
                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                    type_
                                                                                                                                                                     typeNoBounds
                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                       traitBound
                                                                                                                                                                        typePath
                                                                                                                                                                         typePathSegment
                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                           identifier
                                                                                                                                                                            A
                                                                                                                                                                          genericArgs
                                                                                                                                                                           <
                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                            type_
                                                                                                                                                                             typeNoBounds
                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                               traitBound
                                                                                                                                                                                typePath
                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                   identifier
                                                                                                                                                                                    A
                                                                                                                                                                                  genericArgs
                                                                                                                                                                                   <
                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                    type_
                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                       traitBound
                                                                                                                                                                                        typePath
                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                           identifier
                                                                                                                                                                                            A
                                                                                                                                                                                          genericArgs
                                                                                                                                                                                           <
                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                            type_
                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                               traitBound
                                                                                                                                                                                                typePath
                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                   identifier
                                                                                                                                                                                                    A
                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                   <
                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                    type_
                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                        typePath
                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                           identifier
                                                                                                                                                                                                            A
                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                           <
                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                            type_
                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                    A
                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                   <
                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                            A
                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                           <
                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                                                                                            A
                                                                                                                                                                                                                                                                                                                                          genericArgs
                                                                                                                                                                                                                                                                                                                                           <
                                                                                                                                                                                                                                                                                                                                           genericArgsTypes
                                                                                                                                                                                                                                                                                                                                            type_
                                                                                                                                                                                                                                                                                                                                             typeNoBounds
                                                                                                                                                                                                                                                                                                                                              traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                                                               traitBound
                                                                                                                                                                                                                                                                                                                                                typePath
                                                                                                                                                                                                                                                                                                                                                 typePathSegment
                                                                                                                                                                                                                                                                                                                                                  pathIdentSegment
                                                                                                                                                                                                                                                                                                                                                   identifier
                                                                                                                                                                                                                                                                                                                                                    A
                                                                                                                                                                                                                                                                                                                                                  genericArgs
                                                                                                                                                                                                                                                                                                                                                   <
                                                                                                                                                                                                                                                                                                                                                   genericArgsTypes
                                                                                                                                                                                                                                                                                                                                                    type_
                                                                                                                                                                                                                                                                                                                                                     typeNoBounds
                                                                                                                                                                                                                                                                                                                                                      traitObjectTypeOneBound
                                                                                                                                                                                                                                                                                                                                                       traitBound
                                                                                                                                                                                                                                                                                                                                                        typePath
                                                                                                                                                                                                                                                                                                                                                         typePathSegment
                                                                                                                                                                                                                                                                                                                                                          pathIdentSegment
                                                                                                                                                                                                                                                                                                                                                           identifier
                                                                                                                                                                                                                                                                                                                                                            B
                                                                                                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                                           >
                                                                                                                                                                                                                                   >
                                                                                                                                                                                                                           >
                                                                                                                                                                                                                   >
                                                                                                                                                                                                           >
                                                                                                                                                                                                   >
                                                                                                                                                                                           >
                                                                                                                                                                                   >
                                                                                                                                                                           >
                                                                                                                                                                   >
                                                                                                                                                           >
                                                                                                                                                   >
                                                                                                                                           >
                                                                                                                                   >
                                                                                                                           >
                                                                                                                   >
                                                                                                           >
                                                                                                   >
                                                                                           >
                                                                                   >
                                                                           >
                                                                   >
                                                           >
                                                   >
                                           >
                                   >
                           >
                   >
           >
    ;
 item
  visItem
   staticItem
    static
    identifier
     i
    :
    type_
     typeNoBounds
      tupleType
       (
       )
    =
    expression
     (
     expression
      (
      expression
       (
       expression
        (
        expression
         (
         expression
          (
          expression
           (
           expression
            (
            expression
             (
             expression
              (
              expression
               (
               expression
                (
                expression
                 (
                 expression
                  (
                  expression
                   (
                   expression
                    (
                    expression
                     (
                     expression
                      (
                      expression
                       (
                       expression
                        (
                        expression
                         (
                         expression
                          (
                          expression
                           (
                           expression
                            (
                            expression
                             (
                             expression
                              (
                              expression
                               (
                               expression
                                (
                                expression
                                 (
                                 expression
                                  (
                                  expression
                                   (
                                   expression
                                    (
                                    expression
                                     (
                                     expression
                                      (
                                      expression
                                       (
                                       expression
                                        (
                                        expression
                                         (
                                         expression
                                          (
                                          expression
                                           (
                                           expression
                                            (
                                            expression
                                             (
                                             expression
                                              (
                                              expression
                                               (
                                               expression
                                                (
                                                expression
                                                 (
                                                 expression
                                                  (
                                                  expression
                                                   (
                                                   expression
                                                    (
                                                    expression
                                                     (
                                                     expression
                                                      (
                                                      expression
                                                       (
                                                       expression
                                                        (
                                                        expression
                                                         (
                                                         expression
                                                          (
                                                          expression
                                                           (
                                                           expression
                                                            (
                                                            expression
                                                             (
                                                             expression
                                                              (
                                                              expression
                                                               (
                                                               expression
                                                                (
                                                                )
                                                               )
                                                              )
                                                             )
                                                            )
                                                           )
                                                          )
                                                         )
                                                        )
                                                       )
                                                      )
                                                     )
                                                    )
                                                   )
                                                  )
                                                 )
                                                )
                                               )
                                              )
                                             )
                                            )
                                           )
                                          )
                                         )
                                        )
                                       )
                                      )
                                     )
                                    )
                                   )
                                  )
                                 )
                                )
                               )
                              )
                             )
                            )
                           )
                          )
                         )
                        )
                       )
                      )
                     )
                    )
                   )
                  )
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
    ;
 item
  visItem
   staticItem
    static
    identifier
     j
    :
    type_
     typeNoBounds
      parenthesizedType
       (
       type_
        typeNoBounds
         parenthesizedType
          (
          type_
           typeNoBounds
            parenthesizedType
             (
             type_
              typeNoBounds
               parenthesizedType
                (
                type_
                 typeNoBounds
                  parenthesizedType
                   (
                   type_
                    typeNoBounds
                     parenthesizedType
                      (
                      type_
                       typeNoBounds
                        parenthesizedType
                         (
                         type_
                          typeNoBounds
                           parenthesizedType
                            (
                            type_
                             typeNoBounds
                              parenthesizedType
                               (
                               type_
                                typeNoBounds
                                 parenthesizedType
                                  (
                                  type_
                                   typeNoBounds
                                    parenthesizedType
                                     (
                                     type_
                                      typeNoBounds
                                       parenthesizedType
                                        (
                                        type_
                                         typeNoBounds
                                          parenthesizedType
                                           (
                                           type_
                                            typeNoBounds
                                             parenthesizedType
                                              (
                                              type_
                                               typeNoBounds
                                                parenthesizedType
                                                 (
                                                 type_
                                                  typeNoBounds
                                                   parenthesizedType
                                                    (
                                                    type_
                                                     typeNoBounds
                                                      parenthesizedType
                                                       (
                                                       type_
                                                        typeNoBounds
                                                         parenthesizedType
                                                          (
                                                          type_
                                                           typeNoBounds
                                                            parenthesizedType
                                                             (
                                                             type_
                                                              typeNoBounds
                                                               parenthesizedType
                                                                (
                                                                type_
                                                                 typeNoBounds
                                                                  parenthesizedType
                                                                   (
                                                                   type_
                                                                    typeNoBounds
                                                                     parenthesizedType
                                                                      (
                                                                      type_
                                                                       typeNoBounds
                                                                        parenthesizedType
                                                                         (
                                                                         type_
                                                                          typeNoBounds
                                                                           parenthesizedType
                                                                            (
                                                                            type_
                                                                             typeNoBounds
                                                                              parenthesizedType
                                                                               (
                                                                               type_
                                                                                typeNoBounds
                                                                                 parenthesizedType
                                                                                  (
                                                                                  type_
                                                                                   typeNoBounds
                                                                                    parenthesizedType
                                                                                     (
                                                                                     type_
                                                                                      typeNoBounds
                                                                                       parenthesizedType
                                                                                        (
                                                                                        type_
                                                                                         typeNoBounds
                                                                                          parenthesizedType
                                                                                           (
                                                                                           type_
                                                                                            typeNoBounds
                                                                                             parenthesizedType
                                                                                              (
                                                                                              type_
                                                                                               typeNoBounds
                                                                                                parenthesizedType
                                                                                                 (
                                                                                                 type_
                                                                                                  typeNoBounds
                                                                                                   parenthesizedType
                                                                                                    (
                                                                                                    type_
                                                                                                     typeNoBounds
                                                                                                      parenthesizedType
                                                                                                       (
                                                                                                       type_
                                                                                                        typeNoBounds
                                                                                                         parenthesizedType
                                                                                                          (
                                                                                                          type_
                                                                                                           typeNoBounds
                                                                                                            parenthesizedType
                                                                                                             (
                                                                                                             type_
                                                                                                              typeNoBounds
                                                                                                               parenthesizedType
                                                                                                                (
                                                                                                                type_
                                                                                                                 typeNoBounds
                                                                                                                  parenthesizedType
                                                                                                                   (
                                                                                                                   type_
                                                                                                                    typeNoBounds
                                                                                                                     parenthesizedType
                                                                                                                      (
                                                                                                                      type_
                                                                                                                       typeNoBounds
                                                                                                                        parenthesizedType
                                                                                                                         (
                                                                                                                         type_
                                                                                                                          typeNoBounds
                                                                                                                           parenthesizedType
                                                                                                                            (
                                                                                                                            type_
                                                                                                                             typeNoBounds
                                                                                                                              parenthesizedType
                                                                                                                               (
                                                                                                                               type_
                                                                                                                                typeNoBounds
                                                                                                                                 parenthesizedType
                                                                                                                                  (
                                                                                                                                  type_
                                                                                                                                   typeNoBounds
                                                                                                                                    parenthesizedType
                                                                                                                                     (
                                                                                                                                     type_
                                                                                                                                      typeNoBounds
                                                                                                                                       parenthesizedType
                                                                                                                                        (
                                                                                                                                        type_
                                                                                                                                         typeNoBounds
                                                                                                                                          parenthesizedType
                                                                                                                                           (
                                                                                                                                           type_
                                                                                                                                            typeNoBounds
                                                                                                                                             parenthesizedType
                                                                                                                                              (
                                                                                                                                              type_
                                                                                                                                               typeNoBounds
                                                                                                                                                parenthesizedType
                                                                                                                                                 (
                                                                                                                                                 type_
                                                                                                                                                  typeNoBounds
                                                                                                                                                   parenthesizedType
                                                                                                                                                    (
                                                                                                                                                    type_
                                                                                                                                                     typeNoBounds
                                                                                                                                                      parenthesizedType
                                                                                                                                                       (
                                                                                                                                                       type_
                                                                                                                                                        typeNoBounds
                                                                                                                                                         parenthesizedType
                                                                                                                                                          (
                                                                                                                                                          type_
                                                                                                                                                           typeNoBounds
                                                                                                                                                            parenthesizedType
                                                                                                                                                             (
                                                                                                                                                             type_
                                                                                                                                                              typeNoBounds
                                                                                                                                                               parenthesizedType
                                                                                                                                                                (
                                                                                                                                                                type_
                                                                                                                                                                 typeNoBounds
                                                                                                                                                                  parenthesizedType
                                                                                                                                                                   (
                                                                                                                                                                   type_
                                                                                                                                                                    typeNoBounds
                                                                                                                                                                     parenthesizedType
                                                                                                                                                                      (
                                                                                                                                                                      type_
                                                                                                                                                                       typeNoBounds
                                                                                                                                                                        parenthesizedType
                                                                                                                                                                         (
                                                                                                                                                                         type_
                                                                                                                                                                          typeNoBounds
                                                                                                                                                                           parenthesizedType
                                                                                                                                                                            (
                                                                                                                                                                            type_
                                                                                                                                                                             typeNoBounds
                                                                                                                                                                              parenthesizedType
                                                                                                                                                                               (
                                                                                                                                                                               type_
                                                                                                                                                                                typeNoBounds
                                                                                                                                                                                 parenthesizedType
                                                                                                                                                                                  (
                                                                                                                                                                                  type_
                                                                                                                                                                                   typeNoBounds
                                                                                                                                                                                    parenthesizedType
                                                                                                                                                                                     (
                                                                                                                                                                                     type_
                                                                                                                                                                                      typeNoBounds
                                                                                                                                                                                       traitObjectTypeOneBound
                                                                                                                                                                                        traitBound
                                                                                                                                                                                         typePath
                                                                                                                                                                                          typePathSegment
                                                                                                                                                                                           pathIdentSegment
                                                                                                                                                                                            identifier
                                                                                                                                                                                             i32
                                                                                                                                                                                     )
                                                                                                                                                                                  )
                                                                                                                                                                               )
                                                                                                                                                                            )
                                                                                                                                                                         )
                                                                                                                                                                      )
                                                                                                                                                                   )
                                                                                                                                                                )
                                                                                                                                                             )
                                                                                                                                                          )
                                                                                                                                                       )
                                                                                                                                                    )
                                                                                                                                                 )
                                                                                                                                              )
                                                                                                                                           )
                                                                                                                                        )
                                                                                                                                     )
                                                                                                                                  )
                                                                                                                               )
                                                                                                                            )
                                                                                                                         )
                                                                                                                      )
                                                                                                                   )
                                                                                                                )
                                                                                                             )
                                                                                                          )
                                                                                                       )
                                                                                                    )
                                                                                                 )
                                                                                              )
                                                                                           )
                                                                                        )
                                                                                     )
                                                                                  )
                                                                               )
                                                                            )
                                                                         )
                                                                      )
                                                                   )
                                                                )
                                                             )
                                                          )
                                                       )
                                                    )
                                                 )
                                              )
                                           )
                                        )
                                     )
                                  )
                               )
                            )
                         )
                      )
                   )
                )
             )
          )
       )
    =
    expression
     (
     expression
      (
      expression
       (
       expression
        (
        expression
         (
         expression
          (
          expression
           (
           expression
            (
            expression
             (
             expression
              (
              expression
               (
               expression
                (
                expression
                 (
                 expression
                  (
                  expression
                   (
                   expression
                    (
                    expression
                     (
                     expression
                      (
                      expression
                       (
                       expression
                        (
                        expression
                         (
                         expression
                          (
                          expression
                           (
                           expression
                            (
                            expression
                             (
                             expression
                              (
                              expression
                               (
                               expression
                                (
                                expression
                                 (
                                 expression
                                  (
                                  expression
                                   (
                                   expression
                                    (
                                    expression
                                     (
                                     expression
                                      (
                                      expression
                                       (
                                       expression
                                        (
                                        expression
                                         (
                                         expression
                                          (
                                          expression
                                           (
                                           expression
                                            (
                                            expression
                                             (
                                             expression
                                              (
                                              expression
                                               (
                                               expression
                                                (
                                                expression
                                                 (
                                                 expression
                                                  (
                                                  expression
                                                   (
                                                   expression
                                                    (
                                                    expression
                                                     (
                                                     expression
                                                      (
                                                      expression
                                                       (
                                                       expression
                                                        (
                                                        expression
                                                         (
                                                         expression
                                                          (
                                                          expression
                                                           (
                                                           expression
                                                            (
                                                            expression
                                                             (
                                                             expression
                                                              (
                                                              expression
                                                               (
                                                               expression
                                                                literalExpression
                                                                 1
                                                               )
                                                              )
                                                             )
                                                            )
                                                           )
                                                          )
                                                         )
                                                        )
                                                       )
                                                      )
                                                     )
                                                    )
                                                   )
                                                  )
                                                 )
                                                )
                                               )
                                              )
                                             )
                                            )
                                           )
                                          )
                                         )
                                        )
                                       )
                                      )
                                     )
                                    )
                                   )
                                  )
                                 )
                                )
                               )
                              )
                             )
                            )
                           )
                          )
                         )
                        )
                       )
                      )
                     )
                    )
                   )
                  )
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
    ;
 item
  visItem
   staticItem
    static
    identifier
     k
    :
    type_
     typeNoBounds
      parenthesizedType
       (
       type_
        typeNoBounds
         parenthesizedType
          (
          type_
           typeNoBounds
            parenthesizedType
             (
             type_
              typeNoBounds
               parenthesizedType
                (
                type_
                 typeNoBounds
                  parenthesizedType
                   (
                   type_
                    typeNoBounds
                     parenthesizedType
                      (
                      type_
                       typeNoBounds
                        parenthesizedType
                         (
                         type_
                          typeNoBounds
                           parenthesizedType
                            (
                            type_
                             typeNoBounds
                              parenthesizedType
                               (
                               type_
                                typeNoBounds
                                 parenthesizedType
                                  (
                                  type_
                                   typeNoBounds
                                    parenthesizedType
                                     (
                                     type_
                                      typeNoBounds
                                       parenthesizedType
                                        (
                                        type_
                                         typeNoBounds
                                          parenthesizedType
                                           (
                                           type_
                                            typeNoBounds
                                             parenthesizedType
                                              (
                                              type_
                                               typeNoBounds
                                                parenthesizedType
                                                 (
                                                 type_
                                                  typeNoBounds
                                                   parenthesizedType
                                                    (
                                                    type_
                                                     typeNoBounds
                                                      parenthesizedType
                                                       (
                                                       type_
                                                        typeNoBounds
                                                         parenthesizedType
                                                          (
                                                          type_
                                                           typeNoBounds
                                                            parenthesizedType
                                                             (
                                                             type_
                                                              typeNoBounds
                                                               parenthesizedType
                                                                (
                                                                type_
                                                                 typeNoBounds
                                                                  parenthesizedType
                                                                   (
                                                                   type_
                                                                    typeNoBounds
                                                                     parenthesizedType
                                                                      (
                                                                      type_
                                                                       typeNoBounds
                                                                        parenthesizedType
                                                                         (
                                                                         type_
                                                                          typeNoBounds
                                                                           parenthesizedType
                                                                            (
                                                                            type_
                                                                             typeNoBounds
                                                                              parenthesizedType
                                                                               (
                                                                               type_
                                                                                typeNoBounds
                                                                                 parenthesizedType
                                                                                  (
                                                                                  type_
                                                                                   typeNoBounds
                                                                                    parenthesizedType
                                                                                     (
                                                                                     type_
                                                                                      typeNoBounds
                                                                                       parenthesizedType
                                                                                        (
                                                                                        type_
                                                                                         typeNoBounds
                                                                                          parenthesizedType
                                                                                           (
                                                                                           type_
                                                                                            typeNoBounds
                                                                                             parenthesizedType
                                                                                              (
                                                                                              type_
                                                                                               typeNoBounds
                                                                                                parenthesizedType
                                                                                                 (
                                                                                                 type_
                                                                                                  typeNoBounds
                                                                                                   parenthesizedType
                                                                                                    (
                                                                                                    type_
                                                                                                     typeNoBounds
                                                                                                      parenthesizedType
                                                                                                       (
                                                                                                       type_
                                                                                                        typeNoBounds
                                                                                                         parenthesizedType
                                                                                                          (
                                                                                                          type_
                                                                                                           typeNoBounds
                                                                                                            parenthesizedType
                                                                                                             (
                                                                                                             type_
                                                                                                              typeNoBounds
                                                                                                               parenthesizedType
                                                                                                                (
                                                                                                                type_
                                                                                                                 typeNoBounds
                                                                                                                  parenthesizedType
                                                                                                                   (
                                                                                                                   type_
                                                                                                                    typeNoBounds
                                                                                                                     parenthesizedType
                                                                                                                      (
                                                                                                                      type_
                                                                                                                       typeNoBounds
                                                                                                                        parenthesizedType
                                                                                                                         (
                                                                                                                         type_
                                                                                                                          typeNoBounds
                                                                                                                           parenthesizedType
                                                                                                                            (
                                                                                                                            type_
                                                                                                                             typeNoBounds
                                                                                                                              parenthesizedType
                                                                                                                               (
                                                                                                                               type_
                                                                                                                                typeNoBounds
                                                                                                                                 parenthesizedType
                                                                                                                                  (
                                                                                                                                  type_
                                                                                                                                   typeNoBounds
                                                                                                                                    parenthesizedType
                                                                                                                                     (
                                                                                                                                     type_
                                                                                                                                      typeNoBounds
                                                                                                                                       parenthesizedType
                                                                                                                                        (
                                                                                                                                        type_
                                                                                                                                         typeNoBounds
                                                                                                                                          parenthesizedType
                                                                                                                                           (
                                                                                                                                           type_
                                                                                                                                            typeNoBounds
                                                                                                                                             parenthesizedType
                                                                                                                                              (
                                                                                                                                              type_
                                                                                                                                               typeNoBounds
                                                                                                                                                parenthesizedType
                                                                                                                                                 (
                                                                                                                                                 type_
                                                                                                                                                  typeNoBounds
                                                                                                                                                   parenthesizedType
                                                                                                                                                    (
                                                                                                                                                    type_
                                                                                                                                                     typeNoBounds
                                                                                                                                                      parenthesizedType
                                                                                                                                                       (
                                                                                                                                                       type_
                                                                                                                                                        typeNoBounds
                                                                                                                                                         parenthesizedType
                                                                                                                                                          (
                                                                                                                                                          type_
                                                                                                                                                           typeNoBounds
                                                                                                                                                            parenthesizedType
                                                                                                                                                             (
                                                                                                                                                             type_
                                                                                                                                                              typeNoBounds
                                                                                                                                                               parenthesizedType
                                                                                                                                                                (
                                                                                                                                                                type_
                                                                                                                                                                 typeNoBounds
                                                                                                                                                                  parenthesizedType
                                                                                                                                                                   (
                                                                                                                                                                   type_
                                                                                                                                                                    typeNoBounds
                                                                                                                                                                     parenthesizedType
                                                                                                                                                                      (
                                                                                                                                                                      type_
                                                                                                                                                                       typeNoBounds
                                                                                                                                                                        parenthesizedType
                                                                                                                                                                         (
                                                                                                                                                                         type_
                                                                                                                                                                          typeNoBounds
                                                                                                                                                                           parenthesizedType
                                                                                                                                                                            (
                                                                                                                                                                            type_
                                                                                                                                                                             typeNoBounds
                                                                                                                                                                              parenthesizedType
                                                                                                                                                                               (
                                                                                                                                                                               type_
                                                                                                                                                                                typeNoBounds
                                                                                                                                                                                 parenthesizedType
                                                                                                                                                                                  (
                                                                                                                                                                                  type_
                                                                                                                                                                                   typeNoBounds
                                                                                                                                                                                    tupleType
                                                                                                                                                                                     (
                                                                                                                                                                                     type_
                                                                                                                                                                                      typeNoBounds
                                                                                                                                                                                       traitObjectTypeOneBound
                                                                                                                                                                                        traitBound
                                                                                                                                                                                         typePath
                                                                                                                                                                                          typePathSegment
                                                                                                                                                                                           pathIdentSegment
                                                                                                                                                                                            identifier
                                                                                                                                                                                             i32
                                                                                                                                                                                     ,
                                                                                                                                                                                     )
                                                                                                                                                                                  )
                                                                                                                                                                               )
                                                                                                                                                                            )
                                                                                                                                                                         )
                                                                                                                                                                      )
                                                                                                                                                                   )
                                                                                                                                                                )
                                                                                                                                                             )
                                                                                                                                                          )
                                                                                                                                                       )
                                                                                                                                                    )
                                                                                                                                                 )
                                                                                                                                              )
                                                                                                                                           )
                                                                                                                                        )
                                                                                                                                     )
                                                                                                                                  )
                                                                                                                               )
                                                                                                                            )
                                                                                                                         )
                                                                                                                      )
                                                                                                                   )
                                                                                                                )
                                                                                                             )
                                                                                                          )
                                                                                                       )
                                                                                                    )
                                                                                                 )
                                                                                              )
                                                                                           )
                                                                                        )
                                                                                     )
                                                                                  )
                                                                               )
                                                                            )
                                                                         )
                                                                      )
                                                                   )
                                                                )
                                                             )
                                                          )
                                                       )
                                                    )
                                                 )
                                              )
                                           )
                                        )
                                     )
                                  )
                               )
                            )
                         )
                      )
                   )
                )
             )
          )
       )
    =
    expression
     (
     expression
      (
      expression
       (
       expression
        (
        expression
         (
         expression
          (
          expression
           (
           expression
            (
            expression
             (
             expression
              (
              expression
               (
               expression
                (
                expression
                 (
                 expression
                  (
                  expression
                   (
                   expression
                    (
                    expression
                     (
                     expression
                      (
                      expression
                       (
                       expression
                        (
                        expression
                         (
                         expression
                          (
                          expression
                           (
                           expression
                            (
                            expression
                             (
                             expression
                              (
                              expression
                               (
                               expression
                                (
                                expression
                                 (
                                 expression
                                  (
                                  expression
                                   (
                                   expression
                                    (
                                    expression
                                     (
                                     expression
                                      (
                                      expression
                                       (
                                       expression
                                        (
                                        expression
                                         (
                                         expression
                                          (
                                          expression
                                           (
                                           expression
                                            (
                                            expression
                                             (
                                             expression
                                              (
                                              expression
                                               (
                                               expression
                                                (
                                                expression
                                                 (
                                                 expression
                                                  (
                                                  expression
                                                   (
                                                   expression
                                                    (
                                                    expression
                                                     (
                                                     expression
                                                      (
                                                      expression
                                                       (
                                                       expression
                                                        (
                                                        expression
                                                         (
                                                         expression
                                                          (
                                                          expression
                                                           (
                                                           expression
                                                            (
                                                            expression
                                                             (
                                                             expression
                                                              (
                                                              expression
                                                               (
                                                               tupleElements
                                                                expression
                                                                 literalExpression
                                                                  1
                                                                ,
                                                               )
                                                              )
                                                             )
                                                            )
                                                           )
                                                          )
                                                         )
                                                        )
                                                       )
                                                      )
                                                     )
                                                    )
                                                   )
                                                  )
                                                 )
                                                )
                                               )
                                              )
                                             )
                                            )
                                           )
                                          )
                                         )
                                        )
                                       )
                                      )
                                     )
                                    )
                                   )
                                  )
                                 )
                                )
                               )
                              )
                             )
                            )
                           )
                          )
                         )
                        )
                       )
                      )
                     )
                    )
                   )
                  )
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
    ;
 item
  visItem
   staticItem
    static
    identifier
     l
    :
    type_
     typeNoBounds
      tupleType
       (
       type_
        typeNoBounds
         tupleType
          (
          type_
           typeNoBounds
            tupleType
             (
             type_
              typeNoBounds
               tupleType
                (
                type_
                 typeNoBounds
                  tupleType
                   (
                   type_
                    typeNoBounds
                     tupleType
                      (
                      type_
                       typeNoBounds
                        tupleType
                         (
                         type_
                          typeNoBounds
                           tupleType
                            (
                            type_
                             typeNoBounds
                              tupleType
                               (
                               type_
                                typeNoBounds
                                 tupleType
                                  (
                                  type_
                                   typeNoBounds
                                    tupleType
                                     (
                                     type_
                                      typeNoBounds
                                       tupleType
                                        (
                                        type_
                                         typeNoBounds
                                          tupleType
                                           (
                                           type_
                                            typeNoBounds
                                             tupleType
                                              (
                                              type_
                                               typeNoBounds
                                                tupleType
                                                 (
                                                 type_
                                                  typeNoBounds
                                                   tupleType
                                                    (
                                                    type_
                                                     typeNoBounds
                                                      tupleType
                                                       (
                                                       type_
                                                        typeNoBounds
                                                         tupleType
                                                          (
                                                          type_
                                                           typeNoBounds
                                                            tupleType
                                                             (
                                                             type_
                                                              typeNoBounds
                                                               tupleType
                                                                (
                                                                type_
                                                                 typeNoBounds
                                                                  tupleType
                                                                   (
                                                                   type_
                                                                    typeNoBounds
                                                                     tupleType
                                                                      (
                                                                      type_
                                                                       typeNoBounds
                                                                        tupleType
                                                                         (
                                                                         type_
                                                                          typeNoBounds
                                                                           tupleType
                                                                            (
                                                                            type_
                                                                             typeNoBounds
                                                                              tupleType
                                                                               (
                                                                               type_
                                                                                typeNoBounds
                                                                                 tupleType
                                                                                  (
                                                                                  type_
                                                                                   typeNoBounds
                                                                                    tupleType
                                                                                     (
                                                                                     type_
                                                                                      typeNoBounds
                                                                                       tupleType
                                                                                        (
                                                                                        type_
                                                                                         typeNoBounds
                                                                                          tupleType
                                                                                           (
                                                                                           type_
                                                                                            typeNoBounds
                                                                                             tupleType
                                                                                              (
                                                                                              type_
                                                                                               typeNoBounds
                                                                                                tupleType
                                                                                                 (
                                                                                                 type_
                                                                                                  typeNoBounds
                                                                                                   tupleType
                                                                                                    (
                                                                                                    type_
                                                                                                     typeNoBounds
                                                                                                      tupleType
                                                                                                       (
                                                                                                       type_
                                                                                                        typeNoBounds
                                                                                                         tupleType
                                                                                                          (
                                                                                                          type_
                                                                                                           typeNoBounds
                                                                                                            tupleType
                                                                                                             (
                                                                                                             type_
                                                                                                              typeNoBounds
                                                                                                               tupleType
                                                                                                                (
                                                                                                                type_
                                                                                                                 typeNoBounds
                                                                                                                  tupleType
                                                                                                                   (
                                                                                                                   type_
                                                                                                                    typeNoBounds
                                                                                                                     tupleType
                                                                                                                      (
                                                                                                                      type_
                                                                                                                       typeNoBounds
                                                                                                                        tupleType
                                                                                                                         (
                                                                                                                         type_
                                                                                                                          typeNoBounds
                                                                                                                           tupleType
                                                                                                                            (
                                                                                                                            type_
                                                                                                                             typeNoBounds
                                                                                                                              tupleType
                                                                                                                               (
                                                                                                                               type_
                                                                                                                                typeNoBounds
                                                                                                                                 tupleType
                                                                                                                                  (
                                                                                                                                  type_
                                                                                                                                   typeNoBounds
                                                                                                                                    tupleType
                                                                                                                                     (
                                                                                                                                     type_
                                                                                                                                      typeNoBounds
                                                                                                                                       tupleType
                                                                                                                                        (
                                                                                                                                        type_
                                                                                                                                         typeNoBounds
                                                                                                                                          tupleType
                                                                                                                                           (
                                                                                                                                           type_
                                                                                                                                            typeNoBounds
                                                                                                                                             tupleType
                                                                                                                                              (
                                                                                                                                              type_
                                                                                                                                               typeNoBounds
                                                                                                                                                tupleType
                                                                                                                                                 (
                                                                                                                                                 type_
                                                                                                                                                  typeNoBounds
                                                                                                                                                   tupleType
                                                                                                                                                    (
                                                                                                                                                    type_
                                                                                                                                                     typeNoBounds
                                                                                                                                                      tupleType
                                                                                                                                                       (
                                                                                                                                                       type_
                                                                                                                                                        typeNoBounds
                                                                                                                                                         tupleType
                                                                                                                                                          (
                                                                                                                                                          type_
                                                                                                                                                           typeNoBounds
                                                                                                                                                            tupleType
                                                                                                                                                             (
                                                                                                                                                             type_
                                                                                                                                                              typeNoBounds
                                                                                                                                                               tupleType
                                                                                                                                                                (
                                                                                                                                                                type_
                                                                                                                                                                 typeNoBounds
                                                                                                                                                                  tupleType
                                                                                                                                                                   (
                                                                                                                                                                   type_
                                                                                                                                                                    typeNoBounds
                                                                                                                                                                     tupleType
                                                                                                                                                                      (
                                                                                                                                                                      type_
                                                                                                                                                                       typeNoBounds
                                                                                                                                                                        tupleType
                                                                                                                                                                         (
                                                                                                                                                                         type_
                                                                                                                                                                          typeNoBounds
                                                                                                                                                                           tupleType
                                                                                                                                                                            (
                                                                                                                                                                            type_
                                                                                                                                                                             typeNoBounds
                                                                                                                                                                              tupleType
                                                                                                                                                                               (
                                                                                                                                                                               type_
                                                                                                                                                                                typeNoBounds
                                                                                                                                                                                 tupleType
                                                                                                                                                                                  (
                                                                                                                                                                                  type_
                                                                                                                                                                                   typeNoBounds
                                                                                                                                                                                    tupleType
                                                                                                                                                                                     (
                                                                                                                                                                                     type_
                                                                                                                                                                                      typeNoBounds
                                                                                                                                                                                       traitObjectTypeOneBound
                                                                                                                                                                                        traitBound
                                                                                                                                                                                         typePath
                                                                                                                                                                                          typePathSegment
                                                                                                                                                                                           pathIdentSegment
                                                                                                                                                                                            identifier
                                                                                                                                                                                             i32
                                                                                                                                                                                     ,
                                                                                                                                                                                     )
                                                                                                                                                                                  ,
                                                                                                                                                                                  )
                                                                                                                                                                               ,
                                                                                                                                                                               )
                                                                                                                                                                            ,
                                                                                                                                                                            )
                                                                                                                                                                         ,
                                                                                                                                                                         )
                                                                                                                                                                      ,
                                                                                                                                                                      )
                                                                                                                                                                   ,
                                                                                                                                                                   )
                                                                                                                                                                ,
                                                                                                                                                                )
                                                                                                                                                             ,
                                                                                                                                                             )
                                                                                                                                                          ,
                                                                                                                                                          )
                                                                                                                                                       ,
                                                                                                                                                       )
                                                                                                                                                    ,
                                                                                                                                                    )
                                                                                                                                                 ,
                                                                                                                                                 )
                                                                                                                                              ,
                                                                                                                                              )
                                                                                                                                           ,
                                                                                                                                           )
                                                                                                                                        ,
                                                                                                                                        )
                                                                                                                                     ,
                                                                                                                                     )
                                                                                                                                  ,
                                                                                                                                  )
                                                                                                                               ,
                                                                                                                               )
                                                                                                                            ,
                                                                                                                            )
                                                                                                                         ,
                                                                                                                         )
                                                                                                                      ,
                                                                                                                      )
                                                                                                                   ,
                                                                                                                   )
                                                                                                                ,
                                                                                                                )
                                                                                                             ,
                                                                                                             )
                                                                                                          ,
                                                                                                          )
                                                                                                       ,
                                                                                                       )
                                                                                                    ,
                                                                                                    )
                                                                                                 ,
                                                                                                 )
                                                                                              ,
                                                                                              )
                                                                                           ,
                                                                                           )
                                                                                        ,
                                                                                        )
                                                                                     ,
                                                                                     )
                                                                                  ,
                                                                                  )
                                                                               ,
                                                                               )
                                                                            ,
                                                                            )
                                                                         ,
                                                                         )
                                                                      ,
                                                                      )
                                                                   ,
                                                                   )
                                                                ,
                                                                )
                                                             ,
                                                             )
                                                          ,
                                                          )
                                                       ,
                                                       )
                                                    ,
                                                    )
                                                 ,
                                                 )
                                              ,
                                              )
                                           ,
                                           )
                                        ,
                                        )
                                     ,
                                     )
                                  ,
                                  )
                               ,
                               )
                            ,
                            )
                         ,
                         )
                      ,
                      )
                   ,
                   )
                ,
                )
             ,
             )
          ,
          )
       ,
       )
    =
    expression
     (
     tupleElements
      expression
       (
       tupleElements
        expression
         (
         tupleElements
          expression
           (
           tupleElements
            expression
             (
             tupleElements
              expression
               (
               tupleElements
                expression
                 (
                 tupleElements
                  expression
                   (
                   tupleElements
                    expression
                     (
                     tupleElements
                      expression
                       (
                       tupleElements
                        expression
                         (
                         tupleElements
                          expression
                           (
                           tupleElements
                            expression
                             (
                             tupleElements
                              expression
                               (
                               tupleElements
                                expression
                                 (
                                 tupleElements
                                  expression
                                   (
                                   tupleElements
                                    expression
                                     (
                                     tupleElements
                                      expression
                                       (
                                       tupleElements
                                        expression
                                         (
                                         tupleElements
                                          expression
                                           (
                                           tupleElements
                                            expression
                                             (
                                             tupleElements
                                              expression
                                               (
                                               tupleElements
                                                expression
                                                 (
                                                 tupleElements
                                                  expression
                                                   (
                                                   tupleElements
                                                    expression
                                                     (
                                                     tupleElements
                                                      expression
                                                       (
                                                       tupleElements
                                                        expression
                                                         (
                                                         tupleElements
                                                          expression
                                                           (
                                                           tupleElements
                                                            expression
                                                             (
                                                             tupleElements
                                                              expression
                                                               (
                                                               tupleElements
                                                                expression
                                                                 (
                                                                 tupleElements
                                                                  expression
                                                                   (
                                                                   tupleElements
                                                                    expression
                                                                     (
                                                                     tupleElements
                                                                      expression
                                                                       (
                                                                       tupleElements
                                                                        expression
                                                                         (
                                                                         tupleElements
                                                                          expression
                                                                           (
                                                                           tupleElements
                                                                            expression
                                                                             (
                                                                             tupleElements
                                                                              expression
                                                                               (
                                                                               tupleElements
                                                                                expression
                                                                                 (
                                                                                 tupleElements
                                                                                  expression
                                                                                   (
                                                                                   tupleElements
                                                                                    expression
                                                                                     (
                                                                                     tupleElements
                                                                                      expression
                                                                                       (
                                                                                       tupleElements
                                                                                        expression
                                                                                         (
                                                                                         tupleElements
                                                                                          expression
                                                                                           (
                                                                                           tupleElements
                                                                                            expression
                                                                                             (
                                                                                             tupleElements
                                                                                              expression
                                                                                               (
                                                                                               tupleElements
                                                                                                expression
                                                                                                 (
                                                                                                 tupleElements
                                                                                                  expression
                                                                                                   (
                                                                                                   tupleElements
                                                                                                    expression
                                                                                                     (
                                                                                                     tupleElements
                                                                                                      expression
                                                                                                       (
                                                                                                       tupleElements
                                                                                                        expression
                                                                                                         (
                                                                                                         tupleElements
                                                                                                          expression
                                                                                                           (
                                                                                                           tupleElements
                                                                                                            expression
                                                                                                             (
                                                                                                             tupleElements
                                                                                                              expression
                                                                                                               (
                                                                                                               tupleElements
                                                                                                                expression
                                                                                                                 (
                                                                                                                 tupleElements
                                                                                                                  expression
                                                                                                                   (
                                                                                                                   tupleElements
                                                                                                                    expression
                                                                                                                     (
                                                                                                                     tupleElements
                                                                                                                      expression
                                                                                                                       (
                                                                                                                       tupleElements
                                                                                                                        expression
                                                                                                                         (
                                                                                                                         tupleElements
                                                                                                                          expression
                                                                                                                           literalExpression
                                                                                                                            1
                                                                                                                          ,
                                                                                                                         )
                                                                                                                        ,
                                                                                                                       )
                                                                                                                      ,
                                                                                                                     )
                                                                                                                    ,
                                                                                                                   )
                                                                                                                  ,
                                                                                                                 )
                                                                                                                ,
                                                                                                               )
                                                                                                              ,
                                                                                                             )
                                                                                                            ,
                                                                                                           )
                                                                                                          ,
                                                                                                         )
                                                                                                        ,
                                                                                                       )
                                                                                                      ,
                                                                                                     )
                                                                                                    ,
                                                                                                   )
                                                                                                  ,
                                                                                                 )
                                                                                                ,
                                                                                               )
                                                                                              ,
                                                                                             )
                                                                                            ,
                                                                                           )
                                                                                          ,
                                                                                         )
                                                                                        ,
                                                                                       )
                                                                                      ,
                                                                                     )
                                                                                    ,
                                                                                   )
                                                                                  ,
                                                                                 )
                                                                                ,
                                                                               )
                                                                              ,
                                                                             )
                                                                            ,
                                                                           )
                                                                          ,
                                                                         )
                                                                        ,
                                                                       )
                                                                      ,
                                                                     )
                                                                    ,
                                                                   )
                                                                  ,
                                                                 )
                                                                ,
                                                               )
                                                              ,
                                                             )
                                                            ,
                                                           )
                                                          ,
                                                         )
                                                        ,
                                                       )
                                                      ,
                                                     )
                                                    ,
                                                   )
                                                  ,
                                                 )
                                                ,
                                               )
                                              ,
                                             )
                                            ,
                                           )
                                          ,
                                         )
                                        ,
                                       )
                                      ,
                                     )
                                    ,
                                   )
                                  ,
                                 )
                                ,
                               )
                              ,
                             )
                            ,
                           )
                          ,
                         )
                        ,
                       )
                      ,
                     )
                    ,
                   )
                  ,
                 )
                ,
               )
              ,
             )
            ,
           )
          ,
         )
        ,
       )
      ,
     )
    ;
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     }
 <EOF>
