crate
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        std
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         cmp
       ::
       simplePathSegment
        identifier
         min
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         io
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         pin
       ::
       simplePathSegment
        identifier
         Pin
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        aes
      ::
      simplePathSegment
       identifier
        Aes128
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        bytes
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         BufMut
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         BytesMut
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        cfb_mode
      ::
      simplePathSegment
       identifier
        stream_cipher
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         NewStreamCipher
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         StreamCipher
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        cfb_mode
      ::
      simplePathSegment
       identifier
        Cfb
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        futures
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         ready
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         task
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          Context
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          Poll
      }
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        rand
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         rngs
       ::
       simplePathSegment
        identifier
         StdRng
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Rng
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         SeedableRng
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       identifier
        tokio
      ::
      simplePathSegment
       identifier
        io
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         AsyncRead
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         AsyncWrite
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       crate
      ::
      simplePathSegment
       identifier
        common
      ::
      simplePathSegment
       identifier
        crypto
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         aead
      ::
      {
      useTree
       simplePath
        simplePathSegment
         identifier
          AeadDecryptor
      ,
      useTree
       simplePath
        simplePathSegment
         identifier
          AeadEncryptor
      }
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Decryptor
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         Encryptor
     ,
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       super
      ::
      simplePathSegment
       identifier
        crypto
     ::
     {
     useTree
      simplePath
       simplePathSegment
        identifier
         PaddingLengthGenerator
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         ShakeSizeParser
     ,
     useTree
      simplePath
       simplePathSegment
        identifier
         VMessAEADSequence
     }
    ;
 item
  visItem
   useDeclaration
    use
    useTree
     simplePath
      simplePathSegment
       super
      ::
      simplePathSegment
       identifier
        protocol
      ::
      simplePathSegment
       identifier
        ClientSession
    ;
 item
  visItem
   enumeration
    enum
    identifier
     ReadState
    {
    enumItems
     enumItem
      identifier
       WaitingResponseHeader
     ,
     enumItem
      identifier
       WaitingLength
     ,
     enumItem
      identifier
       WaitingData
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
        ,
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
       )
     ,
     enumItem
      identifier
       PendingData
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
       )
     ,
    }
 item
  visItem
   enumeration
    enum
    identifier
     WriteState
    {
    enumItems
     enumItem
      identifier
       WaitingChunk
     ,
     enumItem
      identifier
       PendingChunk
      enumItemTuple
       (
       tupleFields
        tupleField
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
        ,
        tupleField
         type_
          typeNoBounds
           tupleType
            (
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    usize
            ,
            type_
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    usize
            )
       )
     ,
    }
 item
  visItem
   visibility
    pub
   struct_
    structStruct
     struct
     identifier
      VMessAuthStream
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
      >
     {
     structFields
      structField
       identifier
        inner
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               T
      ,
      structField
       identifier
        sess
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ClientSession
      ,
      structField
       identifier
        enc
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AeadEncryptor
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       VMessAEADSequence
              >
      ,
      structField
       identifier
        enc_size_parser
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ShakeSizeParser
      ,
      structField
       identifier
        dec
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AeadDecryptor
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       VMessAEADSequence
              >
      ,
      structField
       identifier
        dec_size_parser
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ShakeSizeParser
      ,
      structField
       identifier
        tag_len
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               usize
      ,
      structField
       identifier
        read_buf
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               BytesMut
      ,
      structField
       identifier
        write_buf
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               BytesMut
      ,
      structField
       identifier
        read_state
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               ReadState
      ,
      structField
       identifier
        write_state
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               WriteState
      ,
      structField
       identifier
        read_pos
       :
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               usize
      ,
     }
 item
  visItem
   implementation
    inherentImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
      >
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             VMessAuthStream
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
            >
     {
     associatedItem
      visibility
       pub
      function_
       functionQualifiers
       fn
       identifier
        new
       (
       functionParameters
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               s
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  T
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               sess
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ClientSession
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               enc
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  AeadEncryptor
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          VMessAEADSequence
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               enc_size_parser
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ShakeSizeParser
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dec
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  AeadDecryptor
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    traitObjectTypeOneBound
                     traitBound
                      typePath
                       typePathSegment
                        pathIdentSegment
                         identifier
                          VMessAEADSequence
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               dec_size_parser
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  ShakeSizeParser
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               tag_len
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  usize
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               Self
       blockExpression
        {
        statements
         expression
          structExpression
           structExprStruct
            pathInExpression
             pathExprSegment
              pathIdentSegment
               identifier
                VMessAuthStream
            {
            structExprFields
             structExprField
              identifier
               inner
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    s
             ,
             structExprField
              identifier
               sess
             ,
             structExprField
              identifier
               enc
             ,
             structExprField
              identifier
               enc_size_parser
             ,
             structExprField
              identifier
               dec
             ,
             structExprField
              identifier
               dec_size_parser
             ,
             structExprField
              identifier
               tag_len
             ,
             structExprField
              identifier
               read_buf
              :
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     BytesMut
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     with_capacity
               (
               callParams
                expression
                 expression
                  literalExpression
                   0x2
                 +
                 expression
                  literalExpression
                   0x4000
               )
             ,
             structExprField
              identifier
               write_buf
              :
              expression
               expression
                pathExpression
                 pathInExpression
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     BytesMut
                  ::
                  pathExprSegment
                   pathIdentSegment
                    identifier
                     with_capacity
               (
               callParams
                expression
                 expression
                  literalExpression
                   0x2
                 +
                 expression
                  literalExpression
                   0x4000
               )
             ,
             structExprField
              identifier
               read_state
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    ReadState
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    WaitingResponseHeader
             ,
             structExprField
              identifier
               write_state
              :
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    WriteState
                 ::
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    WaitingChunk
             ,
             structExprField
              identifier
               read_pos
              :
              expression
               literalExpression
                0
             ,
            }
        }
     }
 item
  visItem
   trait_
    trait
    identifier
     ReadExt
    {
    associatedItem
     function_
      functionQualifiers
      fn
      identifier
       poll_read_exact
      (
      functionParameters
       selfParam
        shorthandSelf
         &
         mut
         self
       ,
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              cx
         :
         type_
          typeNoBounds
           referenceType
            &
            mut
            typeNoBounds
             traitObjectTypeOneBound
              traitBound
               typePath
                typePathSegment
                 pathIdentSegment
                  identifier
                   Context
       ,
       functionParam
        functionParamPattern
         pattern
          patternNoTopAlt
           patternWithoutRange
            identifierPattern
             identifier
              size
         :
         type_
          typeNoBounds
           traitObjectTypeOneBound
            traitBound
             typePath
              typePathSegment
               pathIdentSegment
                identifier
                 usize
      )
      functionReturnType
       ->
       type_
        typeNoBounds
         traitObjectTypeOneBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Poll
             genericArgs
              <
              genericArgsTypes
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       io
                    ::
                    typePathSegment
                     pathIdentSegment
                      identifier
                       Result
                     genericArgs
                      <
                      genericArgsTypes
                       type_
                        typeNoBounds
                         tupleType
                          (
                          )
                      >
              >
      ;
    }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
        :
        typeParamBounds
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AsyncRead
         +
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Unpin
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         ReadExt
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             VMessAuthStream
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
            >
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_read_exact
       (
       functionParameters
        selfParam
         shorthandSelf
          &
          mut
          self
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               size
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  usize
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        io
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                       >
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expression
            expression
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  self
             .
             identifier
              read_buf
            .
            pathExprSegment
             pathIdentSegment
              identifier
               reserve
            (
            callParams
             expression
              pathExpression
               pathInExpression
                pathExprSegment
                 pathIdentSegment
                  identifier
                   size
            )
           ;
         statement
          expressionStatement
           expression
            expressionWithBlock
             unsafeBlockExpression
              unsafe
              blockExpression
               {
               statements
                expression
                 expression
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       self
                  .
                  identifier
                   read_buf
                 .
                 pathExprSegment
                  pathIdentSegment
                   identifier
                    set_len
                 (
                 callParams
                  expression
                   pathExpression
                    pathInExpression
                     pathExprSegment
                      pathIdentSegment
                       identifier
                        size
                 )
               }
           ;
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expressionWithBlock
                   ifExpression
                    if
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           self
                      .
                      identifier
                       read_pos
                     comparisonOperator
                      <
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           size
                    blockExpression
                     {
                     statements
                      statement
                       letStatement
                        let
                        patternNoTopAlt
                         patternWithoutRange
                          identifierPattern
                           identifier
                            n
                        =
                        expression
                         expression
                          macroInvocation
                           simplePath
                            simplePathSegment
                             identifier
                              ready
                           !
                           delimTokenTree
                            (
                            tokenTree
                             tokenTreeToken
                              macroIdentifierLikeToken
                               identifier
                                Pin
                             tokenTreeToken
                              macroPunctuationToken
                               ::
                             tokenTreeToken
                              macroIdentifierLikeToken
                               identifier
                                new
                            tokenTree
                             delimTokenTree
                              (
                              tokenTree
                               tokenTreeToken
                                macroPunctuationToken
                                 &
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 keyword
                                  mut
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 keyword
                                  self
                               tokenTreeToken
                                macroPunctuationToken
                                 .
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 identifier
                                  inner
                              )
                            tokenTree
                             tokenTreeToken
                              macroPunctuationToken
                               .
                             tokenTreeToken
                              macroIdentifierLikeToken
                               identifier
                                poll_read
                            tokenTree
                             delimTokenTree
                              (
                              tokenTree
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 identifier
                                  cx
                               tokenTreeToken
                                macroPunctuationToken
                                 ,
                               tokenTreeToken
                                macroPunctuationToken
                                 &
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 keyword
                                  mut
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 keyword
                                  self
                               tokenTreeToken
                                macroPunctuationToken
                                 .
                               tokenTreeToken
                                macroIdentifierLikeToken
                                 identifier
                                  read_buf
                              tokenTree
                               delimTokenTree
                                [
                                tokenTree
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   keyword
                                    self
                                 tokenTreeToken
                                  macroPunctuationToken
                                   .
                                 tokenTreeToken
                                  macroIdentifierLikeToken
                                   identifier
                                    read_pos
                                 tokenTreeToken
                                  macroPunctuationToken
                                   ..
                                ]
                              )
                            )
                         ?
                        ;
                      statement
                       expressionStatement
                        expression
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               self
                          .
                          identifier
                           read_pos
                         compoundAssignOperator
                          +=
                         expression
                          pathExpression
                           pathInExpression
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               n
                        ;
                      statement
                       expressionStatement
                        expressionWithBlock
                         ifExpression
                          if
                          expression
                           expression
                            pathExpression
                             pathInExpression
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 n
                           comparisonOperator
                            ==
                           expression
                            literalExpression
                             0
                          blockExpression
                           {
                           statements
                            statement
                             expressionStatement
                              expression
                               return
                               expression
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Err
                                 (
                                 callParams
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         eof
                                   (
                                   )
                                 )
                                .
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   into
                                (
                                )
                              ;
                           }
                     }
                statement
                 expressionStatement
                  expressionWithBlock
                   ifExpression
                    if
                    expression
                     expression
                      expression
                       pathExpression
                        pathInExpression
                         pathExprSegment
                          pathIdentSegment
                           self
                      .
                      identifier
                       read_pos
                     comparisonOperator
                      >=
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          identifier
                           size
                    blockExpression
                     {
                     statements
                      statement
                       expressionStatement
                        expression
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               self
                          .
                          identifier
                           read_pos
                         =
                         expression
                          literalExpression
                           0
                        ;
                      statement
                       expressionStatement
                        expression
                         return
                         expression
                          expression
                           pathExpression
                            pathInExpression
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Poll
                             ::
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                Ready
                          (
                          callParams
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  Ok
                            (
                            callParams
                             expression
                              (
                              )
                            )
                          )
                        ;
                     }
               }
        }
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     eof
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             io
          ::
          typePathSegment
           pathIdentSegment
            identifier
             Error
    blockExpression
     {
     statements
      expression
       expression
        pathExpression
         pathInExpression
          pathExprSegment
           pathIdentSegment
            identifier
             io
          ::
          pathExprSegment
           pathIdentSegment
            identifier
             Error
          ::
          pathExprSegment
           pathIdentSegment
            identifier
             new
       (
       callParams
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              io
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              ErrorKind
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              UnexpectedEof
        ,
        expression
         literalExpression
          "early eof"
       )
     }
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     crypto_err
    (
    )
    functionReturnType
     ->
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             io
          ::
          typePathSegment
           pathIdentSegment
            identifier
             Error
    blockExpression
     {
     statements
      expression
       expression
        pathExpression
         pathInExpression
          pathExprSegment
           pathIdentSegment
            identifier
             io
          ::
          pathExprSegment
           pathIdentSegment
            identifier
             Error
          ::
          pathExprSegment
           pathIdentSegment
            identifier
             new
       (
       callParams
        expression
         pathExpression
          pathInExpression
           pathExprSegment
            pathIdentSegment
             identifier
              io
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              ErrorKind
           ::
           pathExprSegment
            pathIdentSegment
             identifier
              Other
        ,
        expression
         literalExpression
          "crypto error"
       )
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
        :
        typeParamBounds
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AsyncRead
         +
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Unpin
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         AsyncRead
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             VMessAuthStream
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
            >
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_read
       (
       functionParameters
        selfParam
         typedSelf
          mut
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Pin
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    referenceType
                     &
                     mut
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           Self
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               buf
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              sliceType
               [
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       u8
               ]
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        io
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                usize
                       >
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          self
                     .
                     identifier
                      read_state
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              ReadState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WaitingResponseHeader
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               me
                           =
                           expression
                            &
                            mut
                            expression
                             *
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             macroInvocation
                              simplePath
                               simplePathSegment
                                identifier
                                 ready
                              !
                              delimTokenTree
                               (
                               tokenTree
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   me
                                tokenTreeToken
                                 macroPunctuationToken
                                  .
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   poll_read_exact
                               tokenTree
                                delimTokenTree
                                 (
                                 tokenTree
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     cx
                                  tokenTreeToken
                                   macroPunctuationToken
                                    ,
                                  tokenTreeToken
                                   macroLiteralToken
                                    literalExpression
                                     4
                                 )
                               )
                            ?
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              mut
                              identifier
                               enc
                           =
                           expression
                            expression
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    Cfb
                                  ::
                                  genericArgs
                                   <
                                   genericArgsTypes
                                    type_
                                     typeNoBounds
                                      traitObjectTypeOneBound
                                       traitBound
                                        typePath
                                         typePathSegment
                                          pathIdentSegment
                                           identifier
                                            Aes128
                                   >
                                 ::
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    new_var
                              (
                              callParams
                               expression
                                &
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        me
                                  .
                                  identifier
                                   sess
                                 .
                                 identifier
                                  response_body_key
                               ,
                               expression
                                &
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        me
                                  .
                                  identifier
                                   sess
                                 .
                                 identifier
                                  response_body_iv
                               ,
                              )
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                map_err
                             (
                             callParams
                              expression
                               closureExpression
                                |
                                closureParameters
                                 closureParam
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     wildcardPattern
                                      _
                                |
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       io
                                    ::
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       Error
                                    ::
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       new
                                 (
                                 callParams
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        io
                                     ::
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        ErrorKind
                                     ::
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        Other
                                  ,
                                  expression
                                   literalExpression
                                    "crypto error"
                                 )
                             )
                            ?
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  enc
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               decrypt
                            (
                            callParams
                             expression
                              &
                              mut
                              expression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      me
                                .
                                identifier
                                 read_buf
                               [
                               expression
                                ..
                                expression
                                 literalExpression
                                  4
                               ]
                            )
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifExpression
                             if
                             expression
                              expression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      me
                                .
                                identifier
                                 read_buf
                               [
                               expression
                                literalExpression
                                 0
                               ]
                              comparisonOperator
                               !=
                              expression
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      me
                                .
                                identifier
                                 sess
                               .
                               identifier
                                response_header
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  return
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Poll
                                      ::
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Ready
                                   (
                                   callParams
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           Err
                                     (
                                     callParams
                                      expression
                                       expression
                                        pathExpression
                                         pathInExpression
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             crypto_err
                                       (
                                       )
                                     )
                                   )
                                 ;
                              }
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              read_state
                            =
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  ReadState
                               ::
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  WaitingLength
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              ReadState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WaitingLength
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               me
                           =
                           expression
                            &
                            mut
                            expression
                             *
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               size_bytes
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              dec_size_parser
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               size_bytes
                            (
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             macroInvocation
                              simplePath
                               simplePathSegment
                                identifier
                                 ready
                              !
                              delimTokenTree
                               (
                               tokenTree
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   me
                                tokenTreeToken
                                 macroPunctuationToken
                                  .
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   poll_read_exact
                               tokenTree
                                delimTokenTree
                                 (
                                 tokenTree
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     cx
                                  tokenTreeToken
                                   macroPunctuationToken
                                    ,
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     size_bytes
                                 )
                               )
                            ?
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               padding_size
                           =
                           expression
                            expression
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    me
                              .
                              identifier
                               dec_size_parser
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                next_padding_len
                             (
                             )
                            as
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   usize
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               size
                           =
                           expression
                            expression
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    me
                              .
                              identifier
                               dec_size_parser
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                decode
                             (
                             callParams
                              expression
                               &
                               expression
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       me
                                 .
                                 identifier
                                  read_buf
                                [
                                expression
                                 ..
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       size_bytes
                                ]
                             )
                            as
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   usize
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              read_state
                            =
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   ReadState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   WaitingData
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    size
                              ,
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    padding_size
                             )
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              ReadState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WaitingData
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                size
                           ,
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                padding_size
                          )
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               me
                           =
                           expression
                            &
                            mut
                            expression
                             *
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             macroInvocation
                              simplePath
                               simplePathSegment
                                identifier
                                 ready
                              !
                              delimTokenTree
                               (
                               tokenTree
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   me
                                tokenTreeToken
                                 macroPunctuationToken
                                  .
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   poll_read_exact
                               tokenTree
                                delimTokenTree
                                 (
                                 tokenTree
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     cx
                                  tokenTreeToken
                                   macroPunctuationToken
                                    ,
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     size
                                 )
                               )
                            ?
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               encrypted_size
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  size
                            -
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  padding_size
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             wildcardPattern
                              _
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              read_buf
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               split_off
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   encrypted_size
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     me
                               .
                               identifier
                                dec
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 decrypt
                              (
                              callParams
                               expression
                                &
                                mut
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       me
                                 .
                                 identifier
                                  read_buf
                              )
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                map_err
                             (
                             callParams
                              expression
                               closureExpression
                                |
                                closureParameters
                                 closureParam
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     wildcardPattern
                                      _
                                |
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       crypto_err
                                 (
                                 )
                             )
                            ?
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              read_state
                            =
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   ReadState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PendingData
                             (
                             callParams
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     encrypted_size
                               -
                               expression
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      me
                                .
                                identifier
                                 tag_len
                             )
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              ReadState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              PendingData
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                n
                          )
                     =>
                     expression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               to_read
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  min
                            (
                            callParams
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    buf
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 len
                              (
                              )
                             ,
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   n
                            )
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               payload
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                             .
                             identifier
                              read_buf
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               split_to
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   to_read
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             (
                             expression
                              &
                              mut
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     buf
                               [
                               expression
                                ..
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      to_read
                               ]
                             )
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               copy_from_slice
                            (
                            callParams
                             expression
                              &
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    payload
                            )
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifExpression
                             if
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    to_read
                              comparisonOperator
                               <
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    n
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        self
                                   .
                                   identifier
                                    read_state
                                  =
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         ReadState
                                      ::
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         PendingData
                                   (
                                   callParams
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           n
                                     -
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           to_read
                                   )
                                 ;
                              }
                             else
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        self
                                   .
                                   identifier
                                    read_state
                                  =
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        ReadState
                                     ::
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        WaitingLength
                                 ;
                              }
                         statement
                          expressionStatement
                           expression
                            return
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Poll
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   Ready
                             (
                             callParams
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     Ok
                               (
                               callParams
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      to_read
                               )
                             )
                           ;
                        }
                    }
               }
        }
     }
 item
  visItem
   implementation
    traitImpl
     impl
     genericParams
      <
      genericParam
       typeParam
        identifier
         T
        :
        typeParamBounds
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               AsyncWrite
         +
         typeParamBound
          traitBound
           typePath
            typePathSegment
             pathIdentSegment
              identifier
               Unpin
      >
     typePath
      typePathSegment
       pathIdentSegment
        identifier
         AsyncWrite
     for
     type_
      typeNoBounds
       traitObjectTypeOneBound
        traitBound
         typePath
          typePathSegment
           pathIdentSegment
            identifier
             VMessAuthStream
           genericArgs
            <
            genericArgsTypes
             type_
              typeNoBounds
               traitObjectTypeOneBound
                traitBound
                 typePath
                  typePathSegment
                   pathIdentSegment
                    identifier
                     T
            >
     {
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_write
       (
       functionParameters
        selfParam
         typedSelf
          mut
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Pin
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    referenceType
                     &
                     mut
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           Self
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               buf
          :
          type_
           typeNoBounds
            referenceType
             &
             typeNoBounds
              sliceType
               [
               type_
                typeNoBounds
                 traitObjectTypeOneBound
                  traitBound
                   typePath
                    typePathSegment
                     pathIdentSegment
                      identifier
                       u8
               ]
        ,
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        io
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          traitObjectTypeOneBound
                           traitBound
                            typePath
                             typePathSegment
                              pathIdentSegment
                               identifier
                                usize
                       >
               >
       blockExpression
        {
        statements
         statement
          expressionStatement
           expressionWithBlock
            loopExpression
             infiniteLoopExpression
              loop
              blockExpression
               {
               statements
                statement
                 expressionStatement
                  expressionWithBlock
                   matchExpression
                    match
                    expression
                     expression
                      pathExpression
                       pathInExpression
                        pathExprSegment
                         pathIdentSegment
                          self
                     .
                     identifier
                      write_state
                    {
                    matchArms
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         pathPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WriteState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WaitingChunk
                     =>
                     matchArmExpression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               me
                           =
                           expression
                            &
                            mut
                            expression
                             *
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               padding_size
                           =
                           expression
                            expression
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    me
                              .
                              identifier
                               enc_size_parser
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                next_padding_len
                             (
                             )
                            as
                            typeNoBounds
                             traitObjectTypeOneBound
                              traitBound
                               typePath
                                typePathSegment
                                 pathIdentSegment
                                  identifier
                                   usize
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               max_payload_size
                           =
                           expression
                            expression
                             expression
                              literalExpression
                               0x4000
                             -
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    me
                              .
                              identifier
                               tag_len
                            -
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  padding_size
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               consume_len
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  min
                            (
                            callParams
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    buf
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 len
                              (
                              )
                             ,
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   max_payload_size
                            )
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               payload_len
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   consume_len
                             +
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    me
                              .
                              identifier
                               tag_len
                            +
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  padding_size
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               size_bytes
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              enc_size_parser
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               size_bytes
                            (
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              write_buf
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               resize
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   size_bytes
                             ,
                             expression
                              literalExpression
                               0
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              enc_size_parser
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               encode
                            (
                            callParams
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    payload_len
                              as
                              typeNoBounds
                               traitObjectTypeOneBound
                                traitBound
                                 typePath
                                  typePathSegment
                                   pathIdentSegment
                                    identifier
                                     u16
                             ,
                             expression
                              &
                              mut
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     me
                               .
                               identifier
                                write_buf
                            )
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              mut
                              identifier
                               piece2
                           =
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              write_buf
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               split_off
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   size_bytes
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  piece2
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               reserve
                            (
                            callParams
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    consume_len
                              +
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     me
                               .
                               identifier
                                tag_len
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  piece2
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               put_slice
                            (
                            callParams
                             expression
                              &
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     buf
                               [
                               expression
                                ..
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      consume_len
                               ]
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     me
                               .
                               identifier
                                enc
                              .
                              pathExprSegment
                               pathIdentSegment
                                identifier
                                 encrypt
                              (
                              callParams
                               expression
                                &
                                mut
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      piece2
                              )
                             .
                             pathExprSegment
                              pathIdentSegment
                               identifier
                                map_err
                             (
                             callParams
                              expression
                               closureExpression
                                |
                                closureParameters
                                 closureParam
                                  pattern
                                   patternNoTopAlt
                                    patternWithoutRange
                                     wildcardPattern
                                      _
                                |
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       crypto_err
                                 (
                                 )
                             )
                            ?
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              mut
                              identifier
                               piece3
                           =
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  piece2
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               split_off
                            (
                            callParams
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    consume_len
                              +
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     me
                               .
                               identifier
                                tag_len
                            )
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifExpression
                             if
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    padding_size
                              comparisonOperator
                               >
                              expression
                               literalExpression
                                0
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        piece3
                                  .
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     resize
                                  (
                                  callParams
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         padding_size
                                   ,
                                   expression
                                    literalExpression
                                     0
                                  )
                                 ;
                               statement
                                letStatement
                                 let
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    mut
                                    identifier
                                     rng
                                 =
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        StdRng
                                     ::
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        from_entropy
                                  (
                                  )
                                 ;
                               statement
                                expressionStatement
                                 expressionWithBlock
                                  loopExpression
                                   iteratorLoopExpression
                                    for
                                    pattern
                                     patternNoTopAlt
                                      patternWithoutRange
                                       identifierPattern
                                        identifier
                                         i
                                    in
                                    expression
                                     expression
                                      literalExpression
                                       0
                                     ..
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            piece3
                                      .
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         len
                                      (
                                      )
                                    blockExpression
                                     {
                                     statements
                                      statement
                                       expressionStatement
                                        expression
                                         expression
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                piece3
                                          [
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                i
                                          ]
                                         =
                                         expression
                                          expression
                                           pathExpression
                                            pathInExpression
                                             pathExprSegment
                                              pathIdentSegment
                                               identifier
                                                rng
                                          .
                                          pathExprSegment
                                           pathIdentSegment
                                            identifier
                                             gen
                                          (
                                          )
                                        ;
                                     }
                              }
                         statement
                          expressionStatement
                           expression
                            expression
                             pathExpression
                              pathInExpression
                               pathExprSegment
                                pathIdentSegment
                                 identifier
                                  piece2
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               unsplit
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   piece3
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              write_buf
                            .
                            pathExprSegment
                             pathIdentSegment
                              identifier
                               unsplit
                            (
                            callParams
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   piece2
                            )
                           ;
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                             .
                             identifier
                              write_state
                            =
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   WriteState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PendingChunk
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    consume_len
                              ,
                              expression
                               (
                               tupleElements
                                expression
                                 expression
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        me
                                  .
                                  identifier
                                   write_buf
                                 .
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    len
                                 (
                                 )
                                ,
                                expression
                                 literalExpression
                                  0
                               )
                             )
                           ;
                        }
                     matchArm
                      pattern
                       patternNoTopAlt
                        patternWithoutRange
                         tupleStructPattern
                          pathInExpression
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              WriteState
                           ::
                           pathExprSegment
                            pathIdentSegment
                             identifier
                              PendingChunk
                          (
                          tupleStructItems
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              identifierPattern
                               identifier
                                consumed
                           ,
                           pattern
                            patternNoTopAlt
                             patternWithoutRange
                              tuplePattern
                               (
                               tuplePatternItems
                                pattern
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     total
                                ,
                                pattern
                                 patternNoTopAlt
                                  patternWithoutRange
                                   identifierPattern
                                    identifier
                                     written
                               )
                          )
                     =>
                     expression
                      expressionWithBlock
                       blockExpression
                        {
                        statements
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               me
                           =
                           expression
                            &
                            mut
                            expression
                             *
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  self
                           ;
                         statement
                          letStatement
                           let
                           patternNoTopAlt
                            patternWithoutRange
                             identifierPattern
                              identifier
                               nw
                           =
                           expression
                            expression
                             macroInvocation
                              simplePath
                               simplePathSegment
                                identifier
                                 ready
                              !
                              delimTokenTree
                               (
                               tokenTree
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   Pin
                                tokenTreeToken
                                 macroPunctuationToken
                                  ::
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   new
                               tokenTree
                                delimTokenTree
                                 (
                                 tokenTree
                                  tokenTreeToken
                                   macroPunctuationToken
                                    &
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    keyword
                                     mut
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     me
                                  tokenTreeToken
                                   macroPunctuationToken
                                    .
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     inner
                                 )
                               tokenTree
                                tokenTreeToken
                                 macroPunctuationToken
                                  .
                                tokenTreeToken
                                 macroIdentifierLikeToken
                                  identifier
                                   poll_write_buf
                               tokenTree
                                delimTokenTree
                                 (
                                 tokenTree
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     cx
                                  tokenTreeToken
                                   macroPunctuationToken
                                    ,
                                  tokenTreeToken
                                   macroPunctuationToken
                                    &
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    keyword
                                     mut
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     me
                                  tokenTreeToken
                                   macroPunctuationToken
                                    .
                                  tokenTreeToken
                                   macroIdentifierLikeToken
                                    identifier
                                     write_buf
                                 )
                               )
                            ?
                           ;
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifExpression
                             if
                             expression
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    nw
                              comparisonOperator
                               ==
                              expression
                               literalExpression
                                0
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  return
                                  expression
                                   expression
                                    expression
                                     pathExpression
                                      pathInExpression
                                       pathExprSegment
                                        pathIdentSegment
                                         identifier
                                          Err
                                    (
                                    callParams
                                     expression
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            eof
                                      (
                                      )
                                    )
                                   .
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      into
                                   (
                                   )
                                 ;
                              }
                         statement
                          expressionStatement
                           expressionWithBlock
                            ifExpression
                             if
                             expression
                              expression
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     written
                               +
                               expression
                                pathExpression
                                 pathInExpression
                                  pathExprSegment
                                   pathIdentSegment
                                    identifier
                                     nw
                              comparisonOperator
                               >=
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    total
                             blockExpression
                              {
                              statements
                               statement
                                expressionStatement
                                 expression
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         me
                                   .
                                   identifier
                                    write_state
                                  =
                                  expression
                                   pathExpression
                                    pathInExpression
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        WriteState
                                     ::
                                     pathExprSegment
                                      pathIdentSegment
                                       identifier
                                        WaitingChunk
                                 ;
                               statement
                                expressionStatement
                                 expression
                                  return
                                  expression
                                   expression
                                    pathExpression
                                     pathInExpression
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Poll
                                      ::
                                      pathExprSegment
                                       pathIdentSegment
                                        identifier
                                         Ready
                                   (
                                   callParams
                                    expression
                                     expression
                                      pathExpression
                                       pathInExpression
                                        pathExprSegment
                                         pathIdentSegment
                                          identifier
                                           Ok
                                     (
                                     callParams
                                      expression
                                       pathExpression
                                        pathInExpression
                                         pathExprSegment
                                          pathIdentSegment
                                           identifier
                                            consumed
                                     )
                                   )
                                 ;
                              }
                         statement
                          expressionStatement
                           expression
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   me
                             .
                             identifier
                              write_state
                            =
                            expression
                             expression
                              pathExpression
                               pathInExpression
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   WriteState
                                ::
                                pathExprSegment
                                 pathIdentSegment
                                  identifier
                                   PendingChunk
                             (
                             callParams
                              expression
                               pathExpression
                                pathInExpression
                                 pathExprSegment
                                  pathIdentSegment
                                   identifier
                                    consumed
                              ,
                              expression
                               (
                               tupleElements
                                expression
                                 pathExpression
                                  pathInExpression
                                   pathExprSegment
                                    pathIdentSegment
                                     identifier
                                      total
                                ,
                                expression
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       written
                                 +
                                 expression
                                  pathExpression
                                   pathInExpression
                                    pathExprSegment
                                     pathIdentSegment
                                      identifier
                                       nw
                               )
                             )
                           ;
                        }
                    }
               }
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_flush
       (
       functionParameters
        selfParam
         typedSelf
          mut
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Pin
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    referenceType
                     &
                     mut
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           Self
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        io
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                       >
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 Pin
              ::
              pathExprSegment
               pathIdentSegment
                identifier
                 new
           (
           callParams
            expression
             &
             mut
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              identifier
               inner
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             poll_flush
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 cx
          )
        }
     associatedItem
      function_
       functionQualifiers
       fn
       identifier
        poll_shutdown
       (
       functionParameters
        selfParam
         typedSelf
          mut
          self
          :
          type_
           typeNoBounds
            traitObjectTypeOneBound
             traitBound
              typePath
               typePathSegment
                pathIdentSegment
                 identifier
                  Pin
                genericArgs
                 <
                 genericArgsTypes
                  type_
                   typeNoBounds
                    referenceType
                     &
                     mut
                     typeNoBounds
                      traitObjectTypeOneBound
                       traitBound
                        typePath
                         typePathSegment
                          pathIdentSegment
                           Self
                 >
        ,
        functionParam
         functionParamPattern
          pattern
           patternNoTopAlt
            patternWithoutRange
             identifierPattern
              identifier
               cx
          :
          type_
           typeNoBounds
            referenceType
             &
             mut
             typeNoBounds
              traitObjectTypeOneBound
               traitBound
                typePath
                 typePathSegment
                  pathIdentSegment
                   identifier
                    Context
       )
       functionReturnType
        ->
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                Poll
              genericArgs
               <
               genericArgsTypes
                type_
                 typeNoBounds
                  traitObjectTypeOneBound
                   traitBound
                    typePath
                     typePathSegment
                      pathIdentSegment
                       identifier
                        io
                     ::
                     typePathSegment
                      pathIdentSegment
                       identifier
                        Result
                      genericArgs
                       <
                       genericArgsTypes
                        type_
                         typeNoBounds
                          tupleType
                           (
                           )
                       >
               >
       blockExpression
        {
        statements
         expression
          expression
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 Pin
              ::
              pathExprSegment
               pathIdentSegment
                identifier
                 new
           (
           callParams
            expression
             &
             mut
             expression
              expression
               pathExpression
                pathInExpression
                 pathExprSegment
                  pathIdentSegment
                   self
              .
              identifier
               inner
           )
          .
          pathExprSegment
           pathIdentSegment
            identifier
             poll_shutdown
          (
          callParams
           expression
            pathExpression
             pathInExpression
              pathExprSegment
               pathIdentSegment
                identifier
                 cx
          )
        }
     }
 <EOF>
