crate
 innerAttribute
  #
  !
  [
  attr
   simplePath
    simplePathSegment
     identifier
      allow
   attrInput
    delimTokenTree
     (
     tokenTree
      tokenTreeToken
       macroIdentifierLikeToken
        identifier
         unused
     )
  ]
 item
  visItem
   function_
    functionQualifiers
    fn
    identifier
     main
    (
    )
    blockExpression
     {
     statements
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        =
        expression
         literalExpression
          "foobar"
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            b
        =
        expression
         literalExpression
          "foo\\n         bar"
        ;
      statement
       item
        macroItem
         macroInvocationSemi
          simplePath
           simplePathSegment
            identifier
             assert_eq
          !
          (
          tokenTree
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              a
           tokenTreeToken
            macroPunctuationToken
             ,
           tokenTreeToken
            macroIdentifierLikeToken
             identifier
              b
          )
          ;
      statement
       expressionStatement
        expression
         literalExpression
          "foo"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          r"foo"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          "\"foo\""
        ;
      statement
       expressionStatement
        expression
         literalExpression
          r#""foo""#
        ;
      statement
       expressionStatement
        expression
         literalExpression
          "foo #\"# bar"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          r##"foo #"# bar"##
        ;
      statement
       expressionStatement
        expression
         literalExpression
          "\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          "R"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          r"R"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          "\\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          r"\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"foo"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          br"foo"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"\"foo\""
        ;
      statement
       expressionStatement
        expression
         literalExpression
          br#""foo""#
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"foo #\"# bar"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          br##"foo #"# bar"##
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"R"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          br"R"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          b"\\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          br"\x52"
        ;
      statement
       expressionStatement
        expression
         literalExpression
          123
        ;
      statement
       expressionStatement
        expression
         literalExpression
          123i32
        ;
      statement
       expressionStatement
        expression
         literalExpression
          123u32
        ;
      statement
       expressionStatement
        expression
         literalExpression
          123_u32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            a
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                u64
        =
        expression
         literalExpression
          123
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0xff
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0xff_u8
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0o70
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0o70_i16
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0b1111_1111_1001_0000
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0b1111_1111_1001_0000i64
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0b________1
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0usize
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            example
        =
        expression
         (
         tupleElements
          expression
           literalExpression
            "dog"
          ,
          expression
           literalExpression
            "cat"
          ,
          expression
           literalExpression
            "horse"
         )
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            dog
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               example
         .
         tupleIndex
          0
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            cat
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               example
         .
         tupleIndex
          1
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            cat
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               example
         .
         tupleIndex
          01
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            horse
        =
        expression
         expression
          pathExpression
           pathInExpression
            pathExprSegment
             pathIdentSegment
              identifier
               example
         .
         tupleIndex
          0b10
        ;
      statement
       expressionStatement
        expression
         literalExpression
          123.0f64
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0.1f64
        ;
      statement
       expressionStatement
        expression
         literalExpression
          0.1f32
        ;
      statement
       expressionStatement
        expression
         literalExpression
          12E+99_f64
        ;
      statement
       expressionStatement
        expression
         literalExpression
          5f32
        ;
      statement
       letStatement
        let
        patternNoTopAlt
         patternWithoutRange
          identifierPattern
           identifier
            x
        :
        type_
         typeNoBounds
          traitObjectTypeOneBound
           traitBound
            typePath
             typePathSegment
              pathIdentSegment
               identifier
                f64
        =
        expression
         literalExpression
          2.
        ;
     }
 <EOF>
