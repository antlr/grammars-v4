parse
 block
  expression
   macro_def
    defmacro
    variable
     defkv
    (
    expressions_
     expression
      variables
       variable
        kv
    )
    do_block
     do
     \n
     block
      expression
       expression
        Enum
       expression_tail
        .
        expression
         expression
          variables
           variable
            map
         (
         expressions_
          expression
           variables
            variable
             kv
          ,
          expression
           anonymous_function
            fn
            expressions_
             expression
              tuple
               {
               expressions_
                expression
                 variables
                  variable
                   k
                  ,
                  variable
                   v
               }
            ->
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   function_def
                    def
                    variable
                     unquote
                    (
                    expressions_
                     expression
                      variables
                       variable
                        k
                    )
                    (
                    )
                    ,
                    do
                    :
                    expression
                     expression
                      variables
                       variable
                        unquote
                     (
                     expressions_
                      expression
                       variables
                        variable
                         v
                     )
                  eoe
                   \n
                 end
             eoe
              \n
            end
         )
      eoe
       \n
     end
 <EOF>
