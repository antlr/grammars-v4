parse
 block
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         sum
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              a
           addOp
            +
           expression
            variables
             variable
              b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         sum
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              do_sum
           (
           expressions_
            expression
             variables
              variable
               a
              ,
              variable
               b
           )
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        defp
        variable
         do_sum
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              a
           addOp
            +
           expression
            variables
             variable
              b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Concat
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         join
        (
        expressions_
         expression
          expression
           variables
            variable
             a
            ,
            variable
             b
            ,
            variable
             sep
          \\
          expression
           " "
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              a
           listOp
            <>
           expression
            expression
             variables
              variable
               sep
            expressions_
             expression
              expression
               operator
                listOp
                 <>
              expressions_
               expression
                variables
                 variable
                  b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       macro_def
        defmacro
        variable
         squared
        (
        expressions_
         expression
          variables
           variable
            x
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              quote
           expressions_
            expression
             do_block
              do
              \n
              block
               expression
                expression
                 variables
                  variable
                   x
                =
                expression
                 expression
                  variables
                   variable
                    unquote
                 (
                 expressions_
                  expression
                   variables
                    variable
                     x
                 )
               eoe
                \n
               expression
                expression
                 variables
                  variable
                   x
                mulOp
                 *
                expression
                 variables
                  variable
                   x
               eoe
                \n
              end
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       macro_def
        defmacro
        variable
         squared
        (
        expressions_
         expression
          variables
           variable
            x
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              quote
           options_
            option
             variable
              bind_quoted
             :
             expression
              list
               [
               short_map_entries
                short_map_entry
                 variable
                  x
                 :
                 expression
                  variables
                   variable
                    x
               ]
           expressions_
            expression
             do_block
              do
              \n
              block
               expression
                expression
                 variables
                  variable
                   x
                mulOp
                 *
                expression
                 variables
                  variable
                   x
               eoe
                \n
              end
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Hygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            no_interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    variables
                     variable
                      a
                   =
                   expression
                    1
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    NoHygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    expression
                     variables
                      variable
                       var!
                    (
                    expressions_
                     expression
                      variables
                       variable
                        a
                    )
                   =
                   expression
                    1
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Hygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            write
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    variables
                     variable
                      a
                   =
                   expression
                    1
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            read
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   variables
                    variable
                     a
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    ContextHygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            write
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    expression
                     variables
                      variable
                       var!
                    (
                    expressions_
                     expression
                      variables
                       variable
                        a
                     ,
                     expression
                      ContextHygiene
                    )
                   =
                   expression
                    1
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            read
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    variables
                     variable
                      var!
                   (
                   expressions_
                    expression
                     variables
                      variable
                       a
                    ,
                    expression
                     ContextHygiene
                   )
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Hygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          alias
       expressions_
        expression
         Map
       ,
       options_
        option
         variable
          as
         :
         expression
          M
      eoe
       \n
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            no_interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    M
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        new
                     (
                     )
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Hygiene
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          alias
       expressions_
        expression
         Map
       ,
       options_
        option
         variable
          as
         :
         expression
          M
      eoe
       \n
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            no_interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    M
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        new
                     (
                     )
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Hygiene
    do_block
     do
     \n
     \n
     block
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            no_interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    Nested
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        hello
                     (
                     )
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
       \n
       \n
      expression
       expression
        variables
         variable
          defmacro
       expressions_
        expression
         expression
          variables
           variable
            interference
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 quote
              expressions_
               expression
                do_block
                 do
                 \n
                 block
                  expression
                   expression
                    expression
                     variables
                      variable
                       alias!
                    (
                    expressions_
                     expression
                      Nested
                    )
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        hello
                     (
                     )
                  eoe
                   \n
                 end
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Parent
    do_block
     do
     \n
     block
      expression
       module_def
        defmodule
        Nested
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             hello
            ,
            do
            :
            expression
             "world"
          eoe
           \n
         end
      eoe
       \n
      expression
       expression
        variables
         variable
          require
       expressions_
        expression
         Hygiene
      eoe
       \n
      expression
       expression
        Hygiene
       expression_tail
        .
        expression
         expression
          variables
           variable
            no_interference
         (
         )
      eoe
       \n
      expression
       expression
        Hygiene
       expression_tail
        .
        expression
         expression
          variables
           variable
            interference
         (
         )
      eoe
       \n
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Mu
    do_block
     do
     \n
     block
      expression
       macro_def
        defmacro
        variable
         defkv
        (
        expressions_
         expression
          variables
           variable
            kv
        )
        do_block
         do
         \n
         block
          expression
           expression
            Enum
           expression_tail
            .
            expression
             expression
              variables
               variable
                map
             (
             expressions_
              expression
               variables
                variable
                 kv
              ,
              expression
               anonymous_function
                fn
                expressions_
                 expression
                  tuple
                   {
                   expressions_
                    expression
                     variables
                      variable
                       k
                      ,
                      variable
                       v
                   }
                ->
                \n
                block
                 expression
                  expression
                   variables
                    variable
                     quote
                  expressions_
                   expression
                    do_block
                     do
                     \n
                     block
                      expression
                       function_def
                        def
                        variable
                         unquote
                        (
                        expressions_
                         expression
                          variables
                           variable
                            k
                        )
                        (
                        )
                        ,
                        do
                        :
                        expression
                         expression
                          variables
                           variable
                            unquote
                         (
                         expressions_
                          expression
                           variables
                            variable
                             v
                         )
                      eoe
                       \n
                     end
                 eoe
                  \n
                end
             )
          eoe
           \n
         end
      eoe
       \n
     end
 <EOF>
