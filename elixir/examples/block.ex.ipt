parse
 block
  expression
   expression
    variables
     variable
      string
   =
   expression
    "hello"
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      is_binary
   (
   expressions_
    expression
     variables
      variable
       string
   )
  eoe
   \n
   \n
  expression
   ?a
  eoe
   \n
   \n
  expression
   ?l
  eoe
   \n
   \n
  expression
   expression
    "\u0061"
   eqOp
    ==
   expression
    "a"
  eoe
   \n
   \n
  expression
   expression
    expression
     0x0061
    =
    expression
     97
   =
   expression
    ?a
  eoe
   \n
   \n
  expression
   expression
    IO
   expression_tail
    .
    expression
     expression
      variables
       variable
        inspect
     (
     expressions_
      expression
       "hello"
     ,
     options_
      option
       variable
        binaries
       :
       expression
        :as_binaries
     )
  eoe
   \n
   \n
  expression
   expression
    String
   expression_tail
    .
    expression
     expression
      variables
       variable
        split
     (
     expressions_
      expression
       "1  2  3"
      ,
      expression
       " "
      ,
      expression
       list
        [
        short_map_entries
         short_map_entry
          variable
           trim
          :
          expression
           bool_
            true
        ]
     )
  eoe
   \n
   \n
  expression
   expression
    list
     [
     expressions_
      expression
       tuple
        {
        expressions_
         expression
          :trim
         ,
         expression
          bool_
           true
        }
     ]
   eqOp
    ==
   expression
    list
     [
     short_map_entries
      short_map_entry
       variable
        trim
       :
       expression
        bool_
         true
     ]
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      list
   expression_tail
    [
    expression
     :a
    ]
  eoe
   \n
   \n
  expression
   expression
    (
    expression
     &
     expression
      expression
       variables
        variable
         is_function
      mulOp
       /
      expression
       1
    )
   expression_tail
    .
    expression
     (
     expression
      variables
       variable
        fun
     )
  eoe
   \n
   \n
  expression
   &
   expression
    expression
     Math
    expression_tail
     .
     expression
      expression
       variables
        variable
         zero?
      mulOp
       /
      expression
       1
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      users
   =
   expression
    expression
     variables
      variable
       update_in
    expressions_
     expression
      expression
       expression
        variables
         variable
          users
       expression_tail
        [
        expression
         :mary
        ]
      expression_tail
       .
       expression
        variables
         variable
          languages
     ,
     expression
      anonymous_function
       fn
       expressions_
        expression
         variables
          variable
           languages
       ->
       block
        expression
         expression
          List
         expression_tail
          .
          expression
           expression
            variables
             variable
              delete
           (
           expressions_
            expression
             variables
              variable
               languages
            ,
            expression
             "Clojure"
           )
       end
  eoe
   \n
   \n
  expression
   expression
    DefaultTest
   expression_tail
    .
    expression
     expression
      variables
       variable
        dowork
     expressions_
      expression
       123
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Concat
    do_block
     do
     \n
     \n
     block
      expression
       expression
        variables
         variable
          def
       expressions_
        expression
         expression
          variables
           variable
            join
         (
         expressions_
          expression
           expression
            variables
             variable
              a
             ,
             variable
              b
           \\
           expression
            nil
          ,
          expression
           expression
            variables
             variable
              sep
           \\
           expression
            " "
         )
      eoe
       \n
      expression
       function_def
        def
        variable
         join
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
           ,
           variable
            _sep
        )
        when
        expression
         expression
          variables
           variable
            is_nil
         (
         expressions_
          expression
           variables
            variable
             b
         )
        do_block
         do
         \n
         block
          expression
           variables
            variable
             a
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        def
        variable
         join
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
           ,
           variable
            sep
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              a
           listOp
            <>
           expression
            expression
             variables
              variable
               sep
            expressions_
             expression
              expression
               operator
                listOp
                 <>
              expressions_
               expression
                variables
                 variable
                  b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    IO
   expression_tail
    .
    expression
     expression
      variables
       variable
        puts
     expressions_
      expression
       expression
        Concat
       expression_tail
        .
        expression
         expression
          variables
           variable
            join
         (
         expressions_
          expression
           "Hello"
          ,
          expression
           "world"
         )
  eoe
   \n
   \n
  expression
   expression
    IO
   expression_tail
    .
    expression
     expression
      variables
       variable
        puts
     expressions_
      expression
       expression
        Concat
       expression_tail
        .
        expression
         expression
          variables
           variable
            join
         (
         expressions_
          expression
           "Hello"
          ,
          expression
           "world"
          ,
          expression
           "_"
         )
  eoe
   \n
   \n
  expression
   expression
    IO
   expression_tail
    .
    expression
     expression
      variables
       variable
        puts
     expressions_
      expression
       expression
        Concat
       expression_tail
        .
        expression
         expression
          variables
           variable
            join
         (
         expressions_
          expression
           "Hello"
         )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Concat
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         join
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        do_block
         do
         \n
         block
          expression
           expression
            IO
           expression_tail
            .
            expression
             expression
              variables
               variable
                puts
             expressions_
              expression
               "***First join"
          eoe
           \n
          expression
           expression
            variables
             variable
              a
           listOp
            <>
           expression
            variables
             variable
              b
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        def
        variable
         join
        (
        expressions_
         expression
          expression
           variables
            variable
             a
            ,
            variable
             b
            ,
            variable
             sep
          \\
          expression
           " "
        )
        do_block
         do
         \n
         block
          expression
           expression
            IO
           expression_tail
            .
            expression
             expression
              variables
               variable
                puts
             expressions_
              expression
               "***Second join"
          eoe
           \n
          expression
           expression
            variables
             variable
              a
           listOp
            <>
           expression
            expression
             variables
              variable
               sep
            expressions_
             expression
              expression
               operator
                listOp
                 <>
              expressions_
               expression
                variables
                 variable
                  b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    Concat
   expression_tail
    .
    expression
     expression
      variables
       variable
        join
     expressions_
      expression
       "Hello"
      ,
      expression
       "world"
      ,
      expression
       "_"
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Recursion
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         print_multiple_times
        (
        expressions_
         expression
          variables
           variable
            msg
           ,
           variable
            n
        )
        when
        expression
         expression
          variables
           variable
            n
         relOp
          >
         expression
          0
        do_block
         do
         \n
         block
          expression
           expression
            IO
           expression_tail
            .
            expression
             expression
              variables
               variable
                puts
             (
             expressions_
              expression
               variables
                variable
                 msg
             )
          eoe
           \n
          expression
           expression
            variables
             variable
              print_multiple_times
           (
           expressions_
            expression
             expression
              variables
               variable
                msg
               ,
               variable
                n
             addOp
              -
             expression
              1
           )
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        def
        variable
         print_multiple_times
        (
        expressions_
         expression
          variables
           variable
            _msg
         ,
         expression
          0
        )
        do_block
         do
         \n
         block
          expression
           :ok
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         sum_list
        (
        expressions_
         expression
          list
           [
           expressions_
            expression
             expression
              variables
               variable
                head
             |
             expression
              variables
               variable
                tail
           ]
         ,
         expression
          variables
           variable
            accumulator
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              sum_list
           (
           expressions_
            expression
             expression
              variables
               variable
                tail
               ,
               variable
                head
             addOp
              +
             expression
              variables
               variable
                accumulator
           )
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        def
        variable
         sum_list
        (
        expressions_
         expression
          list
           [
           ]
         ,
         expression
          variables
           variable
            accumulator
        )
        do_block
         do
         \n
         block
          expression
           variables
            variable
             accumulator
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    IO
   expression_tail
    .
    expression
     expression
      variables
       variable
        puts
     expressions_
      expression
       expression
        Math
       expression_tail
        .
        expression
         expression
          variables
           variable
            sum_list
         (
         expressions_
          expression
           list
            [
            expressions_
             expression
              1
             ,
             expression
              2
             ,
             expression
              3
            ]
          ,
          expression
           0
         )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         double_each
        (
        expressions_
         expression
          list
           [
           expressions_
            expression
             expression
              variables
               variable
                head
             |
             expression
              variables
               variable
                tail
           ]
        )
        do_block
         do
         \n
         block
          expression
           list
            [
            expressions_
             expression
              expression
               expression
                variables
                 variable
                  head
               mulOp
                *
               expression
                2
              |
              expression
               expression
                variables
                 variable
                  double_each
               (
               expressions_
                expression
                 variables
                  variable
                   tail
               )
            ]
          eoe
           \n
         end
      eoe
       \n
      expression
       function_def
        def
        variable
         double_each
        (
        expressions_
         expression
          list
           [
           ]
        )
        do_block
         do
         \n
         block
          expression
           list
            [
            ]
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        reduce
     (
     expressions_
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          2
         ,
         expression
          3
        ]
      ,
      expression
       0
      ,
      expression
       anonymous_function
        fn
        expressions_
         expression
          (
          expression
           variables
            variable
             x
            ,
            variable
             acc
          )
        ->
        block
         expression
          expression
           variables
            variable
             x
          addOp
           +
          expression
           variables
            variable
             acc
        end
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        reduce
     (
     expressions_
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          2
         ,
         expression
          3
        ]
      ,
      expression
       0
      ,
      expression
       &
       expression
        unaryOp
         +
        expression
         expression
          operator
           mulOp
            /
         expressions_
          expression
           2
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        map
     (
     expressions_
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          2
         ,
         expression
          3
        ]
      ,
      expression
       &
       expression
        (
        expression
         &
         expression
          expression
           1
          mulOp
           *
          expression
           2
        )
     )
  eoe
   \n
   \n
  expression
   &
   expression
    expression
     Kernel
    expression_tail
     .
     expression
      unaryOp
       +
      expression
       expression
        operator
         mulOp
          /
       expressions_
        expression
         2
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      add
   =
   expression
    &
    expression
     (
     expression
      &
      expression
       expression
        1
       addOp
        +
       expression
        &
        expression
         2
     )
  eoe
   \n
   \n
  expression
   expression
    'abcdaabccc'
   |>
   expression
    expression
     Enum
    expression_tail
     .
     expression
      expression
       expression
        variables
         variable
          sort
       (
       )
      |>
      expression
       expression
        Enum
       expression_tail
        .
        expression
         expression
          variables
           variable
            chunk_by
         (
         expressions_
          expression
           &
           expression
            expression
             Function
            expression_tail
             .
             expression
              expression
               variables
                variable
                 identity
              mulOp
               /
              expression
               1
         )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      import
   expressions_
    expression
     List
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      import
   expressions_
    expression
     List
   ,
   options_
    option
     variable
      only
     :
     expression
      :functions
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      import
   expressions_
    expression
     List
   ,
   options_
    option
     variable
      only
     :
     expression
      list
       [
       short_map_entries
        short_map_entry
         variable
          flatten
         :
         expression
          1
        ,
        short_map_entry
         variable
          keyfind
         :
         expression
          4
       ]
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      import
   expressions_
    expression
     expression
      File
     expression_tail
      .
      expression
       Stream
   ,
   options_
    option
     variable
      only
     :
     expression
      list
       [
       short_map_entries
        short_map_entry
         variable
          __build__
         :
         expression
          3
       ]
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      quote
   expressions_
    expression
     do_block
      do
      \n
      block
       expression
        expression
         variables
          variable
           unquote
        (
        expressions_
         expression
          "hello"
        )
       eoe
        \n
      end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      quote
   options_
    option
     variable
      unquote
     :
     expression
      bool_
       false
   expressions_
    expression
     do_block
      do
      \n
      block
       expression
        expression
         variables
          variable
           unquote
        (
        expressions_
         expression
          "hello"
        )
       eoe
        \n
      end
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        map
     (
     expressions_
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          2
         ,
         expression
          3
        ]
      ,
      expression
       anonymous_function
        fn
        expressions_
         expression
          variables
           variable
            x
        ->
        block
         expression
          expression
           variables
            variable
             x
          mulOp
           *
          expression
           2
        end
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        map
     (
     expressions_
      expression
       map
        %{
        map_entries
         map_entry
          expression
           1
          =>
          expression
           2
         ,
         map_entry
          expression
           3
          =>
          expression
           4
        }
      ,
      expression
       anonymous_function
        fn
        expressions_
         expression
          tuple
           {
           expressions_
            expression
             variables
              variable
               k
              ,
              variable
               v
           }
        ->
        block
         expression
          expression
           variables
            variable
             k
          mulOp
           *
          expression
           variables
            variable
             v
        end
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        map
     (
     expressions_
      expression
       expression
        1
       listOp
        ..
       expression
        3
      ,
      expression
       anonymous_function
        fn
        expressions_
         expression
          variables
           variable
            x
        ->
        block
         expression
          expression
           variables
            variable
             x
          mulOp
           *
          expression
           2
        end
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        reduce
     (
     expressions_
      expression
       expression
        1
       listOp
        ..
       expression
        3
      ,
      expression
       0
      ,
      expression
       &
       expression
        unaryOp
         +
        expression
         expression
          operator
           mulOp
            /
         expressions_
          expression
           2
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      odd?
   =
   expression
    &
    expression
     (
     expression
      expression
       expression
        variables
         variable
          rem
       (
       expressions_
        expression
         &
         expression
          1
        ,
        expression
         2
       )
      eqOp
       !=
      expression
       0
     )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        filter
     (
     expressions_
      expression
       expression
        1
       listOp
        ..
       expression
        3
      ,
      expression
       variables
        variable
         odd?
     )
  eoe
   \n
   \n
  expression
   expression
    expression
     1
    listOp
     ..
    expression
     100_000
   |>
   expression
    expression
     Enum
    expression_tail
     .
     expression
      expression
       expression
        variables
         variable
          map
       (
       expressions_
        expression
         &
         expression
          (
          expression
           &
           expression
            expression
             1
            mulOp
             *
            expression
             3
          )
       )
      |>
      expression
       expression
        Enum
       expression_tail
        .
        expression
         expression
          expression
           variables
            variable
             filter
          (
          expressions_
           expression
            variables
             variable
              odd?
          )
         |>
         expression
          expression
           Enum
          expression_tail
           .
           expression
            expression
             variables
              variable
               sum
            (
            )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        sum
     (
     expressions_
      expression
       expression
        Enum
       expression_tail
        .
        expression
         expression
          variables
           variable
            filter
         (
         expressions_
          expression
           expression
            Enum
           expression_tail
            .
            expression
             expression
              variables
               variable
                map
             (
             expressions_
              expression
               expression
                1
               listOp
                ..
               expression
                100_000
              ,
              expression
               &
               expression
                (
                expression
                 &
                 expression
                  expression
                   1
                  mulOp
                   *
                  expression
                   3
                )
             )
          ,
          expression
           variables
            variable
             odd?
         )
     )
  eoe
   \n
   \n
  expression
   expression
    expression
     1
    listOp
     ..
    expression
     100_000
   |>
   expression
    expression
     Stream
    expression_tail
     .
     expression
      expression
       expression
        variables
         variable
          map
       (
       expressions_
        expression
         &
         expression
          (
          expression
           &
           expression
            expression
             1
            mulOp
             *
            expression
             3
          )
       )
      |>
      expression
       expression
        Stream
       expression_tail
        .
        expression
         expression
          expression
           variables
            variable
             filter
          (
          expressions_
           expression
            variables
             variable
              odd?
          )
         |>
         expression
          expression
           Enum
          expression_tail
           .
           expression
            variables
             variable
              sum
  eoe
   \n
   \n
  expression
   expression
    expression
     1
    listOp
     ..
    expression
     100_000
   |>
   expression
    expression
     Stream
    expression_tail
     .
     expression
      expression
       expression
        variables
         variable
          map
       (
       expressions_
        expression
         &
         expression
          (
          expression
           &
           expression
            expression
             1
            mulOp
             *
            expression
             3
          )
       )
      |>
      expression
       expression
        Stream
       expression_tail
        .
        expression
         expression
          variables
           variable
            filter
         (
         expressions_
          expression
           variables
            variable
             odd?
         )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      stream
   =
   expression
    expression
     Stream
    expression_tail
     .
     expression
      expression
       variables
        variable
         cycle
      (
      expressions_
       expression
        list
         [
         expressions_
          expression
           1
          ,
          expression
           2
          ,
          expression
           3
         ]
      )
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        take
     (
     expressions_
      expression
       variables
        variable
         stream
      ,
      expression
       10
     )
  eoe
   \n
   \n
  expression
   expression
    Stream
   expression_tail
    .
    expression
     expression
      variables
       variable
        unfold
     (
     expressions_
      expression
       "hello"
      ,
      expression
       &
       expression
        expression
         String
        expression_tail
         .
         expression
          expression
           variables
            variable
             next_codepoint
          mulOp
           /
          expression
           1
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      stream
   =
   expression
    expression
     File
    expression_tail
     .
     expression
      expression
       variables
        variable
         stream!
      (
      expressions_
       expression
        "path/to/file"
      )
  eoe
   \n
  expression
   map
    %File.Stream{
    \n
    short_map_entries
     short_map_entry
      variable
       line_or_bytes
      :
      expression
       :line
     ,
     \n
     short_map_entry
      variable
       modes
      :
      expression
       list
        [
        expressions_
         expression
          :raw
         ,
         expression
          :read_ahead
         ,
         expression
          :binary
        ]
     ,
     \n
     short_map_entry
      variable
       path
      :
      expression
       "path/to/file"
     ,
     \n
     short_map_entry
      variable
       raw
      :
      expression
       bool_
        true
    \n
    }
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      spawn
   (
   expressions_
    expression
     anonymous_function
      fn
      ->
      block
       expression
        expression
         1
        addOp
         +
        expression
         2
      end
   )
  eoe
   \n
   \n
  expression
   expression
    Process
   expression_tail
    .
    expression
     expression
      variables
       variable
        alive?
     (
     expressions_
      expression
       expression
        variables
         variable
          self
       (
       )
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      send
   (
   expressions_
    expression
     expression
      variables
       variable
        self
     (
     )
    ,
    expression
     tuple
      {
      expressions_
       expression
        :hello
       ,
       expression
        "world"
      }
   )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      receive
   expressions_
    expression
     do_block
      do
      \n
      block
       expression
        expression
         tuple
          {
          expressions_
           expression
            :hello
           ,
           expression
            variables
             variable
              msg
          }
        ->
        expression
         variables
          variable
           msg
       eoe
        \n
       expression
        expression
         tuple
          {
          expressions_
           expression
            :world
           ,
           expression
            variables
             variable
              _msg
          }
        ->
        expression
         "won't match"
       eoe
        \n
      end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      receive
   expressions_
    expression
     do_block
      do
      \n
      block
       expression
        expression
         tuple
          {
          expressions_
           expression
            :hello
           ,
           expression
            variables
             variable
              msg
          }
        ->
        expression
         variables
          variable
           msg
       eoe
        \n
      after
      \n
      block
       expression
        expression
         1_000
        ->
        expression
         "nothing after 1s"
       eoe
        \n
      end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      spawn
   (
   expressions_
    expression
     anonymous_function
      fn
      ->
      block
       expression
        expression
         variables
          variable
           send
        (
        expressions_
         expression
          variables
           variable
            parent
         ,
         expression
          tuple
           {
           expressions_
            expression
             :hello
            ,
            expression
             expression
              variables
               variable
                self
             (
             )
           }
        )
      end
   )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      receive
   expressions_
    expression
     do_block
      do
      \n
      block
       expression
        expression
         tuple
          {
          expressions_
           expression
            :hello
           ,
           expression
            variables
             variable
              pid
          }
        ->
        expression
         "Got hello from #{inspect pid}"
       eoe
        \n
      end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      spawn_link
   (
   expressions_
    expression
     anonymous_function
      fn
      ->
      block
       expression
        expression
         variables
          variable
           raise
        expressions_
         expression
          "oops"
      end
   )
  eoe
   \n
   \n
  expression
   expression
    Task
   expression_tail
    .
    expression
     expression
      variables
       variable
        start
     (
     expressions_
      expression
       anonymous_function
        fn
        ->
        block
         expression
          expression
           variables
            variable
             raise
          expressions_
           expression
            "oops"
        end
     )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    KV
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          def
       expressions_
        expression
         expression
          variables
           variable
            start_link
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               Task
              expression_tail
               .
               expression
                expression
                 variables
                  variable
                   start_link
                (
                expressions_
                 expression
                  anonymous_function
                   fn
                   ->
                   block
                    expression
                     expression
                      variables
                       variable
                        loop
                     (
                     expressions_
                      expression
                       map
                        %{
                        }
                     )
                   end
                )
             eoe
              \n
            end
      eoe
       \n
      expression
       function_def
        defp
        variable
         loop
        (
        expressions_
         expression
          variables
           variable
            map
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              receive
           expressions_
            expression
             do_block
              do
              \n
              block
               expression
                expression
                 tuple
                  {
                  expressions_
                   expression
                    :get
                   ,
                   expression
                    variables
                     variable
                      key
                     ,
                     variable
                      caller
                  }
                ->
                \n
                expression
                 expression
                  variables
                   variable
                    send
                 expressions_
                  expression
                   variables
                    variable
                     caller
                  ,
                  expression
                   expression
                    Map
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        get
                     (
                     expressions_
                      expression
                       variables
                        variable
                         map
                        ,
                        variable
                         key
                     )
               eoe
                \n
               expression
                expression
                 variables
                  variable
                   loop
                (
                expressions_
                 expression
                  variables
                   variable
                    map
                )
               eoe
                \n
               expression
                expression
                 tuple
                  {
                  expressions_
                   expression
                    :put
                   ,
                   expression
                    variables
                     variable
                      key
                     ,
                     variable
                      value
                  }
                ->
                \n
                expression
                 expression
                  variables
                   variable
                    loop
                 (
                 expressions_
                  expression
                   expression
                    Map
                   expression_tail
                    .
                    expression
                     expression
                      variables
                       variable
                        put
                     (
                     expressions_
                      expression
                       variables
                        variable
                         map
                        ,
                        variable
                         key
                        ,
                        variable
                         value
                     )
                 )
               eoe
                \n
              end
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    Process
   expression_tail
    .
    expression
     expression
      variables
       variable
        register
     (
     expressions_
      expression
       variables
        variable
         pid
      ,
      expression
       :kv
     )
  eoe
   \n
  expression
   expression
    variables
     variable
      send
   (
   expressions_
    expression
     :kv
    ,
    expression
     tuple
      {
      expressions_
       expression
        :get
       ,
       expression
        :hello
       ,
       expression
        expression
         variables
          variable
           self
        (
        )
      }
   )
  eoe
   \n
   \n
  expression
   case
    case
    expression
     1
    do
    \n
    condition
     expression
      expression
       variables
        variable
         x
      when
      expression
       expression
        variables
         variable
          hd
       (
       expressions_
        expression
         variables
          variable
           x
       )
     ->
     expression
      "Won't match"
     \n
    condition
     expression
      variables
       variable
        x
     ->
     expression
      "Got #{x}"
     \n
    end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      f
   =
   expression
    anonymous_function
     fn
     \n
     expressions_
      expression
       expression
        variables
         variable
          x
         ,
         variable
          y
       when
       expression
        expression
         variables
          variable
           x
        relOp
         >
        expression
         0
     ->
     block
      expression
       expression
        variables
         variable
          x
       addOp
        +
       expression
        variables
         variable
          y
      eoe
       \n
      expression
       expression
        variables
         variable
          x
         ,
         variable
          y
       ->
       expression
        expression
         variables
          variable
           x
        mulOp
         *
        expression
         variables
          variable
           y
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   cond
    cond
    do
    \n
    condition
     expression
      expression
       2
      addOp
       +
      expression
       expression
        2
       expressions_
        expression
         expression
          operator
           eqOp
            ==
         expressions_
          expression
           5
     ->
     \n
     expression
      "This will not be true"
     \n
    condition
     expression
      expression
       2
      mulOp
       *
      expression
       expression
        2
       expressions_
        expression
         expression
          operator
           eqOp
            ==
         expressions_
          expression
           3
     ->
     \n
     expression
      "Nor this"
     \n
    condition
     expression
      expression
       1
      addOp
       +
      expression
       expression
        1
       expressions_
        expression
         expression
          operator
           eqOp
            ==
         expressions_
          expression
           2
     ->
     \n
     expression
      "But this will"
     \n
    end
  eoe
   \n
   \n
  expression
   cond
    cond
    do
    \n
    condition
     expression
      expression
       variables
        variable
         hd
      (
      expressions_
       expression
        list
         [
         expressions_
          expression
           1
          ,
          expression
           2
          ,
          expression
           3
         ]
      )
     ->
     \n
     expression
      "1 is considered as true"
     \n
    end
  eoe
   \n
   \n
  expression
   if
    if
    expression
     nil
    do
    \n
    block
     expression
      "This won't be seen"
     eoe
      \n
    else
    \n
    block
     expression
      "This will"
     eoe
      \n
    end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      query
   =
   expression
    expression
     variables
      variable
       from
    expressions_
     expression
      expression
       variables
        variable
         w
      inOp
       in
      expression
       Weather
    ,
    options_
     option
      variable
       where
      :
      expression
       expression
        variables
         variable
          w
       expression_tail
        .
        expression
         expression
          variables
           variable
            prcp
         relOp
          >
         expression
          0
     ,
     option
      variable
       where
      :
      expression
       expression
        variables
         variable
          w
       expression_tail
        .
        expression
         expression
          variables
           variable
            temp
         relOp
          <
         expression
          20
     ,
     option
      variable
       select
      :
      expression
       variables
        variable
         w
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      query
   =
   expression
    expression
     variables
      variable
       from
    expressions_
     expression
      expression
       variables
        variable
         w
      inOp
       in
      expression
       Weather
    ,
    \n
    options_
     option
      variable
       where
      :
      expression
       expression
        variables
         variable
          w
       expression_tail
        .
        expression
         expression
          variables
           variable
            prcp
         relOp
          >
         expression
          0
     ,
     \n
     option
      variable
       where
      :
      expression
       expression
        variables
         variable
          w
       expression_tail
        .
        expression
         expression
          variables
           variable
            temp
         relOp
          <
         expression
          20
     ,
     \n
     option
      variable
       select
      :
      expression
       variables
        variable
         w
  eoe
   \n
   \n
  expression
   if
    if
    expression
     bool_
      true
    ,
    do
    :
    expression
     "This will be seen"
    ,
    else
    :
    expression
     "This won't"
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      map
   =
   expression
    map
     %{
     map_entries
      map_entry
       expression
        :a
       =>
       expression
        1
      ,
      map_entry
       expression
        2
       =>
       expression
        :b
     }
  eoe
   \n
   \n
  expression
   expression
    map
     %{
     map_entries
      map_entry
       expression
        :a
       =>
       expression
        variables
         variable
          a
     }
   =
   expression
    map
     %{
     map_entries
      map_entry
       expression
        :a
       =>
       expression
        1
      ,
      map_entry
       expression
        2
       =>
       expression
        :b
     }
  eoe
   \n
   \n
  expression
   expression
    Map
   expression_tail
    .
    expression
     expression
      variables
       variable
        to_list
     (
     expressions_
      expression
       map
        %{
        map_entries
         map_entry
          expression
           :a
          =>
          expression
           1
         ,
         map_entry
          expression
           2
          =>
          expression
           :b
        }
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      users
   =
   expression
    list
     [
     \n
     short_map_entries
      short_map_entry
       variable
        john
       :
       expression
        map
         %{
         short_map_entries
          short_map_entry
           variable
            name
           :
           expression
            "John"
          ,
          short_map_entry
           variable
            age
           :
           expression
            27
          ,
          short_map_entry
           variable
            languages
           :
           expression
            list
             [
             expressions_
              expression
               "Erlang"
              ,
              expression
               "Ruby"
              ,
              expression
               "Elixir"
             ]
         }
      ,
      \n
      short_map_entry
       variable
        mary
       :
       expression
        map
         %{
         short_map_entries
          short_map_entry
           variable
            name
           :
           expression
            "Mary"
          ,
          short_map_entry
           variable
            age
           :
           expression
            29
          ,
          short_map_entry
           variable
            languages
           :
           expression
            list
             [
             expressions_
              expression
               "Elixir"
              ,
              expression
               "F#"
              ,
              expression
               "Clojure"
             ]
         }
     \n
     ]
  eoe
   \n
   \n
  expression
   expression
    expression
     variables
      variable
       users
    expression_tail
     [
     expression
      :john
     ]
   expression_tail
    .
    expression
     variables
      variable
       age
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      users
   =
   expression
    expression
     variables
      variable
       put_in
    expressions_
     expression
      expression
       expression
        variables
         variable
          users
       expression_tail
        [
        expression
         :john
        ]
      expression_tail
       .
       expression
        variables
         variable
          age
     ,
     expression
      31
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      users
   =
   expression
    expression
     variables
      variable
       update_in
    expressions_
     expression
      expression
       expression
        variables
         variable
          users
       expression_tail
        [
        expression
         :mary
        ]
      expression_tail
       .
       expression
        variables
         variable
          languages
     ,
     expression
      anonymous_function
       fn
       expressions_
        expression
         variables
          variable
           languages
       ->
       block
        expression
         expression
          List
         expression_tail
          .
          expression
           expression
            variables
             variable
              delete
           (
           expressions_
            expression
             variables
              variable
               languages
            ,
            expression
             "Clojure"
           )
       end
  eoe
   \n
   \n
  expression
   expression
    File
   expression_tail
    .
    expression
     expression
      variables
       variable
        read!
     (
     expressions_
      expression
       "path/to/file/unknown"
     )
  eoe
   \n
   \n
  expression
   expression
    tuple
     {
     expressions_
      expression
       :ok
      ,
      expression
       variables
        variable
         body
     }
   =
   expression
    expression
     File
    expression_tail
     .
     expression
      expression
       variables
        variable
         read
      (
      expressions_
       expression
        "path/to/file/unknown"
      )
  eoe
   \n
   \n
  expression
   list
    [
    expressions_
     expression
      ?a
     ,
     expression
      ?b
     ,
     expression
      ?c
    ]
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      alias
   expressions_
    expression
     expression
      Foo
     expression_tail
      .
      expression
       Bar
   ,
   options_
    option
     variable
      as
     :
     expression
      Bar
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      require
   expressions_
    expression
     Foo
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      import
   expressions_
    expression
     Foo
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      use
   expressions_
    expression
     Foo
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Stats
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          alias
       expressions_
        expression
         expression
          Math
         expression_tail
          .
          expression
           List
       ,
       options_
        option
         variable
          as
         :
         expression
          List
      eoe
       \n
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    AssertionTest
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          use
       expressions_
        expression
         expression
          ExUnit
         expression_tail
          .
          expression
           Case
       ,
       options_
        option
         variable
          async
         :
         expression
          bool_
           true
      eoe
       \n
      expression
       expression
        variables
         variable
          test
       expressions_
        expression
         expression
          "always pass"
         expressions_
          expression
           do_block
            do
            \n
            block
             expression
              expression
               variables
                variable
                 assert
              expressions_
               expression
                bool_
                 true
             eoe
              \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Example
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          require
       expressions_
        expression
         Feature
      eoe
       \n
      expression
       expression
        Feature
       expression_tail
        .
        expression
         expression
          variables
           variable
            __using__
         (
         options_
          option
           variable
            option
           :
           expression
            :value
         )
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    :"Elixir.List"
   expression_tail
    .
    expression
     expression
      variables
       variable
        flatten
     (
     expressions_
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          list
           [
           expressions_
            expression
             2
           ]
         ,
         expression
          3
        ]
     )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Foo
    do_block
     do
     \n
     block
      expression
       module_def
        defmodule
        Bar
        do_block
         do
         \n
         block
          expression
           module_def
            defmodule
            Baz
            do_block
             do
             \n
             end
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      alias
   expressions_
    expression
     expression
      MyApp
     expression_tail
      .
      expression
       tuple
        {
        expressions_
         expression
          Foo
         ,
         expression
          Bar
         ,
         expression
          Baz
        }
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    MyServer
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           moduledoc
        expressions_
         expression
          "My server code."
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           moduledoc
        expressions_
         expression
          """\n    Provides math-related functions.\n    ## Examples\n    iex> Math.sum(1, 2)\n    3\n  """
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           doc
        expressions_
         expression
          """\n    Calculates the sum of two numbers.\n  """
      eoe
       \n
      expression
       function_def
        def
        variable
         sum
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        ,
        do
        :
        expression
         expression
          variables
           variable
            a
         addOp
          +
         expression
          variables
           variable
            b
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    MyServer
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           initial_state
        expressions_
         expression
          map
           %{
           short_map_entries
            short_map_entry
             variable
              host
             :
             expression
              "127.0.0.1"
            ,
            short_map_entry
             variable
              port
             :
             expression
              3456
           }
      eoe
       \n
      expression
       expression
        IO
       expression_tail
        .
        expression
         expression
          variables
           variable
            inspect
         expressions_
          expression
           @
           expression
            variables
             variable
              initial_state
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    MyServer
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           my_data
        expressions_
         expression
          14
      eoe
       \n
      expression
       function_def
        def
        variable
         first_data
        ,
        do
        :
        expression
         @
         expression
          variables
           variable
            my_data
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           my_data
        expressions_
         expression
          13
      eoe
       \n
      expression
       function_def
        def
        variable
         second_data
        ,
        do
        :
        expression
         @
         expression
          variables
           variable
            my_data
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defmodule
   expressions_
    expression
     expression
      MyApp
     expression_tail
      .
      expression
       expression
        Status
       expressions_
        expression
         do_block
          do
          \n
          block
           expression
            @
            expression
             expression
              variables
               variable
                service
             expressions_
              expression
               expression
                URI
               expression_tail
                .
                expression
                 expression
                  variables
                   variable
                    parse
                 (
                 expressions_
                  expression
                   "https://example.com"
                 )
           eoe
            \n
           expression
            function_def
             def
             variable
              status
             (
             expressions_
              expression
               variables
                variable
                 email
             )
             do_block
              do
              \n
              block
               expression
                expression
                 SomeHttpClient
                expression_tail
                 .
                 expression
                  expression
                   variables
                    variable
                     get
                  (
                  expressions_
                   expression
                    @
                    expression
                     variables
                      variable
                       service
                  )
               eoe
                \n
              end
           eoe
            \n
          end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defmodule
   expressions_
    expression
     expression
      MyApp
     expression_tail
      .
      expression
       expression
        Status
       expressions_
        expression
         do_block
          do
          \n
          block
           expression
            function_def
             def
             variable
              status
             (
             expressions_
              expression
               variables
                variable
                 email
             )
             do_block
              do
              \n
              block
               expression
                expression
                 SomeHttpClient
                expression_tail
                 .
                 expression
                  expression
                   variables
                    variable
                     get
                  (
                  expressions_
                   expression
                    map
                     %URI{
                     \n
                     short_map_entries
                      short_map_entry
                       variable
                        authority
                       :
                       expression
                        "example.com"
                      ,
                      \n
                      short_map_entry
                       variable
                        host
                       :
                       expression
                        "example.com"
                      ,
                      \n
                      short_map_entry
                       variable
                        port
                       :
                       expression
                        443
                      ,
                      \n
                      short_map_entry
                       variable
                        scheme
                       :
                       expression
                        "https"
                     \n
                     }
                  )
               eoe
                \n
              end
           eoe
            \n
          end
  eoe
   \n
   \n
  expression
   function_def
    def
    variable
     some_function
    ,
    do
    :
    expression
     expression
      variables
       variable
        do_something_with
     (
     expressions_
      expression
       @
       expression
        variables
         variable
          example
     )
  eoe
   \n
   \n
  expression
   function_def
    def
    variable
     another_function
    ,
    do
    :
    expression
     expression
      variables
       variable
        do_something_else_with
     (
     expressions_
      expression
       @
       expression
        variables
         variable
          example
     )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Foo
    do_block
     do
     \n
     block
      expression
       expression
        Module
       expression_tail
        .
        expression
         expression
          variables
           variable
            register_attribute
         expressions_
          expression
           variables
            variable
             __MODULE__
          ,
          expression
           :param
         ,
         options_
          option
           variable
            accumulate
           :
           expression
            bool_
             true
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           param
        expressions_
         expression
          :foo
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           param
        expressions_
         expression
          :bar
      eoe
       \n
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    MyTest
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          use
       expressions_
        expression
         expression
          ExUnit
         expression_tail
          .
          expression
           Case
       ,
       options_
        option
         variable
          async
         :
         expression
          bool_
           true
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           tag
        expressions_
         expression
          :external
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           tag
        options_
         option
          variable
           os
          :
          expression
           :unix
      eoe
       \n
      expression
       expression
        variables
         variable
          test
       expressions_
        expression
         expression
          "contacts external service"
         expressions_
          expression
           do_block
            do
            \n
            \n
            end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    User
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defstruct
       options_
        option
         variable
          name
         :
         expression
          "John"
        ,
        option
         variable
          age
         :
         expression
          27
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   map
    %User{
    short_map_entries
     short_map_entry
      variable
       age
      :
      expression
       27
     ,
     short_map_entry
      variable
       name
      :
      expression
       "John"
    }
  eoe
   \n
   \n
  expression
   map
    %{
    expression
     variables
      variable
       jane
    |
    short_map_entries
     short_map_entry
      variable
       oops
      :
      expression
       :field
    }
  eoe
   \n
   \n
  expression
   expression
    map
     %User{
     }
   =
   expression
    map
     %{
     }
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      john
   expression_tail
    .
    expression
     variables
      variable
       __struct__
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        each
     (
     expressions_
      expression
       variables
        variable
         john
      ,
      expression
       anonymous_function
        fn
        expressions_
         expression
          tuple
           {
           expressions_
            expression
             variables
              variable
               field
              ,
              variable
               value
           }
        ->
        block
         expression
          expression
           IO
          expression_tail
           .
           expression
            expression
             variables
              variable
               puts
            (
            expressions_
             expression
              variables
               variable
                value
            )
        end
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      jane
   =
   expression
    expression
     Map
    expression_tail
     .
     expression
      expression
       variables
        variable
         put
      (
      expressions_
       expression
        map
         %User{
         }
       ,
       expression
        :name
       ,
       expression
        "Jane"
      )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Product
    do_block
     do
     \n
     block
      expression
       expression
        variables
         variable
          defstruct
       expression_tail
        [
        expression
         :name
        ]
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Car
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           enforce_keys
        expression_tail
         [
         expression
          :make
         ]
      eoe
       \n
      expression
       expression
        variables
         variable
          defstruct
       expressions_
        expression
         list
          [
          expressions_
           expression
            :model
           ,
           expression
            :make
          ]
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Utility
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         type
        (
        expressions_
         expression
          variables
           variable
            value
        )
        when
        expression
         expression
          variables
           variable
            is_binary
         (
         expressions_
          expression
           variables
            variable
             value
         )
        ,
        do
        :
        expression
         "string"
      eoe
       \n
      expression
       function_def
        def
        variable
         type
        (
        expressions_
         expression
          variables
           variable
            value
        )
        when
        expression
         expression
          variables
           variable
            is_integer
         (
         expressions_
          expression
           variables
            variable
             value
         )
        ,
        do
        :
        expression
         "integer"
      eoe
       \n
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defprotocol
   expressions_
    expression
     expression
      Utility
     expressions_
      expression
       do_block
        do
        \n
        block
         expression
          @
          expression
           expression
            variables
             variable
              spec
           expressions_
            expression
             expression
              expression
               variables
                variable
                 type
              (
              expressions_
               expression
                variables
                 variable
                  t
              )
             ::
             expression
              expression
               String
              expression_tail
               .
               expression
                expression
                 variables
                  variable
                   t
                (
                )
         eoe
          \n
         expression
          expression
           variables
            variable
             def
          expressions_
           expression
            expression
             variables
              variable
               type
            (
            expressions_
             expression
              variables
               variable
                value
            )
         eoe
          \n
        end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Utility
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       BitString
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             type
            (
            expressions_
             expression
              variables
               variable
                _value
            )
            ,
            do
            :
            expression
             "string"
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Utility
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       Integer
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             type
            (
            expressions_
             expression
              variables
               variable
                _value
            )
            ,
            do
            :
            expression
             "integer"
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Size
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       BitString
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             size
            (
            expressions_
             expression
              variables
               variable
                string
            )
            ,
            do
            :
            expression
             expression
              variables
               variable
                byte_size
             (
             expressions_
              expression
               variables
                variable
                 string
             )
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Size
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       Map
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             size
            (
            expressions_
             expression
              variables
               variable
                map
            )
            ,
            do
            :
            expression
             expression
              variables
               variable
                map_size
             (
             expressions_
              expression
               variables
                variable
                 map
             )
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Size
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       Tuple
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             size
            (
            expressions_
             expression
              variables
               variable
                tuple
            )
            ,
            do
            :
            expression
             expression
              variables
               variable
                tuple_size
             (
             expressions_
              expression
               variables
                variable
                 tuple
             )
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defprotocol
   expressions_
    expression
     expression
      Size
     expressions_
      expression
       do_block
        do
        \n
        block
         expression
          @
          expression
           expression
            variables
             variable
              fallback_to_any
           expressions_
            expression
             bool_
              true
         eoe
          \n
         expression
          expression
           variables
            variable
             def
          expressions_
           expression
            expression
             variables
              variable
               size
            (
            expressions_
             expression
              variables
               variable
                data
            )
         eoe
          \n
        end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defimpl
   expressions_
    expression
     Size
   ,
   options_
    option
     variable
      for
     :
     expression
      expression
       Any
      expressions_
       expression
        do_block
         do
         \n
         block
          expression
           function_def
            def
            variable
             size
            (
            expressions_
             expression
              variables
               variable
                _
            )
            ,
            do
            :
            expression
             0
          eoe
           \n
         end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      inspect
   expressions_
    expression
     &
     expression
      (
      expression
       &
       expression
        expression
         1
        addOp
         +
        expression
         2
      )
  eoe
   \n
   \n
  expression
   for
    for
    expressions_
     expression
      expression
       variables
        variable
         n
      <-
      expression
       list
        [
        expressions_
         expression
          1
         ,
         expression
          2
         ,
         expression
          3
         ,
         expression
          4
        ]
    ,
    do
    :
    expression
     expression
      variables
       variable
        n
     mulOp
      *
     expression
      variables
       variable
        n
  eoe
   \n
   \n
  expression
   for
    for
    expressions_
     expression
      expression
       variables
        variable
         n
      <-
      expression
       expression
        1
       listOp
        ..
       expression
        4
    ,
    do
    :
    expression
     expression
      variables
       variable
        n
     mulOp
      *
     expression
      variables
       variable
        n
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      dirs
   =
   expression
    list
     [
     expressions_
      expression
       "/home/mikey"
      ,
      expression
       "/home/james"
     ]
  eoe
   \n
  expression
   for
    for
    expressions_
     expression
      expression
       expression
        variables
         variable
          dir
       <-
       expression
        variables
         variable
          dirs
         ,
         \n
         variable
          file
      <-
      expression
       expression
        File
       expression_tail
        .
        expression
         expression
          variables
           variable
            ls!
         (
         expressions_
          expression
           variables
            variable
             dir
         )
     ,
     \n
     expression
      expression
       variables
        variable
         path
      =
      expression
       expression
        Path
       expression_tail
        .
        expression
         expression
          variables
           variable
            join
         (
         expressions_
          expression
           variables
            variable
             dir
            ,
            variable
             file
         )
     ,
     \n
     expression
      expression
       File
      expression_tail
       .
       expression
        expression
         variables
          variable
           regular?
        (
        expressions_
         expression
          variables
           variable
            path
        )
    do_block
     do
     \n
     block
      expression
       expression
        File
       expression_tail
        .
        expression
         expression
          expression
           variables
            variable
             stat!
          (
          expressions_
           expression
            variables
             variable
              path
          )
         expression_tail
          .
          expression
           variables
            variable
             size
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      regex
   =
   expression
    ~r/foo|bar/
  eoe
   \n
   \n
  expression
   ~s(this is a string with "double" quotes, not 'single' ones)
  eoe
   \n
   \n
  expression
   ~w(foo bar bat)a
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       variables
        variable
         something
      (
      )
     eoe
      \n
    rescue
    \n
    expressions_
     expression
      expression
       variables
        variable
         e
      ->
      \n
      expression
       expression
        Logger
       expression_tail
        .
        expression
         expression
          variables
           variable
            error
         (
         expressions_
          expression
           expression
            Exception
           expression_tail
            .
            expression
             expression
              variables
               variable
                format
             (
             expressions_
              expression
               :error
              ,
              expression
               variables
                variable
                 e
                ,
                variable
                 __STACKTRACE__
             )
         )
    \n
    block
     expression
      expression
       variables
        variable
         reraise
      expressions_
       expression
        variables
         variable
          e
         ,
         variable
          __STACKTRACE__
     eoe
      \n
    end
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       Enum
      expression_tail
       .
       expression
        expression
         variables
          variable
           each
        (
        expressions_
         expression
          unaryOp
           -
          expression
           expression
            50
           expressions_
            expression
             expression
              operator
               listOp
                ..
             expressions_
              expression
               50
              ,
              expression
               anonymous_function
                fn
                expressions_
                 expression
                  variables
                   variable
                    x
                ->
                \n
                block
                 expression
                  if
                   if
                   expression
                    expression
                     expression
                      variables
                       variable
                        rem
                     (
                     expressions_
                      expression
                       variables
                        variable
                         x
                      ,
                      expression
                       13
                     )
                    eqOp
                     ==
                    expression
                     0
                   ,
                   do
                   :
                   expression
                    expression
                     variables
                      variable
                       throw
                    (
                    expressions_
                     expression
                      variables
                       variable
                        x
                    )
                 eoe
                  \n
                end
        )
     eoe
      \n
     expression
      "Got nothing"
     eoe
      \n
    catch
    \n
    expressions_
     expression
      expression
       variables
        variable
         x
      ->
      expression
       "Got #{x}"
    \n
    end
  eoe
   \n
   \n
  expression
   expression
    Enum
   expression_tail
    .
    expression
     expression
      variables
       variable
        find
     (
     expressions_
      expression
       unaryOp
        -
       expression
        expression
         50
        expressions_
         expression
          expression
           operator
            listOp
             ..
          expressions_
           expression
            50
           ,
           expression
            &
            expression
             (
             expression
              expression
               expression
                variables
                 variable
                  rem
               (
               expressions_
                expression
                 &
                 expression
                  1
                ,
                expression
                 13
               )
              eqOp
               ==
              expression
               0
             )
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      spawn_link
   (
   expressions_
    expression
     anonymous_function
      fn
      ->
      block
       expression
        expression
         variables
          variable
           exit
        (
        expressions_
         expression
          1
        )
      end
   )
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       variables
        variable
         exit
      (
      expressions_
       expression
        "I am exiting"
      )
     eoe
      \n
    catch
    \n
    expressions_
     expression
      :exit
     ,
     expression
      expression
       variables
        variable
         _
      ->
      expression
       "not really"
    \n
    end
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       IO
      expression_tail
       .
       expression
        expression
         variables
          variable
           write
        (
        expressions_
         expression
          variables
           variable
            file
         ,
         expression
          "ola"
        )
     eoe
      \n
     expression
      expression
       variables
        variable
         raise
      expressions_
       expression
        "oops, something went wrong"
     eoe
      \n
    after
    \n
    expressions_
     expression
      expression
       File
      expression_tail
       .
       expression
        expression
         variables
          variable
           close
        (
        expressions_
         expression
          variables
           variable
            file
        )
    \n
    end
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       1
      mulOp
       /
      expression
       variables
        variable
         x
     eoe
      \n
    rescue
    \n
    expressions_
     expression
      expression
       ArithmeticError
      ->
      \n
      expression
       :infinity
    \n
    else
    \n
    block
     expression
      expression
       variables
        variable
         y
      when
      expression
       expression
        variables
         variable
          y
       relOp
        <
       expression
        expression
         1
        expressions_
         expression
          expression
           operator
            andOp
             and
          expressions_
           expression
            expression
             expression
              variables
               variable
                y
             relOp
              >
             expression
              unaryOp
               -
              expression
               1
            ->
            \n
            expression
             :small
     eoe
      \n
     expression
      expression
       variables
        variable
         _
      ->
      \n
      expression
       :large
     eoe
      \n
    end
  eoe
   \n
   \n
  expression
   try
    try
    do
    \n
    block
     expression
      expression
       variables
        variable
         raise
      expressions_
       expression
        "fail"
     eoe
      \n
     expression
      expression
       variables
        variable
         what_happened
      =
      expression
       :did_not_raise
     eoe
      \n
    rescue
    \n
    expressions_
     expression
      expression
       variables
        variable
         _
      ->
      expression
       expression
        variables
         variable
          what_happened
       =
       expression
        :rescued
    \n
    end
  eoe
   \n
   \n
  expression
   if
    if
    expression
     bool_
      true
    do
    \n
    block
     expression
      :this
     eoe
      \n
    else
    \n
    block
     expression
      :that
     eoe
      \n
    end
  eoe
   \n
   \n
  expression
   if
    if
    expression
     variables
      variable
       variable?
    do
    \n
    block
     expression
      expression
       Call
      expression_tail
       .
       expression
        expression
         variables
          variable
           this
        (
        )
     eoe
      \n
    else
    \n
    block
     expression
      expression
       Call
      expression_tail
       .
       expression
        expression
         variables
          variable
           that
        (
        )
     eoe
      \n
    end
  eoe
   \n
   \n
  expression
   if
    if
    expression
     variables
      variable
       variable?
    ,
    do
    :
    expression
     expression
      Call
     expression_tail
      .
      expression
       expression
        variables
         variable
          this
       (
       )
    ,
    else
    :
    expression
     expression
      Call
     expression_tail
      .
      expression
       expression
        variables
         variable
          that
       (
       )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Math
    do_block
     do
     \n
     block
      expression
       function_def
        def
        variable
         add
        (
        expressions_
         expression
          variables
           variable
            a
           ,
           variable
            b
        )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              a
           addOp
            +
           expression
            variables
             variable
              b
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      defmodule
   (
   expressions_
    expression
     Math
    ,
    expression
     list
      [
      \n
      expressions_
       expression
        tuple
         {
         expressions_
          expression
           :do
          ,
          expression
           expression
            variables
             variable
              def
           (
           expressions_
            expression
             expression
              variables
               variable
                add
             (
             expressions_
              expression
               variables
                variable
                 a
                ,
                variable
                 b
             )
            ,
            expression
             list
              [
              expressions_
               expression
                tuple
                 {
                 expressions_
                  expression
                   :do
                  ,
                  expression
                   expression
                    variables
                     variable
                      a
                   addOp
                    +
                   expression
                    variables
                     variable
                      b
                 }
              ]
           )
         }
      \n
      ]
   )
  eoe
   \n
   \n
  expression
   expression
    Base
   expression_tail
    .
    expression
     expression
      variables
       variable
        encode16
     (
     expressions_
      expression
       expression
        :crypto
       expression_tail
        .
        expression
         expression
          variables
           variable
            hash
         (
         expressions_
          expression
           :sha256
          ,
          expression
           "Elixir"
         )
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      def
   expressions_
    expression
     expression
      variables
       variable
        application
     expressions_
      expression
       do_block
        do
        \n
        block
         expression
          list
           [
           short_map_entries
            short_map_entry
             variable
              extra_applications
             :
             expression
              list
               [
               expressions_
                expression
                 :crypto
               ]
           ]
         eoe
          \n
        end
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      digraph
   =
   expression
    expression
     :digraph
    expression_tail
     .
     expression
      expression
       variables
        variable
         new
      (
      )
  eoe
   \n
  expression
   expression
    variables
     variable
      coords
   =
   expression
    list
     [
     expressions_
      expression
       tuple
        {
        expressions_
         expression
          0.0
         ,
         expression
          0.0
        }
      ,
      expression
       tuple
        {
        expressions_
         expression
          1.0
         ,
         expression
          0.0
        }
      ,
      expression
       tuple
        {
        expressions_
         expression
          1.0
         ,
         expression
          1.0
        }
     ]
  eoe
   \n
  expression
   expression
    list
     [
     expressions_
      expression
       variables
        variable
         v0
        ,
        variable
         v1
        ,
        variable
         v2
     ]
   =
   expression
    (
    expression
     for
      for
      expressions_
       expression
        expression
         variables
          variable
           c
        <-
        expression
         variables
          variable
           coords
      ,
      do
      :
      expression
       expression
        :digraph
       expression_tail
        .
        expression
         expression
          variables
           variable
            add_vertex
         (
         expressions_
          expression
           variables
            variable
             digraph
            ,
            variable
             c
         )
    )
  eoe
   \n
  expression
   expression
    :digraph
   expression_tail
    .
    expression
     expression
      variables
       variable
        add_edge
     (
     expressions_
      expression
       variables
        variable
         digraph
        ,
        variable
         v0
        ,
        variable
         v1
     )
  eoe
   \n
  expression
   expression
    :digraph
   expression_tail
    .
    expression
     expression
      variables
       variable
        add_edge
     (
     expressions_
      expression
       variables
        variable
         digraph
        ,
        variable
         v1
        ,
        variable
         v2
     )
  eoe
   \n
  expression
   expression
    :digraph
   expression_tail
    .
    expression
     expression
      variables
       variable
        get_short_path
     (
     expressions_
      expression
       variables
        variable
         digraph
        ,
        variable
         v0
        ,
        variable
         v2
     )
  eoe
   \n
   \n
  expression
   expression
    variables
     variable
      song
   =
   expression
    "\nMary had a little lamb,\nHis fleece was white as snow,\nAnd everywhere that Mary went,\nThe lamb was sure to go."
  eoe
   \n
   \n
  expression
   expression
    expression
     variables
      variable
       round
    (
    expressions_
     expression
      expression
       variables
        variable
         number
      (
      )
    )
   ::
   expression
    expression
     variables
      variable
       integer
    (
    )
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Person
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           typedoc
        expressions_
         expression
          """\n   A 4 digit year, e.g. 1984\n   """
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           type
        expressions_
         expression
          expression
           variables
            variable
             year
          ::
          expression
           variables
            variable
             integer
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              current_age
           (
           expressions_
            expression
             variables
              variable
               year
           )
          ::
          expression
           variables
            variable
             integer
      eoe
       \n
      expression
       function_def
        def
        variable
         current_age
        (
        expressions_
         expression
          variables
           variable
            year_of_birth
        )
        ,
        do
        :
        expression
         "implementation"
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   @
   expression
    expression
     variables
      variable
       type
    expressions_
     expression
      expression
       variables
        variable
         error_map
      ::
      expression
       map
        %{
        \n
        short_map_entries
         short_map_entry
          variable
           message
          :
          expression
           expression
            String
           expression_tail
            .
            expression
             variables
              variable
               t
         ,
         \n
         short_map_entry
          variable
           line_number
          :
          expression
           variables
            variable
             integer
        \n
        }
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    LousyCalculator
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              add
           (
           expressions_
            expression
             variables
              variable
               number
              ,
              variable
               number
           )
          ::
          expression
           tuple
            {
            expressions_
             expression
              variables
               variable
                number
             ,
             expression
              expression
               String
              expression_tail
               .
               expression
                variables
                 variable
                  t
            }
      eoe
       \n
      expression
       function_def
        def
        variable
         add
        (
        expressions_
         expression
          variables
           variable
            x
           ,
           variable
            y
        )
        ,
        do
        :
        expression
         tuple
          {
          expressions_
           expression
            expression
             variables
              variable
               x
            addOp
             +
            expression
             variables
              variable
               y
           ,
           expression
            "You need a calculator to do that?!"
          }
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              multiply
           (
           expressions_
            expression
             variables
              variable
               number
              ,
              variable
               number
           )
          ::
          expression
           tuple
            {
            expressions_
             expression
              variables
               variable
                number
             ,
             expression
              expression
               String
              expression_tail
               .
               expression
                variables
                 variable
                  t
            }
      eoe
       \n
      expression
       function_def
        def
        variable
         multiply
        (
        expressions_
         expression
          variables
           variable
            x
           ,
           variable
            y
        )
        ,
        do
        :
        expression
         tuple
          {
          expressions_
           expression
            expression
             variables
              variable
               x
            mulOp
             *
            expression
             variables
              variable
               y
           ,
           expression
            "Jeez, come on!"
          }
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    LousyCalculator
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           typedoc
        expressions_
         expression
          """\n  Just a number followed by a string.\n  """
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           type
        expressions_
         expression
          expression
           variables
            variable
             number_with_remark
          ::
          expression
           tuple
            {
            expressions_
             expression
              variables
               variable
                number
             ,
             expression
              expression
               String
              expression_tail
               .
               expression
                variables
                 variable
                  t
            }
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              add
           (
           expressions_
            expression
             variables
              variable
               number
              ,
              variable
               number
           )
          ::
          expression
           variables
            variable
             number_with_remark
      eoe
       \n
      expression
       function_def
        def
        variable
         add
        (
        expressions_
         expression
          variables
           variable
            x
           ,
           variable
            y
        )
        ,
        do
        :
        expression
         tuple
          {
          expressions_
           expression
            expression
             variables
              variable
               x
            addOp
             +
            expression
             variables
              variable
               y
           ,
           expression
            "You need a calculator to do that?"
          }
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              multiply
           (
           expressions_
            expression
             variables
              variable
               number
              ,
              variable
               number
           )
          ::
          expression
           variables
            variable
             number_with_remark
      eoe
       \n
      expression
       function_def
        def
        variable
         multiply
        (
        expressions_
         expression
          variables
           variable
            x
           ,
           variable
            y
        )
        ,
        do
        :
        expression
         tuple
          {
          expressions_
           expression
            expression
             variables
              variable
               x
            mulOp
             *
            expression
             variables
              variable
               y
           ,
           expression
            "It is like addition on steroids."
          }
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    QuietCalculator
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              add
           (
           expressions_
            expression
             variables
              variable
               number
              ,
              variable
               number
           )
          ::
          expression
           variables
            variable
             number
      eoe
       \n
      expression
       function_def
        def
        variable
         add
        (
        expressions_
         expression
          variables
           variable
            x
           ,
           variable
            y
        )
        ,
        do
        :
        expression
         expression
          variables
           variable
            make_quiet
         (
         expressions_
          expression
           expression
            LousyCalculator
           expression_tail
            .
            expression
             expression
              variables
               variable
                add
             (
             expressions_
              expression
               variables
                variable
                 x
                ,
                variable
                 y
             )
         )
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           spec
        expressions_
         expression
          expression
           expression
            variables
             variable
              make_quiet
           (
           expressions_
            expression
             expression
              LousyCalculator
             expression_tail
              .
              expression
               variables
                variable
                 number_with_remark
           )
          ::
          expression
           variables
            variable
             number
      eoe
       \n
      expression
       function_def
        defp
        variable
         make_quiet
        (
        expressions_
         expression
          tuple
           {
           expressions_
            expression
             variables
              variable
               num
              ,
              variable
               _remark
           }
        )
        ,
        do
        :
        expression
         variables
          variable
           num
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    Parser
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           doc
        expressions_
         expression
          """\n  Parses a string.\n  """
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           callback
        expressions_
         expression
          expression
           expression
            variables
             variable
              parse
           (
           expressions_
            expression
             expression
              String
             expression_tail
              .
              expression
               variables
                variable
                 t
           )
          ::
          expression
           expression
            tuple
             {
             expressions_
              expression
               :ok
              ,
              expression
               variables
                variable
                 term
             }
           |
           expression
            tuple
             {
             expressions_
              expression
               :error
              ,
              expression
               variables
                variable
                 atom
             }
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           doc
        expressions_
         expression
          """\n  Lists all supported file extensions.\n  """
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           callback
        expressions_
         expression
          expression
           expression
            variables
             variable
              extensions
           (
           )
          ::
          expression
           list
            [
            expressions_
             expression
              expression
               String
              expression_tail
               .
               expression
                variables
                 variable
                  t
            ]
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   module_def
    defmodule
    JSONParser
    do_block
     do
     \n
     block
      expression
       @
       expression
        expression
         variables
          variable
           behaviour
        expressions_
         expression
          Parser
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           impl
        expressions_
         expression
          Parser
      eoe
       \n
      expression
       function_def
        def
        variable
         parse
        (
        expressions_
         expression
          variables
           variable
            str
        )
        ,
        do
        :
        expression
         tuple
          {
          expressions_
           expression
            :ok
           ,
           expression
            expression
             "some json "
            listOp
             <>
            expression
             variables
              variable
               str
          }
      eoe
       \n
      expression
       @
       expression
        expression
         variables
          variable
           impl
        expressions_
         expression
          Parser
      eoe
       \n
      expression
       function_def
        def
        variable
         extensions
        ,
        do
        :
        expression
         list
          [
          expressions_
           expression
            ".json"
          ]
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   @
   expression
    expression
     variables
      variable
       spec
    expressions_
     expression
      expression
       expression
        variables
         variable
          parse_path
       (
       expressions_
        expression
         expression
          Path
         expression_tail
          .
          expression
           expression
            variables
             variable
              t
           (
           )
        ,
        expression
         list
          [
          expressions_
           expression
            expression
             variables
              variable
               module
            (
            )
          ]
       )
      ::
      expression
       expression
        tuple
         {
         expressions_
          expression
           :ok
          ,
          expression
           variables
            variable
             term
         }
       |
       expression
        tuple
         {
         expressions_
          expression
           :error
          ,
          expression
           variables
            variable
             atom
         }
  eoe
   \n
  expression
   function_def
    def
    variable
     parse_path
    (
    expressions_
     expression
      variables
       variable
        filename
       ,
       variable
        parsers
    )
    do_block
     do
     \n
     block
      expression
       with
        with
        expressions_
         expression
          expression
           tuple
            {
            expressions_
             expression
              :ok
             ,
             expression
              variables
               variable
                ext
            }
          <-
          expression
           expression
            variables
             variable
              parse_extension
           (
           expressions_
            expression
             variables
              variable
               filename
           )
         ,
         \n
         expression
          expression
           tuple
            {
            expressions_
             expression
              :ok
             ,
             expression
              variables
               variable
                parser
            }
          <-
          expression
           expression
            variables
             variable
              find_parser
           (
           expressions_
            expression
             variables
              variable
               ext
              ,
              variable
               parsers
           )
         ,
         \n
         expression
          expression
           tuple
            {
            expressions_
             expression
              :ok
             ,
             expression
              variables
               variable
                contents
            }
          <-
          expression
           expression
            File
           expression_tail
            .
            expression
             expression
              variables
               variable
                read
             (
             expressions_
              expression
               variables
                variable
                 filename
             )
        do_block
         do
         \n
         block
          expression
           expression
            variables
             variable
              parser
           expression_tail
            .
            expression
             expression
              variables
               variable
                parse
             (
             expressions_
              expression
               variables
                variable
                 contents
             )
          eoe
           \n
         end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   function_def
    defp
    variable
     parse_extension
    (
    expressions_
     expression
      variables
       variable
        filename
    )
    do_block
     do
     \n
     block
      expression
       if
        if
        expression
         expression
          variables
           variable
            ext
         =
         expression
          expression
           Path
          expression_tail
           .
           expression
            expression
             variables
              variable
               extname
            (
            expressions_
             expression
              variables
               variable
                filename
            )
        do
        \n
        block
         expression
          tuple
           {
           expressions_
            expression
             :ok
            ,
            expression
             variables
              variable
               ext
           }
         eoe
          \n
        else
        \n
        block
         expression
          tuple
           {
           expressions_
            expression
             :error
            ,
            expression
             :no_extension
           }
         eoe
          \n
        end
      eoe
       \n
     end
  eoe
   \n
   \n
  expression
   function_def
    defp
    variable
     find_parser
    (
    expressions_
     expression
      variables
       variable
        ext
       ,
       variable
        parsers
    )
    do_block
     do
     \n
     block
      expression
       if
        if
        expression
         expression
          variables
           variable
            parser
         =
         expression
          expression
           Enum
          expression_tail
           .
           expression
            expression
             variables
              variable
               find
            (
            expressions_
             expression
              variables
               variable
                parsers
             ,
             expression
              anonymous_function
               fn
               expressions_
                expression
                 variables
                  variable
                   parser
               ->
               block
                expression
                 expression
                  variables
                   variable
                    ext
                 inOp
                  in
                 expression
                  expression
                   variables
                    variable
                     parser
                  expression_tail
                   .
                   expression
                    expression
                     variables
                      variable
                       extensions
                    (
                    )
               end
            )
        do
        \n
        block
         expression
          tuple
           {
           expressions_
            expression
             :ok
            ,
            expression
             variables
              variable
               parser
           }
         eoe
          \n
        else
        \n
        block
         expression
          tuple
           {
           expressions_
            expression
             :error
            ,
            expression
             :no_matching_parser
           }
         eoe
          \n
        end
      eoe
       \n
     end
  eoe
   \n
 <EOF>
