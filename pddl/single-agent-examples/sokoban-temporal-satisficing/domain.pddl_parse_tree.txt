(pddlDoc (domain ( define (domainName ( domain (name sokoban-temporal) )) (requireDef ( :requirements :typing :durative-actions )) (typesDef ( :types (typedNameList (singleTypeNameList (name thing) (name location) (name direction) - (r_type (primType (name object)))) (singleTypeNameList (name player) (name stone) - (r_type (primType (name thing))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name clear)) (typedVariableList (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?t - (r_type (primType (name thing)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name at-goal)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name stone))))) )) (atomicFormulaSkeleton ( (predicate (name IS-GOAL)) (typedVariableList (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name IS-NONGOAL)) (typedVariableList (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name MOVE-DIR)) (typedVariableList (singleTypeVarList ?from ?to - (r_type (primType (name location)))) (singleTypeVarList ?dir - (r_type (primType (name direction))))) )) )) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name move)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name player)))) (singleTypeVarList ?from ?to - (r_type (primType (name location)))) (singleTypeVarList ?dir - (r_type (primType (name direction))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 1) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?from) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?to) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name MOVE-DIR)) (term ?from) (term ?to) (term ?dir) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?from) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?to) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?to) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?from) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name push-to-nongoal)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name player)))) (singleTypeVarList ?s - (r_type (primType (name stone)))) (singleTypeVarList ?ppos ?from ?to - (r_type (primType (name location)))) (singleTypeVarList ?dir - (r_type (primType (name direction))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 1) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?ppos) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?from) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?to) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name MOVE-DIR)) (term ?ppos) (term ?from) (term ?dir) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name MOVE-DIR)) (term ?from) (term ?to) (term ?dir) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name IS-NONGOAL)) (term ?to) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?ppos) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?from) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?to) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?from) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?to) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?ppos) )))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at-goal)) (term ?s) )) ))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name push-to-goal)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name player)))) (singleTypeVarList ?s - (r_type (primType (name stone)))) (singleTypeVarList ?ppos ?from ?to - (r_type (primType (name location)))) (singleTypeVarList ?dir - (r_type (primType (name direction))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 1) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?ppos) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?from) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?to) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name MOVE-DIR)) (term ?ppos) (term ?from) (term ?dir) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name MOVE-DIR)) (term ?from) (term ?to) (term ?dir) ))) )))) (daGD (prefTimedGD (timedGD ( over (interval all) (goalDesc (atomicTermFormula ( (predicate (name IS-GOAL)) (term ?to) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?ppos) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?from) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?to) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?from) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?s) (term ?to) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?ppos) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at-goal)) (term ?s) )))) ))) ))) ))) )) <EOF>)
