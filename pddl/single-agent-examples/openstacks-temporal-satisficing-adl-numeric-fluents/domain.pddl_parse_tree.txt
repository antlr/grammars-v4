(pddlDoc (domain ( define (domainName ( domain (name openstacks-time-numeric-ADL) )) (requireDef ( :requirements :typing :adl :durative-actions meric-fluents )) (typesDef ( :types (typedNameList (name order) (name product)) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name includes)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order)))) (singleTypeVarList ?p - (r_type (primType (name product))))) )) (atomicFormulaSkeleton ( (predicate (name waiting)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) )) (atomicFormulaSkeleton ( (predicate (name started)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) )) (atomicFormulaSkeleton ( (predicate (name shipped)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) )) (atomicFormulaSkeleton ( (predicate (name made)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name product))))) )) (atomicFormulaSkeleton ( (predicate (name not-made)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name product))))) )) )) (functionsDef ( :functions (functionList (atomicFunctionSkeleton ( (functionSymbol (name stacks-in-use)) typedVariableList )) (atomicFunctionSkeleton ( (functionSymbol (name max-stacks)) typedVariableList )) (atomicFunctionSkeleton ( (functionSymbol (name make-time)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name product))))) ))) )) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name start-order)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 1) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?o) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (fComp ( (binaryComp <) (fExp (fHead ( (functionSymbol (name stacks-in-use)) ))) (fExp (fHead ( (functionSymbol (name max-stacks)) ))) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?o) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name started)) (term ?o) )))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name stacks-in-use)) )) (fExp 1) ))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name make-product)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name product))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue (fExp (fHead ( (functionSymbol (name make-time)) (term ?p) )))) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc ( not (goalDesc (atomicTermFormula ( (predicate (name made)) (term ?p) ))) )) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc ( forall ( (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) ) (goalDesc ( imply (goalDesc (atomicTermFormula ( (predicate (name includes)) (term ?o) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name started)) (term ?o) ))) )) )) )))) )) :effect (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name made)) (term ?p) )))) )))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name ship-order)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?o - (r_type (primType (name order))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 1) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name started)) (term ?o) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc ( forall ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name product))))) ) (goalDesc ( imply (goalDesc (atomicTermFormula ( (predicate (name includes)) (term ?o) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name made)) (term ?p) ))) )) )) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name started)) (term ?o) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name shipped)) (term ?o) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect ( (assignOp decrease) (fHead ( (functionSymbol (name stacks-in-use)) )) (fExp 1) ))) ))) ))) ))) )) <EOF>)
