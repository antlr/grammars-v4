(pddlDoc (domain ( define (domainName ( domain (name Depot) )) (requireDef ( :requirements :typing )) (typesDef ( :types (typedNameList (singleTypeNameList (name place) (name locatable) - (r_type (primType (name object)))) (singleTypeNameList (name depot) (name distributor) - (r_type (primType (name place)))) (singleTypeNameList (name truck) (name hoist) (name surface) - (r_type (primType (name locatable)))) (singleTypeNameList (name pallet) (name crate) - (r_type (primType (name surface))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name locatable)))) (singleTypeVarList ?y - (r_type (primType (name place))))) )) (atomicFormulaSkeleton ( (predicate (name on)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name crate)))) (singleTypeVarList ?y - (r_type (primType (name surface))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name crate)))) (singleTypeVarList ?y - (r_type (primType (name truck))))) )) (atomicFormulaSkeleton ( (predicate (name lifting)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist)))) (singleTypeVarList ?y - (r_type (primType (name crate))))) )) (atomicFormulaSkeleton ( (predicate (name available)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist))))) )) (atomicFormulaSkeleton ( (predicate (name clear)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name surface))))) )) )) (structureDef (actionDef ( :action (actionSymbol (name Drive)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name truck)))) (singleTypeVarList ?y - (r_type (primType (name place)))) (singleTypeVarList ?z - (r_type (primType (name place))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?z) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name Lift)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist)))) (singleTypeVarList ?y - (r_type (primType (name crate)))) (singleTypeVarList ?z - (r_type (primType (name surface)))) (singleTypeVarList ?p - (r_type (primType (name place))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?y) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term ?y) (term ?z) ))) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?y) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?y) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?x) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?z) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name on)) (term ?y) (term ?z) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name Drop)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist)))) (singleTypeVarList ?y - (r_type (primType (name crate)))) (singleTypeVarList ?z - (r_type (primType (name surface)))) (singleTypeVarList ?p - (r_type (primType (name place))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?z) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?z) ))) (goalDesc (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?x) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?y) (term ?p) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?z) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?y) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name on)) (term ?y) (term ?z) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name Load)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist)))) (singleTypeVarList ?y - (r_type (primType (name crate)))) (singleTypeVarList ?z - (r_type (primType (name truck)))) (singleTypeVarList ?p - (r_type (primType (name place))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?z) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?y) (term ?z) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?x) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name Unload)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name hoist)))) (singleTypeVarList ?y - (r_type (primType (name crate)))) (singleTypeVarList ?z - (r_type (primType (name truck)))) (singleTypeVarList ?p - (r_type (primType (name place))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?z) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?y) (term ?z) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?y) (term ?z) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?x) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name lifting)) (term ?x) (term ?y) )))) ))) ))) )) <EOF>)
