(pddlDoc (domain ( define (domainName ( domain (name transport) )) (requireDef ( :requirements :typing :action - costs )) (typesDef ( :types (typedNameList (singleTypeNameList (name location) (name target) (name locatable) - (r_type (primType (name object)))) (singleTypeNameList (name vehicle) (name package) - (r_type (primType (name locatable)))) (singleTypeNameList (name capacity-number) - (r_type (primType (name object))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name road)) (typedVariableList (singleTypeVarList ?l1 ?l2 - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name locatable)))) (singleTypeVarList ?v - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name package)))) (singleTypeVarList ?v - (r_type (primType (name vehicle))))) )) (atomicFormulaSkeleton ( (predicate (name capacity)) (typedVariableList (singleTypeVarList ?v - (r_type (primType (name vehicle)))) (singleTypeVarList ?s1 - (r_type (primType (name capacity-number))))) )) (atomicFormulaSkeleton ( (predicate (name capacity-predecessor)) (typedVariableList (singleTypeVarList ?s1 ?s2 - (r_type (primType (name capacity-number))))) )) )) (functionsDef ( :functions (functionList (atomicFunctionSkeleton ( (functionSymbol (name road-length)) (typedVariableList (singleTypeVarList ?l1 ?l2 - (r_type (primType (name location))))) )) - (functionType number) (atomicFunctionSkeleton ( (functionSymbol (name total-cost)) typedVariableList )) - (functionType number)) )) (structureDef (actionDef ( :action (actionSymbol (name drive)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?v - (r_type (primType (name vehicle)))) (singleTypeVarList ?l1 ?l2 - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?v) (term ?l1) ))) (goalDesc (atomicTermFormula ( (predicate (name road)) (term ?l1) (term ?l2) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?v) (term ?l1) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?v) (term ?l2) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp (fHead ( (functionSymbol (name road-length)) (term ?l1) (term ?l2) ))) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name pick-up)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?v - (r_type (primType (name vehicle)))) (singleTypeVarList ?l - (r_type (primType (name location)))) (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?s1 ?s2 - (r_type (primType (name capacity-number))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?v) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name capacity-predecessor)) (term ?s1) (term ?s2) ))) (goalDesc (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s2) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?v) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s1) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s2) )) ))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name drop)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?v - (r_type (primType (name vehicle)))) (singleTypeVarList ?l - (r_type (primType (name location)))) (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?s1 ?s2 - (r_type (primType (name capacity-number))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?v) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?v) ))) (goalDesc (atomicTermFormula ( (predicate (name capacity-predecessor)) (term ?s1) (term ?s2) ))) (goalDesc (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s1) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?v) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s2) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name capacity)) (term ?v) (term ?s1) )) ))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) )) <EOF>)
