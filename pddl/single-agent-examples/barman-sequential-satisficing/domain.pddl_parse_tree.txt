(pddlDoc (domain ( define (domainName ( domain (name barman) )) (requireDef ( :requirements :strips :typing :action - costs )) (typesDef ( :types (typedNameList (singleTypeNameList (name hand) (name level) (name beverage) (name dispenser) (name container) - (r_type (primType (name object)))) (singleTypeNameList (name ingredient) (name cocktail) - (r_type (primType (name beverage)))) (singleTypeNameList (name shot) (name shaker) - (r_type (primType (name container))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name ontable)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name container))))) )) (atomicFormulaSkeleton ( (predicate (name holding)) (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?c - (r_type (primType (name container))))) )) (atomicFormulaSkeleton ( (predicate (name handempty)) (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand))))) )) (atomicFormulaSkeleton ( (predicate (name empty)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name container))))) )) (atomicFormulaSkeleton ( (predicate (name contains)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name container)))) (singleTypeVarList ?b - (r_type (primType (name beverage))))) )) (atomicFormulaSkeleton ( (predicate (name clean)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name container))))) )) (atomicFormulaSkeleton ( (predicate (name used)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name container)))) (singleTypeVarList ?b - (r_type (primType (name beverage))))) )) (atomicFormulaSkeleton ( (predicate (name dispenses)) (typedVariableList (singleTypeVarList ?d - (r_type (primType (name dispenser)))) (singleTypeVarList ?i - (r_type (primType (name ingredient))))) )) (atomicFormulaSkeleton ( (predicate (name shaker-empty-level)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shaker)))) (singleTypeVarList ?l - (r_type (primType (name level))))) )) (atomicFormulaSkeleton ( (predicate (name shaker-level)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shaker)))) (singleTypeVarList ?l - (r_type (primType (name level))))) )) (atomicFormulaSkeleton ( (predicate (name next)) (typedVariableList (singleTypeVarList ?l1 ?l2 - (r_type (primType (name level))))) )) (atomicFormulaSkeleton ( (predicate (name unshaked)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shaker))))) )) (atomicFormulaSkeleton ( (predicate (name shaked)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shaker))))) )) (atomicFormulaSkeleton ( (predicate (name cocktail-part1)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name cocktail)))) (singleTypeVarList ?i - (r_type (primType (name ingredient))))) )) (atomicFormulaSkeleton ( (predicate (name cocktail-part2)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name cocktail)))) (singleTypeVarList ?i - (r_type (primType (name ingredient))))) )) )) (functionsDef ( :functions (functionList (atomicFunctionSkeleton ( (functionSymbol (name total-cost)) typedVariableList )) - (functionType number)) )) (structureDef (actionDef ( :action (actionSymbol (name grasp)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?c - (r_type (primType (name container))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name ontable)) (term ?c) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name ontable)) (term ?c) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name handempty)) (term ?h) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?c) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name leave)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?c - (r_type (primType (name container))))) )) (actionDefBody :precondition (precondition (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?c) )))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?c) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name handempty)) (term ?h) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name ontable)) (term ?c) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name fill-shot)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shot)))) (singleTypeVarList ?i - (r_type (primType (name ingredient)))) (singleTypeVarList ?h1 ?h2 - (r_type (primType (name hand)))) (singleTypeVarList ?d - (r_type (primType (name dispenser))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h2) ))) (goalDesc (atomicTermFormula ( (predicate (name dispenses)) (term ?d) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name clean)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clean)) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name used)) (term ?s) (term ?i) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name refill-shot)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shot)))) (singleTypeVarList ?i - (r_type (primType (name ingredient)))) (singleTypeVarList ?h1 ?h2 - (r_type (primType (name hand)))) (singleTypeVarList ?d - (r_type (primType (name dispenser))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h2) ))) (goalDesc (atomicTermFormula ( (predicate (name dispenses)) (term ?d) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name used)) (term ?s) (term ?i) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name empty-shot)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?p - (r_type (primType (name shot)))) (singleTypeVarList ?b - (r_type (primType (name beverage))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?p) (term ?b) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?p) (term ?b) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?p) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name clean-shot)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shot)))) (singleTypeVarList ?b - (r_type (primType (name beverage)))) (singleTypeVarList ?h1 ?h2 - (r_type (primType (name hand))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h2) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name used)) (term ?s) (term ?b) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name used)) (term ?s) (term ?b) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clean)) (term ?s) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name pour-shot-to-clean-shaker)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shot)))) (singleTypeVarList ?i - (r_type (primType (name ingredient)))) (singleTypeVarList ?d - (r_type (primType (name shaker)))) (singleTypeVarList ?h1 - (r_type (primType (name hand)))) (singleTypeVarList ?l ?l1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name clean)) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l) (term ?l1) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?s) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?d) (term ?i) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?d) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clean)) (term ?d) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name unshaked)) (term ?d) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l1) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name pour-shot-to-used-shaker)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name shot)))) (singleTypeVarList ?i - (r_type (primType (name ingredient)))) (singleTypeVarList ?d - (r_type (primType (name shaker)))) (singleTypeVarList ?h1 - (r_type (primType (name hand)))) (singleTypeVarList ?l ?l1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name unshaked)) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l) (term ?l1) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?i) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?d) (term ?i) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?s) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name shaker-level)) (term ?d) (term ?l1) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name empty-shaker)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?s - (r_type (primType (name shaker)))) (singleTypeVarList ?b - (r_type (primType (name cocktail)))) (singleTypeVarList ?l ?l1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?b) ))) (goalDesc (atomicTermFormula ( (predicate (name shaked)) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name shaker-empty-level)) (term ?s) (term ?l1) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name shaked)) (term ?s) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l1) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?b) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?s) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name clean-shaker)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?h1 ?h2 - (r_type (primType (name hand)))) (singleTypeVarList ?s - (r_type (primType (name shaker))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h2) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name clean)) (term ?s) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name shake)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name cocktail)))) (singleTypeVarList ?d1 ?d2 - (r_type (primType (name ingredient)))) (singleTypeVarList ?s - (r_type (primType (name shaker)))) (singleTypeVarList ?h1 ?h2 - (r_type (primType (name hand))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h1) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?h2) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?d1) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?d2) ))) (goalDesc (atomicTermFormula ( (predicate (name cocktail-part1)) (term ?b) (term ?d1) ))) (goalDesc (atomicTermFormula ( (predicate (name cocktail-part2)) (term ?b) (term ?d2) ))) (goalDesc (atomicTermFormula ( (predicate (name unshaked)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unshaked)) (term ?s) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?d1) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?d2) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name shaked)) (term ?s) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?b) )))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name pour-shaker-to-shot)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name beverage)))) (singleTypeVarList ?d - (r_type (primType (name shot)))) (singleTypeVarList ?h - (r_type (primType (name hand)))) (singleTypeVarList ?s - (r_type (primType (name shaker)))) (singleTypeVarList ?l ?l1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?h) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name shaked)) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name clean)) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name contains)) (term ?s) (term ?b) ))) (goalDesc (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l1) (term ?l) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clean)) (term ?d) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?d) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name contains)) (term ?d) (term ?b) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l1) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name shaker-level)) (term ?s) (term ?l) )) ))) (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 1) ))) ))) ))) )) <EOF>)
