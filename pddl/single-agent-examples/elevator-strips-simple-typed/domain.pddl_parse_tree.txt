(pddlDoc (domain ( define (domainName ( domain (name miconic) )) (requireDef ( :requirements :strips )) (typesDef ( :types (typedNameList (singleTypeNameList (name passenger) - (r_type (primType (name object)))) (singleTypeNameList (name floor) - (r_type (primType (name object))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name origin)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger)))) (singleTypeVarList ?floor - (r_type (primType (name floor))))) )) (atomicFormulaSkeleton ( (predicate (name destin)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger)))) (singleTypeVarList ?floor - (r_type (primType (name floor))))) )) (atomicFormulaSkeleton ( (predicate (name above)) (typedVariableList (singleTypeVarList ?floor1 - (r_type (primType (name floor)))) (singleTypeVarList ?floor2 - (r_type (primType (name floor))))) )) (atomicFormulaSkeleton ( (predicate (name boarded)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger))))) )) (atomicFormulaSkeleton ( (predicate (name not-boarded)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger))))) )) (atomicFormulaSkeleton ( (predicate (name served)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger))))) )) (atomicFormulaSkeleton ( (predicate (name not-served)) (typedVariableList (singleTypeVarList ?person - (r_type (primType (name passenger))))) )) (atomicFormulaSkeleton ( (predicate (name lift-at)) (typedVariableList (singleTypeVarList ?floor - (r_type (primType (name floor))))) )) )) (structureDef (actionDef ( :action (actionSymbol (name board)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?f - (r_type (primType (name floor)))) (singleTypeVarList ?p - (r_type (primType (name passenger))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name lift-at)) (term ?f) ))) (goalDesc (atomicTermFormula ( (predicate (name origin)) (term ?p) (term ?f) ))) ))) :effect (effect (cEffect (pEffect (atomicTermFormula ( (predicate (name boarded)) (term ?p) )))))) ))) (structureDef (actionDef ( :action (actionSymbol (name depart)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?f - (r_type (primType (name floor)))) (singleTypeVarList ?p - (r_type (primType (name passenger))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name lift-at)) (term ?f) ))) (goalDesc (atomicTermFormula ( (predicate (name destin)) (term ?p) (term ?f) ))) (goalDesc (atomicTermFormula ( (predicate (name boarded)) (term ?p) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name boarded)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name served)) (term ?p) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name up)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?f1 - (r_type (primType (name floor)))) (singleTypeVarList ?f2 - (r_type (primType (name floor))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name lift-at)) (term ?f1) ))) (goalDesc (atomicTermFormula ( (predicate (name above)) (term ?f1) (term ?f2) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name lift-at)) (term ?f2) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name lift-at)) (term ?f1) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name down)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?f1 - (r_type (primType (name floor)))) (singleTypeVarList ?f2 - (r_type (primType (name floor))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name lift-at)) (term ?f1) ))) (goalDesc (atomicTermFormula ( (predicate (name above)) (term ?f2) (term ?f1) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name lift-at)) (term ?f2) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name lift-at)) (term ?f1) )) ))) ))) ))) )) <EOF>)
