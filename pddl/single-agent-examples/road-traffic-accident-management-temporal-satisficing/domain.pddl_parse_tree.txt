(pddlDoc (domain ( define (domainName ( domain (name rtam) )) (requireDef ( :requirements :typing :durative-actions )) (typesDef ( :types (typedNameList (singleTypeNameList (name ambulance) (name police_car) (name tow_truck) (name fire_brigade) - (r_type (primType (name vehicle)))) (singleTypeNameList (name acc_victim) (name vehicle) (name car) - (r_type (primType (name subject)))) (singleTypeNameList (name city_location) (name city) - (r_type (primType (name location)))) (singleTypeNameList (name accident_location) (name hospital) (name police_station) (name garage) (name fire_station) - (r_type (primType (name city_location)))) (name route) (name accident)) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?physical_obj1 - (r_type (primType (name subject)))) (singleTypeVarList ?location1 - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name available)) (typedVariableList (singleTypeVarList ?vehicle1 - (r_type (primType (name vehicle))))) )) (atomicFormulaSkeleton ( (predicate (name busy)) (typedVariableList (singleTypeVarList ?vehicle1 - (r_type (primType (name vehicle))))) )) (atomicFormulaSkeleton ( (predicate (name waiting)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name subject))))) )) (atomicFormulaSkeleton ( (predicate (name certified)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name subject))))) )) (atomicFormulaSkeleton ( (predicate (name aided)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name acc_victim))))) )) (atomicFormulaSkeleton ( (predicate (name uncertified)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name subject))))) )) (atomicFormulaSkeleton ( (predicate (name delivered)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name subject))))) )) (atomicFormulaSkeleton ( (predicate (name loaded)) (typedVariableList (singleTypeVarList ?subject1 - (r_type (primType (name subject)))) (singleTypeVarList ?vehicle1 - (r_type (primType (name vehicle))))) )) (atomicFormulaSkeleton ( (predicate (name identified)) (typedVariableList (singleTypeVarList ?accident1 - (r_type (primType (name accident))))) )) (atomicFormulaSkeleton ( (predicate (name vehicle_involve)) (typedVariableList (singleTypeVarList ?vehicle1 - (r_type (primType (name vehicle))))) )) (atomicFormulaSkeleton ( (predicate (name connects)) (typedVariableList (singleTypeVarList ?route1 - (r_type (primType (name route)))) (singleTypeVarList ?location1 - (r_type (primType (name location)))) (singleTypeVarList ?location2 - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name in_city)) (typedVariableList (singleTypeVarList ?location1 - (r_type (primType (name location)))) (singleTypeVarList ?city1 - (r_type (primType (name city))))) )) (atomicFormulaSkeleton ( (predicate (name route_available)) (typedVariableList (singleTypeVarList ?route1 - (r_type (primType (name route))))) )) (atomicFormulaSkeleton ( (predicate (name trapped)) (typedVariableList (singleTypeVarList ?hum - (r_type (primType (name acc_victim))))) )) (atomicFormulaSkeleton ( (predicate (name untrapped)) (typedVariableList (singleTypeVarList ?hum - (r_type (primType (name acc_victim))))) )) (atomicFormulaSkeleton ( (predicate (name on_fire)) (typedVariableList (singleTypeVarList ?car_acc - (r_type (primType (name car))))) )) (atomicFormulaSkeleton ( (predicate (name off_fire)) (typedVariableList (singleTypeVarList ?car_acc - (r_type (primType (name car))))) )) )) (functionsDef ( :functions (functionList (atomicFunctionSkeleton ( (functionSymbol (name route-length)) (typedVariableList (singleTypeVarList ?O - (r_type (primType (name route))))) )) (atomicFunctionSkeleton ( (functionSymbol (name speed)) (typedVariableList (singleTypeVarList ?V - (r_type (primType (name vehicle))))) ))) )) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name confirm_accident)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name police_car)))) (singleTypeVarList ?P - (r_type (primType (name subject)))) (singleTypeVarList ?A - (r_type (primType (name accident_location))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 10) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name uncertified)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name uncertified)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name waiting)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name certified)) (term ?P) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name untrap)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name fire_brigade)))) (singleTypeVarList ?P - (r_type (primType (name acc_victim)))) (singleTypeVarList ?A - (r_type (primType (name accident_location))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 25) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?V) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name trapped)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name trapped)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name untrapped)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name extinguish_fire)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name fire_brigade)))) (singleTypeVarList ?P - (r_type (primType (name car)))) (singleTypeVarList ?A - (r_type (primType (name accident_location))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 20) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?V) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name on_fire)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name on_fire)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name off_fire)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name first_aid)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name ambulance)))) (singleTypeVarList ?P - (r_type (primType (name acc_victim)))) (singleTypeVarList ?A - (r_type (primType (name accident_location))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 20) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?A) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name untrapped)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name waiting)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name aided)) (term ?P) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name load_victim)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name ambulance)))) (singleTypeVarList ?L - (r_type (primType (name accident_location)))) (singleTypeVarList ?P - (r_type (primType (name acc_victim))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 5) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name aided)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?V) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect (atomicTermFormula ( (predicate (name busy)) (term ?V) )))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name move)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name vehicle)))) (singleTypeVarList ?O - (r_type (primType (name location)))) (singleTypeVarList ?City - (r_type (primType (name city)))) (singleTypeVarList ?L - (r_type (primType (name location)))) (singleTypeVarList ?City1 - (r_type (primType (name city)))) (singleTypeVarList ?R - (r_type (primType (name route))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue (fExp ( (binaryOp /) (fExp (fHead ( (functionSymbol (name route-length)) (term ?R) ))) (fExp2 (fExp (fHead ( (functionSymbol (name speed)) (term ?V) )))) ))) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?O) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name in_city)) (term ?O) (term ?City) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name in_city)) (term ?L) (term ?City1) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name connects)) (term ?R) (term ?City) (term ?City1) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?O) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?L) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name load_car)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?V - (r_type (primType (name tow_truck)))) (singleTypeVarList ?L - (r_type (primType (name accident_location)))) (singleTypeVarList ?P - (r_type (primType (name car))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 5) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?V) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name off_fire)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect (atomicTermFormula ( (predicate (name busy)) (term ?V) )))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name unload_car)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?P - (r_type (primType (name car)))) (singleTypeVarList ?L - (r_type (primType (name garage)))) (singleTypeVarList ?V - (r_type (primType (name tow_truck))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 5) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name busy)) (term ?V) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) )))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name busy)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name waiting)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name unload_victim)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?P - (r_type (primType (name acc_victim)))) (singleTypeVarList ?L - (r_type (primType (name hospital)))) (singleTypeVarList ?V - (r_type (primType (name ambulance))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 5) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?V) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name aided)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name busy)) (term ?V) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name loaded)) (term ?P) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name busy)) (term ?V) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name waiting)) (term ?P) )))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?V) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name deliver_victim)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?P - (r_type (primType (name acc_victim)))) (singleTypeVarList ?L - (r_type (primType (name hospital))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 10) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name aided)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name certified)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name aided)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name delivered)) (term ?P) )))) ))) ))) ))) (structureDef (durativeActionDef ( :durative-action (actionSymbol (name deliver_vehicle)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?P - (r_type (primType (name car)))) (singleTypeVarList ?L - (r_type (primType (name garage))))) )) (daDefBody :duration (durationConstraint (simpleDurationConstraint ( (durOp =) ?duration (durValue 10) ))) :condition (daGD ( and (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?P) (term ?L) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name waiting)) (term ?P) ))) )))) (daGD (prefTimedGD (timedGD ( at (timeSpecifier start) (goalDesc (atomicTermFormula ( (predicate (name certified)) (term ?P) ))) )))) )) :effect (daEffect ( and (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name waiting)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier start) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name certified)) (term ?P) )) ))) ))) (daEffect (timedEffect ( at (timeSpecifier end) (cEffect (pEffect (atomicTermFormula ( (predicate (name delivered)) (term ?P) )))) ))) ))) ))) )) <EOF>)
