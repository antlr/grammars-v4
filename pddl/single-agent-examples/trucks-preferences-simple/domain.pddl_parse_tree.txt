(pddlDoc (domain ( define (domainName ( domain (name Trucks-SimplePreferences) )) (requireDef ( :requirements :typing :adl :preferences )) (typesDef ( :types (typedNameList (singleTypeNameList (name truckarea) (name time) (name location) (name locatable) - (r_type (primType (name object)))) (singleTypeNameList (name truck) (name package) - (r_type (primType (name locatable))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name locatable)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?t - (r_type (primType (name truck)))) (singleTypeVarList ?a - (r_type (primType (name truckarea))))) )) (atomicFormulaSkeleton ( (predicate (name connected)) (typedVariableList (singleTypeVarList ?x ?y - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name free)) (typedVariableList (singleTypeVarList ?a - (r_type (primType (name truckarea)))) (singleTypeVarList ?t - (r_type (primType (name truck))))) )) (atomicFormulaSkeleton ( (predicate (name time-now)) (typedVariableList (singleTypeVarList ?t - (r_type (primType (name time))))) )) (atomicFormulaSkeleton ( (predicate (name next)) (typedVariableList (singleTypeVarList ?t1 - (r_type (primType (name time)))) (singleTypeVarList ?t2 - (r_type (primType (name time))))) )) (atomicFormulaSkeleton ( (predicate (name le)) (typedVariableList (singleTypeVarList ?t1 - (r_type (primType (name time)))) (singleTypeVarList ?t2 - (r_type (primType (name time))))) )) (atomicFormulaSkeleton ( (predicate (name delivered)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?l - (r_type (primType (name location)))) (singleTypeVarList ?t - (r_type (primType (name time))))) )) (atomicFormulaSkeleton ( (predicate (name at-destination)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name closer)) (typedVariableList (singleTypeVarList ?a1 - (r_type (primType (name truckarea)))) (singleTypeVarList ?a2 - (r_type (primType (name truckarea))))) )) )) (structureDef (actionDef ( :action (actionSymbol (name load)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?t - (r_type (primType (name truck)))) (singleTypeVarList ?a1 - (r_type (primType (name truckarea)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name free)) (term ?a1) (term ?t) ))) (goalDesc ( forall ( (typedVariableList (singleTypeVarList ?a2 - (r_type (primType (name truckarea))))) ) (goalDesc ( imply (goalDesc (atomicTermFormula ( (predicate (name closer)) (term ?a2) (term ?a1) ))) (goalDesc (atomicTermFormula ( (predicate (name free)) (term ?a2) (term ?t) ))) )) )) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name free)) (term ?a1) (term ?t) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) (term ?a1) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name unload)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?t - (r_type (primType (name truck)))) (singleTypeVarList ?a1 - (r_type (primType (name truckarea)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) (term ?a1) ))) (goalDesc ( forall ( (typedVariableList (singleTypeVarList ?a2 - (r_type (primType (name truckarea))))) ) (goalDesc ( imply (goalDesc (atomicTermFormula ( (predicate (name closer)) (term ?a2) (term ?a1) ))) (goalDesc (atomicTermFormula ( (predicate (name free)) (term ?a2) (term ?t) ))) )) )) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) (term ?a1) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name free)) (term ?a1) (term ?t) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name drive)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?t - (r_type (primType (name truck)))) (singleTypeVarList ?from ?to - (r_type (primType (name location)))) (singleTypeVarList ?t1 ?t2 - (r_type (primType (name time))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?from) ))) (goalDesc (atomicTermFormula ( (predicate (name connected)) (term ?from) (term ?to) ))) (goalDesc (atomicTermFormula ( (predicate (name time-now)) (term ?t1) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?t1) (term ?t2) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?from) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name time-now)) (term ?t1) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name time-now)) (term ?t2) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?to) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name deliver)) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name package)))) (singleTypeVarList ?l - (r_type (primType (name location)))) (singleTypeVarList ?t1 ?t2 - (r_type (primType (name time))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name time-now)) (term ?t1) ))) (goalDesc (atomicTermFormula ( (predicate (name le)) (term ?t1) (term ?t2) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name delivered)) (term ?p) (term ?l) (term ?t2) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at-destination)) (term ?p) (term ?l) )))) ))) ))) )) <EOF>)
