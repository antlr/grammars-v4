(pddlDoc (problem ( define (problemDecl ( problem (name ZTRAVEL-2-5) )) (problemDomain ( :domain (name zeno-travel) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName person2) - (objectType person)) (objectDeclaration (objectName person3) - (objectType person)) (objectDeclaration (objectName person1) - (objectType person)) (objectDeclaration (objectName person4) - (objectType person)) (objectDeclaration (objectName person5) - (objectType person)) (objectDeclaration (objectName city2) - (objectType city)) (objectDeclaration (objectName city0) - (objectType city)) (objectDeclaration (objectName city1) - (objectType city)) (objectDeclaration (objectName fl1) - (objectType flevel)) (objectDeclaration (objectName fl0) - (objectType flevel)) (objectDeclaration (objectName fl3) - (objectType flevel)) (objectDeclaration (objectName fl2) - (objectType flevel)) (objectDeclaration (objectName fl5) - (objectType flevel)) (objectDeclaration (objectName fl4) - (objectType flevel)) (objectDeclaration (objectName fl6) - (objectType flevel)) (objectDeclaration (objectName plane1) - (objectType aircraft)) (objectDeclaration ( :private (objectName plane2) (objectList (objectDeclaration (objectName plane2) - (objectType aircraft))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name plane1) (name city2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name fuel-level)) (name plane1) (name fl5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name plane2) (name city2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name fuel-level)) (name plane2) (name fl0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name person1) (name city0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name person2) (name city1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name person3) (name city0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name person4) (name city0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name person5) (name city2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl0) (name fl1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl1) (name fl2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl2) (name fl3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl3) (name fl4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl4) (name fl5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name fl5) (name fl6) )))) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name plane1)) (term (name city0)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name person2)) (term (name city2)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name person3)) (term (name city0)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name person4)) (term (name city1)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name person5)) (term (name city2)) ))) )) )) )) <EOF>)
