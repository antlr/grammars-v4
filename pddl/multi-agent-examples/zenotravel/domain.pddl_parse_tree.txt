(pddlDoc (domain ( define (domainName ( domain (name zeno-travel) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name locatable) (name city) (name flevel) - (r_type (primType (name object)))) (singleTypeNameList (name aircraft) (name person) - (r_type (primType (name locatable))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name locatable)))) (singleTypeVarList ?c - (r_type (primType (name city))))) )) (atomicFormulaSkeleton ( (predicate (name next)) (typedVariableList (singleTypeVarList ?l1 - (r_type (primType (name flevel)))) (singleTypeVarList ?l2 - (r_type (primType (name flevel))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name aircraft))))) (atomicFormulaSkeleton ( (predicate (name fuel-level)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name aircraft)))) (singleTypeVarList ?l - (r_type (primType (name flevel))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name person)))) (singleTypeVarList ?agent - (r_type (primType (name aircraft))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name board)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name aircraft)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name person)))) (singleTypeVarList ?c - (r_type (primType (name city))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?c) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?a) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?c) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name debark)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name aircraft)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name person)))) (singleTypeVarList ?c - (r_type (primType (name city))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?a) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?c) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?a) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name fly)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name aircraft)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?c1 - (r_type (primType (name city)))) (singleTypeVarList ?c2 - (r_type (primType (name city)))) (singleTypeVarList ?l1 - (r_type (primType (name flevel)))) (singleTypeVarList ?l2 - (r_type (primType (name flevel))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c1) ))) (goalDesc (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l1) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l2) (term ?l1) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c2) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l2) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c1) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l1) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name zoom)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name aircraft)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?c1 - (r_type (primType (name city)))) (singleTypeVarList ?c2 - (r_type (primType (name city)))) (singleTypeVarList ?l1 - (r_type (primType (name flevel)))) (singleTypeVarList ?l2 - (r_type (primType (name flevel)))) (singleTypeVarList ?l3 - (r_type (primType (name flevel))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c1) ))) (goalDesc (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l1) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l2) (term ?l1) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l3) (term ?l2) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c2) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l3) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c1) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l1) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name refuel)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name aircraft)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?c - (r_type (primType (name city)))) (singleTypeVarList ?l - (r_type (primType (name flevel)))) (singleTypeVarList ?l1 - (r_type (primType (name flevel))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?l) (term ?l1) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?a) (term ?c) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l1) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name fuel-level)) (term ?a) (term ?l) )) ))) ))) ))) )) <EOF>)
