(pddlDoc (problem ( define (problemDecl ( problem (name depotprob7512) )) (problemDomain ( :domain (name depot) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName truck1) - (objectType truck)) (objectDeclaration (objectName truck0) - (objectType truck)) (objectDeclaration (objectName depot0) - (objectType depot)) (objectDeclaration (objectName crate1) - (objectType crate)) (objectDeclaration (objectName crate0) - (objectType crate)) (objectDeclaration (objectName crate3) - (objectType crate)) (objectDeclaration (objectName crate2) - (objectType crate)) (objectDeclaration (objectName pallet1) - (objectType pallet)) (objectDeclaration (objectName pallet0) - (objectType pallet)) (objectDeclaration (objectName pallet2) - (objectType pallet)) (objectDeclaration (objectName distributor1) - (objectType distributor)) (objectDeclaration (objectName distributor0) - (objectType distributor)) (objectDeclaration ( :private (objectName depot0) (objectList (objectDeclaration (objectName hoist0) - (objectType hoist))) )) (objectDeclaration ( :private (objectName distributor0) (objectList (objectDeclaration (objectName hoist1) - (objectType hoist))) )) (objectDeclaration ( :private (objectName distributor1) (objectList (objectDeclaration (objectName hoist2) - (objectType hoist))) )) (objectDeclaration ( :private (objectName driver1) (objectList (objectDeclaration (objectName driver1) - (objectType driver))) )) (objectDeclaration ( :private (objectName driver0) (objectList (objectDeclaration (objectName driver0) - (objectType driver))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver0) (name truck0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver1) (name truck1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet1) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet2) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck1) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name depot0) (name hoist0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist1) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor0) (name hoist1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist2) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor1) (name hoist2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate0) (name pallet0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate1) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate1) (name pallet2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate2) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate2) (name crate1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate3) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate3) (name pallet1) )))) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate0)) (term (name pallet2)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate1)) (term (name crate3)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate2)) (term (name pallet0)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate3)) (term (name pallet1)) ))) )) )) )) <EOF>)
