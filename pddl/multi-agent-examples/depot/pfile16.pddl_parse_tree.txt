(pddlDoc (problem ( define (problemDecl ( problem (name depotprob4398) )) (problemDomain ( :domain (name depot) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName distributor1) - (objectType distributor)) (objectDeclaration (objectName distributor0) - (objectType distributor)) (objectDeclaration (objectName depot0) - (objectType depot)) (objectDeclaration (objectName depot1) - (objectType depot)) (objectDeclaration (objectName pallet5) - (objectType pallet)) (objectDeclaration (objectName pallet4) - (objectType pallet)) (objectDeclaration (objectName pallet7) - (objectType pallet)) (objectDeclaration (objectName pallet6) - (objectType pallet)) (objectDeclaration (objectName pallet1) - (objectType pallet)) (objectDeclaration (objectName pallet0) - (objectType pallet)) (objectDeclaration (objectName pallet3) - (objectType pallet)) (objectDeclaration (objectName pallet2) - (objectType pallet)) (objectDeclaration (objectName truck1) - (objectType truck)) (objectDeclaration (objectName truck0) - (objectType truck)) (objectDeclaration (objectName truck3) - (objectType truck)) (objectDeclaration (objectName truck2) - (objectType truck)) (objectDeclaration (objectName crate5) - (objectType crate)) (objectDeclaration (objectName crate4) - (objectType crate)) (objectDeclaration (objectName crate1) - (objectType crate)) (objectDeclaration (objectName crate0) - (objectType crate)) (objectDeclaration (objectName crate3) - (objectType crate)) (objectDeclaration (objectName crate2) - (objectType crate)) (objectDeclaration ( :private (objectName depot0) (objectList (objectDeclaration (objectName hoist0) - (objectType hoist))) )) (objectDeclaration ( :private (objectName depot1) (objectList (objectDeclaration (objectName hoist5) - (objectType hoist)) (objectDeclaration (objectName hoist6) - (objectType hoist)) (objectDeclaration (objectName hoist1) - (objectType hoist))) )) (objectDeclaration ( :private (objectName distributor0) (objectList (objectDeclaration (objectName hoist2) - (objectType hoist))) )) (objectDeclaration ( :private (objectName distributor1) (objectList (objectDeclaration (objectName hoist4) - (objectType hoist)) (objectDeclaration (objectName hoist7) - (objectType hoist)) (objectDeclaration (objectName hoist3) - (objectType hoist))) )) (objectDeclaration ( :private (objectName driver0) (objectList (objectDeclaration (objectName driver0) - (objectType driver))) )) (objectDeclaration ( :private (objectName driver1) (objectList (objectDeclaration (objectName driver1) - (objectType driver))) )) (objectDeclaration ( :private (objectName driver2) (objectList (objectDeclaration (objectName driver2) - (objectType driver))) )) (objectDeclaration ( :private (objectName driver3) (objectList (objectDeclaration (objectName driver3) - (objectType driver))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver0) (name truck0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver1) (name truck1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver2) (name truck2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name driving)) (name driver3) (name truck3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet1) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet2) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet3) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name pallet3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet4) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name crate0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet5) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name pallet5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet6) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name pallet6) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name pallet7) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name clear)) (name pallet7) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck0) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck1) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck2) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck3) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist0) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name depot0) (name hoist0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist1) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name depot1) (name hoist1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist2) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor0) (name hoist2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist3) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor1) (name hoist3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist4) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor1) (name hoist4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist5) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name depot1) (name hoist5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist6) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name depot1) (name hoist6) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name hoist7) (name distributor1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name distributor1) (name hoist7) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate0) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate0) (name pallet4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate1) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate1) (name pallet1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate2) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate2) (name pallet0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate3) (name depot1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate3) (name crate1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate4) (name distributor0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate4) (name pallet2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name crate5) (name depot0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name on)) (name crate5) (name crate2) )))) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate0)) (term (name pallet3)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate2)) (term (name pallet1)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate3)) (term (name pallet0)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate4)) (term (name crate3)) ))) (goalDesc (atomicTermFormula ( (predicate (name on)) (term (name crate5)) (term (name pallet2)) ))) )) )) )) <EOF>)
