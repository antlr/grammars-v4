(pddlDoc (domain ( define (domainName ( domain (name rover) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name rover) (name waypoint) (name store) (name camera) (name mode) (name lander) (name objective) - (r_type (primType (name object))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name visible)) (typedVariableList (singleTypeVarList ?w - (r_type (primType (name waypoint)))) (singleTypeVarList ?p - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name visible_from)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name objective)))) (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name at_rock_sample)) (typedVariableList (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name at_soil_sample)) (typedVariableList (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name at_lander)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name lander)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name communicated_image_data)) (typedVariableList (singleTypeVarList ?o - (r_type (primType (name objective)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (atomicFormulaSkeleton ( (predicate (name communicated_rock_data)) (typedVariableList (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name communicated_soil_data)) (typedVariableList (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name empty)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name store))))) )) (atomicFormulaSkeleton ( (predicate (name full)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name store))))) )) (atomicFormulaSkeleton ( (predicate (name supports)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name camera)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (atomicFormulaSkeleton ( (predicate (name calibration_target)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name camera)))) (singleTypeVarList ?o - (r_type (primType (name objective))))) )) (atomicFormulaSkeleton ( (predicate (name channel_free)) (typedVariableList (singleTypeVarList ?l - (r_type (primType (name lander))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover))))) (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name can_traverse)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover)))) (singleTypeVarList ?x - (r_type (primType (name waypoint)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name equipped_for_soil_analysis)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name equipped_for_rock_analysis)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name equipped_for_imaging)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name have_rock_analysis)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover)))) (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name have_soil_analysis)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover)))) (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (atomicFormulaSkeleton ( (predicate (name calibrated)) (typedVariableList (singleTypeVarList ?c - (r_type (primType (name camera)))) (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name available)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name have_image)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name rover)))) (singleTypeVarList ?o - (r_type (primType (name objective)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (atomicFormulaSkeleton ( (predicate (name store_of)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name store)))) (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) (atomicFormulaSkeleton ( (predicate (name on_board)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name camera)))) (singleTypeVarList ?agent - (r_type (primType (name rover))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name navigate)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?x - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?y - (r_type (primType (name waypoint)))) (singleTypeVarList ?z - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name can_traverse)) (term ?x) (term ?y) (term ?z) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name visible)) (term ?y) (term ?z) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?z) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name sample_soil)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?x - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name store)))) (singleTypeVarList ?p - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at_soil_sample)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name equipped_for_soil_analysis)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name store_of)) (term ?s) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name full)) (term ?s) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name have_soil_analysis)) (term ?x) (term ?p) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at_soil_sample)) (term ?p) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name sample_rock)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?x - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name store)))) (singleTypeVarList ?p - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?x) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at_rock_sample)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name equipped_for_rock_analysis)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name store_of)) (term ?s) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name full)) (term ?s) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name have_rock_analysis)) (term ?x) (term ?p) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at_rock_sample)) (term ?p) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name drop)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?x - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?y - (r_type (primType (name store))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name store_of)) (term ?y) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name full)) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name full)) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?y) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name calibrate)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?r - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?i - (r_type (primType (name camera)))) (singleTypeVarList ?t - (r_type (primType (name objective)))) (singleTypeVarList ?w - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name equipped_for_imaging)) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name calibration_target)) (term ?i) (term ?t) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?r) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name visible_from)) (term ?t) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?r) ))) ))) :effect (effect (cEffect (pEffect (atomicTermFormula ( (predicate (name calibrated)) (term ?i) (term ?r) )))))) ))) (structureDef (actionDef ( :action (actionSymbol (name take_image)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?r - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?p - (r_type (primType (name waypoint)))) (singleTypeVarList ?o - (r_type (primType (name objective)))) (singleTypeVarList ?i - (r_type (primType (name camera)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name calibrated)) (term ?i) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name equipped_for_imaging)) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name supports)) (term ?i) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name visible_from)) (term ?o) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?r) (term ?p) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name have_image)) (term ?r) (term ?o) (term ?m) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name calibrated)) (term ?i) (term ?r) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name communicate_soil_data)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?r - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?l - (r_type (primType (name lander)))) (singleTypeVarList ?p - (r_type (primType (name waypoint)))) (singleTypeVarList ?x - (r_type (primType (name waypoint)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?r) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name at_lander)) (term ?l) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name have_soil_analysis)) (term ?r) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name visible)) (term ?x) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name channel_free)) (term ?l) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?r) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name communicated_soil_data)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?r) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name communicate_rock_data)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?r - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?l - (r_type (primType (name lander)))) (singleTypeVarList ?p - (r_type (primType (name waypoint)))) (singleTypeVarList ?x - (r_type (primType (name waypoint)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?r) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name at_lander)) (term ?l) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name have_rock_analysis)) (term ?r) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name visible)) (term ?x) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name channel_free)) (term ?l) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?r) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name communicated_rock_data)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?r) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name communicate_image_data)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?r - (r_type (primType (name rover)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?l - (r_type (primType (name lander)))) (singleTypeVarList ?o - (r_type (primType (name objective)))) (singleTypeVarList ?m - (r_type (primType (name mode)))) (singleTypeVarList ?x - (r_type (primType (name waypoint)))) (singleTypeVarList ?y - (r_type (primType (name waypoint))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?r) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name at_lander)) (term ?l) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name have_image)) (term ?r) (term ?o) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name visible)) (term ?x) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?r) ))) (goalDesc (atomicTermFormula ( (predicate (name channel_free)) (term ?l) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?r) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name channel_free)) (term ?l) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name communicated_image_data)) (term ?o) (term ?m) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?r) )))) ))) ))) )) <EOF>)
