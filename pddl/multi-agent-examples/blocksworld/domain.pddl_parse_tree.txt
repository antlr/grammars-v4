(pddlDoc (domain ( define (domainName ( domain (name blocks) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name agent) (name block) - (r_type (primType (name object))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name on)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block)))) (singleTypeVarList ?y - (r_type (primType (name block))))) )) (atomicFormulaSkeleton ( (predicate (name ontable)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block))))) )) (atomicFormulaSkeleton ( (predicate (name clear)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name agent))))) (atomicFormulaSkeleton ( (predicate (name holding)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name agent)))) (singleTypeVarList ?x - (r_type (primType (name block))))) )) (atomicFormulaSkeleton ( (predicate (name handempty)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name agent))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name pick-up)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name agent)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name ontable)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?a) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name ontable)) (term ?x) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?x) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name handempty)) (term ?a) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name put-down)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name agent)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block))))) )) (actionDefBody :precondition (precondition (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) )))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?x) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name handempty)) (term ?a) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name ontable)) (term ?x) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name stack)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name agent)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block)))) (singleTypeVarList ?y - (r_type (primType (name block))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?y) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?y) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?x) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name handempty)) (term ?a) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name on)) (term ?x) (term ?y) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name unstack)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?a - (r_type (primType (name agent)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name block)))) (singleTypeVarList ?y - (r_type (primType (name block))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on)) (term ?x) (term ?y) ))) (goalDesc (atomicTermFormula ( (predicate (name clear)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name handempty)) (term ?a) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name holding)) (term ?a) (term ?x) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name clear)) (term ?y) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name clear)) (term ?x) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name handempty)) (term ?a) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name on)) (term ?x) (term ?y) )) ))) ))) ))) )) <EOF>)
