(pddlDoc (domain ( define (domainName ( domain (name logistics) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name location) (name vehicle) (name package) (name city) - (r_type (primType (name object)))) (singleTypeNameList (name airport) - (r_type (primType (name location)))) (singleTypeNameList (name truck) (name airplane) - (r_type (primType (name vehicle))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name object)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?obj1 - (r_type (primType (name package)))) (singleTypeVarList ?veh - (r_type (primType (name vehicle))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name truck))))) (atomicFormulaSkeleton ( (predicate (name in-city)) (typedVariableList (singleTypeVarList ?loc - (r_type (primType (name location)))) (singleTypeVarList ?city - (r_type (primType (name city))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name load-airplane)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?airplane - (r_type (primType (name airplane)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name airport))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?airplane) (term ?loc) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?airplane) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name unload-airplane)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?airplane - (r_type (primType (name airplane)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name airport))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?airplane) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?airplane) (term ?loc) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?airplane) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name fly-airplane)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?airplane - (r_type (primType (name airplane)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?loc-from - (r_type (primType (name airport)))) (singleTypeVarList ?loc-to - (r_type (primType (name airport))))) )) (actionDefBody :precondition (precondition (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?airplane) (term ?loc-from) )))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?airplane) (term ?loc-from) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?airplane) (term ?loc-to) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name load-truck)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name unload-truck)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name drive-truck)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?loc-from - (r_type (primType (name location)))) (singleTypeVarList ?loc-to - (r_type (primType (name location)))) (singleTypeVarList ?city - (r_type (primType (name city))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-from) ))) (goalDesc (atomicTermFormula ( (predicate (name in-city)) (term ?loc-from) (term ?city) ))) (goalDesc (atomicTermFormula ( (predicate (name in-city)) (term ?loc-to) (term ?city) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-from) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-to) )))) ))) ))) )) <EOF>)
