(pddlDoc (problem ( define (problemDecl ( problem (name wood-prob) )) (problemDomain ( :domain (name woodworking) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName mauve) - (objectType acolour)) (objectDeclaration (objectName mahogany) - (objectType awood)) (objectDeclaration (objectName b0) - (objectType board)) (objectDeclaration (objectName b1) - (objectType board)) (objectDeclaration (objectName b2) - (objectType board)) (objectDeclaration (objectName b3) - (objectType board)) (objectDeclaration (objectName blue) - (objectType acolour)) (objectDeclaration (objectName s9) - (objectType aboardsize)) (objectDeclaration (objectName s8) - (objectType aboardsize)) (objectDeclaration (objectName s3) - (objectType aboardsize)) (objectDeclaration (objectName s2) - (objectType aboardsize)) (objectDeclaration (objectName s1) - (objectType aboardsize)) (objectDeclaration (objectName s0) - (objectType aboardsize)) (objectDeclaration (objectName s7) - (objectType aboardsize)) (objectDeclaration (objectName s6) - (objectType aboardsize)) (objectDeclaration (objectName s5) - (objectType aboardsize)) (objectDeclaration (objectName s4) - (objectType aboardsize)) (objectDeclaration (objectName black) - (objectType acolour)) (objectDeclaration (objectName s10) - (objectType aboardsize)) (objectDeclaration (objectName p2) - (objectType part)) (objectDeclaration (objectName p3) - (objectType part)) (objectDeclaration (objectName p0) - (objectType part)) (objectDeclaration (objectName p1) - (objectType part)) (objectDeclaration (objectName p7) - (objectType part)) (objectDeclaration (objectName p4) - (objectType part)) (objectDeclaration (objectName p5) - (objectType part)) (objectDeclaration (objectName p6) - (objectType part)) (objectDeclaration (objectName p8) - (objectType part)) (objectDeclaration (objectName teak) - (objectType awood)) (objectDeclaration (objectName green) - (objectType acolour)) (objectDeclaration ( :private (objectName grinder0) (objectList (objectDeclaration (objectName grinder0) - (objectType grinder))) )) (objectDeclaration ( :private (objectName glazer0) (objectList (objectDeclaration (objectName glazer0) - (objectType glazer))) )) (objectDeclaration ( :private (objectName planer0) (objectList (objectDeclaration (objectName planer0) - (objectType planer))) )) (objectDeclaration ( :private (objectName immersion-varnisher0) (objectList (objectDeclaration (objectName immersion-varnisher0) - (objectType immersion-varnisher))) )) (objectDeclaration ( :private (objectName highspeed-saw0) (objectList (objectDeclaration (objectName highspeed-saw0) - (objectType highspeed-saw))) )) (objectDeclaration ( :private (objectName saw0) (objectList (objectDeclaration (objectName saw0) - (objectType saw))) )) (objectDeclaration ( :private (objectName spray-varnisher0) (objectList (objectDeclaration (objectName spray-varnisher0) - (objectType spray-varnisher))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name varnished) (name colourfragments) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name glazed) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name untreated) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name colourfragments) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name is-smooth)) (name smooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name is-smooth)) (name verysmooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s0) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s1) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s2) (name s3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s3) (name s4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s4) (name s5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s5) (name s6) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s6) (name s7) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s7) (name s8) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s8) (name s9) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s9) (name s10) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name glazer0) (name mauve) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name glazer0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name green) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name black) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name mauve) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name empty)) (name highspeed-saw0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name green) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name black) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name mauve) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p0) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p1) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p2) (name medium) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p3) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p4) (name small) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name p5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name colour)) (name p5) (name blue) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name p5) (name teak) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name p5) (name rough) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name treatment)) (name p5) (name glazed) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p5) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p6) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p6) (name small) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p7) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p7) (name medium) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p8) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p8) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize)) (name b0) (name s10) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name b0) (name teak) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name b0) (name rough) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name b0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize)) (name b1) (name s6) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name b1) (name teak) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name b1) (name smooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name b1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize)) (name b2) (name s7) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name b2) (name mahogany) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name b2) (name rough) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name b2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize)) (name b3) (name s3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name b3) (name mahogany) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name b3) (name smooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name b3) )))) (initEl ( = (fHead ( (functionSymbol (name total-cost)) )) 0 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p0)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p0)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p0)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p0)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p1)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p1)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p1)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p1)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p2)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p2)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p2)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p2)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p3)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p3)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p3)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p3)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p4)) )) 5 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p4)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p4)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p4)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p5)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p5)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p5)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p5)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p6)) )) 5 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p6)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p6)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p6)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p7)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p7)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p7)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p7)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p8)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p8)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p8)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p8)) )) 30 )) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p0)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p0)) (term (name green)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p0)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p1)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p1)) (term (name black)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p1)) (term (name verysmooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p1)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p2)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p2)) (term (name mauve)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p2)) (term (name teak)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p3)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p3)) (term (name verysmooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p3)) (term (name glazed)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p4)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p4)) (term (name mahogany)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p4)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p5)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p5)) (term (name verysmooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p5)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p6)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p6)) (term (name mahogany)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p6)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p7)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p7)) (term (name natural)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p7)) (term (name mahogany)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p7)) (term (name verysmooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p7)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p8)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p8)) (term (name natural)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p8)) (term (name smooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p8)) (term (name glazed)) ))) )) )) (metricSpec ( :metric (optimization minimize) (metricFExp ( (functionSymbol (name total-cost)) )) )) )) <EOF>)
