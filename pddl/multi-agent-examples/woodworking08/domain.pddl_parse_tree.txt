(pddlDoc (domain ( define (domainName ( domain (name woodworking) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name acolour) (name awood) (name woodobj) (name machine) (name surface) (name treatmentstatus) (name aboardsize) (name apartsize) - (r_type (primType (name object)))) (singleTypeNameList (name highspeed-saw) (name saw) (name glazer) (name grinder) (name immersion-varnisher) (name planer) (name spray-varnisher) - (r_type (primType (name machine)))) (singleTypeNameList (name board) (name part) - (r_type (primType (name woodobj))))) )) (constantsDef ( :constants (typedNameList (singleTypeNameList (name natural) - (r_type (primType (name acolour)))) (singleTypeNameList (name small) (name medium) (name large) - (r_type (primType (name apartsize)))) (singleTypeNameList (name varnished) (name glazed) (name untreated) (name colourfragments) - (r_type (primType (name treatmentstatus)))) (singleTypeNameList (name verysmooth) (name smooth) (name rough) - (r_type (primType (name surface))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name available)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name woodobj))))) )) (atomicFormulaSkeleton ( (predicate (name surface-condition)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name woodobj)))) (singleTypeVarList ?surface - (r_type (primType (name surface))))) )) (atomicFormulaSkeleton ( (predicate (name treatment)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part)))) (singleTypeVarList ?treatment - (r_type (primType (name treatmentstatus))))) )) (atomicFormulaSkeleton ( (predicate (name colour)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part)))) (singleTypeVarList ?colour - (r_type (primType (name acolour))))) )) (atomicFormulaSkeleton ( (predicate (name wood)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name woodobj)))) (singleTypeVarList ?wood - (r_type (primType (name awood))))) )) (atomicFormulaSkeleton ( (predicate (name is-smooth)) (typedVariableList (singleTypeVarList ?surface - (r_type (primType (name surface))))) )) (atomicFormulaSkeleton ( (predicate (name has-colour)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name machine)))) (singleTypeVarList ?colour - (r_type (primType (name acolour))))) )) (atomicFormulaSkeleton ( (predicate (name goalsize)) (typedVariableList (singleTypeVarList ?part - (r_type (primType (name part)))) (singleTypeVarList ?size - (r_type (primType (name apartsize))))) )) (atomicFormulaSkeleton ( (predicate (name boardsize-successor)) (typedVariableList (singleTypeVarList ?size1 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size2 - (r_type (primType (name aboardsize))))) )) (atomicFormulaSkeleton ( (predicate (name unused)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part))))) )) (atomicFormulaSkeleton ( (predicate (name boardsize)) (typedVariableList (singleTypeVarList ?board - (r_type (primType (name board)))) (singleTypeVarList ?size - (r_type (primType (name aboardsize))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name grinder))))) (atomicFormulaSkeleton ( (predicate (name grind-treatment-change)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name grinder)))) (singleTypeVarList ?old - (r_type (primType (name treatmentstatus)))) (singleTypeVarList ?new - (r_type (primType (name treatmentstatus))))) )) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name highspeed-saw))))) (atomicFormulaSkeleton ( (predicate (name empty)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name highspeed-saw))))) )) (atomicFormulaSkeleton ( (predicate (name in-highspeed-saw)) (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?agent - (r_type (primType (name highspeed-saw))))) )) )) )) (functionsDef ( :functions (functionList (atomicFunctionSkeleton ( (functionSymbol (name total-cost)) typedVariableList )) - (functionType number) (atomicFunctionSkeleton ( (functionSymbol (name spray-varnish-cost)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part))))) )) - (functionType number) (atomicFunctionSkeleton ( (functionSymbol (name glaze-cost)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part))))) )) - (functionType number) (atomicFunctionSkeleton ( (functionSymbol (name grind-cost)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part))))) )) - (functionType number) (atomicFunctionSkeleton ( (functionSymbol (name plane-cost)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name part))))) )) - (functionType number)) )) (structureDef (actionDef ( :action (actionSymbol (name do-immersion-varnish)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name immersion-varnisher)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name part)))) (singleTypeVarList ?newcolour - (r_type (primType (name acolour)))) (singleTypeVarList ?surface - (r_type (primType (name surface))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name has-colour)) (term ?m) (term ?newcolour) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name is-smooth)) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name varnished)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name colour)) (term ?x) (term (name natural)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?newcolour) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-spray-varnish)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name spray-varnisher)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name part)))) (singleTypeVarList ?newcolour - (r_type (primType (name acolour)))) (singleTypeVarList ?surface - (r_type (primType (name surface))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name has-colour)) (term ?m) (term ?newcolour) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name is-smooth)) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp (fHead ( (functionSymbol (name spray-varnish-cost)) (term ?x) ))) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name varnished)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name colour)) (term ?x) (term (name natural)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?newcolour) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-glaze)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name glazer)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name part)))) (singleTypeVarList ?newcolour - (r_type (primType (name acolour))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name has-colour)) (term ?m) (term ?newcolour) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp (fHead ( (functionSymbol (name glaze-cost)) (term ?x) ))) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name glazed)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name colour)) (term ?x) (term (name natural)) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?newcolour) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-grind)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name grinder)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name part)))) (singleTypeVarList ?oldsurface - (r_type (primType (name surface)))) (singleTypeVarList ?oldcolour - (r_type (primType (name acolour)))) (singleTypeVarList ?oldtreatment - (r_type (primType (name treatmentstatus)))) (singleTypeVarList ?newtreatment - (r_type (primType (name treatmentstatus))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?oldsurface) ))) (goalDesc (atomicTermFormula ( (predicate (name is-smooth)) (term ?oldsurface) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?oldcolour) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term ?oldtreatment) ))) (goalDesc (atomicTermFormula ( (predicate (name grind-treatment-change)) (term ?m) (term ?oldtreatment) (term ?newtreatment) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp (fHead ( (functionSymbol (name grind-cost)) (term ?x) ))) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?oldsurface) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term (name verysmooth)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term ?oldtreatment) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term ?newtreatment) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?oldcolour) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?x) (term (name natural)) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-plane)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name planer)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?x - (r_type (primType (name part)))) (singleTypeVarList ?oldsurface - (r_type (primType (name surface)))) (singleTypeVarList ?oldcolour - (r_type (primType (name acolour)))) (singleTypeVarList ?oldtreatment - (r_type (primType (name treatmentstatus))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?x) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?oldsurface) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term ?oldtreatment) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?oldcolour) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp (fHead ( (functionSymbol (name plane-cost)) (term ?x) ))) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term ?oldsurface) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?x) (term (name smooth)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term ?oldtreatment) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?x) (term (name untreated)) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name colour)) (term ?x) (term ?oldcolour) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?x) (term (name natural)) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name load-highspeed-saw)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name highspeed-saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?b) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 30) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name available)) (term ?b) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?m) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name unload-highspeed-saw)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name highspeed-saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board))))) )) (actionDefBody :precondition (precondition (goalDesc (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) )))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?b) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?m) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name cut-board-small)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name highspeed-saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name small)) ))) (goalDesc (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name cut-board-medium)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name highspeed-saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s1 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name medium)) ))) (goalDesc (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?s1) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s1) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name cut-board-large)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name highspeed-saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s1 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s2 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name large)) ))) (goalDesc (atomicTermFormula ( (predicate (name in-highspeed-saw)) (term ?b) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?s1) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s1) (term ?s2) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s2) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 10) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-saw-small)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name small)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?b) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 30) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-saw-medium)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s1 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name medium)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?b) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?s1) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s1) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 30) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name do-saw-large)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?m - (r_type (primType (name saw)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?b - (r_type (primType (name board)))) (singleTypeVarList ?p - (r_type (primType (name part)))) (singleTypeVarList ?w - (r_type (primType (name awood)))) (singleTypeVarList ?surface - (r_type (primType (name surface)))) (singleTypeVarList ?size_before - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s1 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?s2 - (r_type (primType (name aboardsize)))) (singleTypeVarList ?size_after - (r_type (primType (name aboardsize))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name unused)) (term ?p) ))) (goalDesc (atomicTermFormula ( (predicate (name goalsize)) (term ?p) (term (name large)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term ?b) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term ?b) (term ?w) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term ?b) (term ?surface) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_before) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?size_after) (term ?s1) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s1) (term ?s2) ))) (goalDesc (atomicTermFormula ( (predicate (name boardsize-successor)) (term ?s2) (term ?size_before) ))) ))) :effect (effect ( and (cEffect (pEffect ( (assignOp increase) (fHead ( (functionSymbol (name total-cost)) )) (fExp 30) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name unused)) (term ?p) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name available)) (term ?p) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name wood)) (term ?p) (term ?w) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name surface-condition)) (term ?p) (term ?surface) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name colour)) (term ?p) (term (name natural)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name treatment)) (term ?p) (term (name untreated)) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name boardsize)) (term ?b) (term ?size_after) )))) ))) ))) )) <EOF>)
