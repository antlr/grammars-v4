(pddlDoc (problem ( define (problemDecl ( problem (name wood-prob) )) (problemDomain ( :domain (name woodworking) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName b0) - (objectType board)) (objectDeclaration (objectName p2) - (objectType part)) (objectDeclaration (objectName p0) - (objectType part)) (objectDeclaration (objectName p1) - (objectType part)) (objectDeclaration (objectName s3) - (objectType aboardsize)) (objectDeclaration (objectName s2) - (objectType aboardsize)) (objectDeclaration (objectName s1) - (objectType aboardsize)) (objectDeclaration (objectName s0) - (objectType aboardsize)) (objectDeclaration (objectName pine) - (objectType awood)) (objectDeclaration (objectName teak) - (objectType awood)) (objectDeclaration (objectName red) - (objectType acolour)) (objectDeclaration ( :private (objectName grinder0) (objectList (objectDeclaration (objectName grinder0) - (objectType grinder))) )) (objectDeclaration ( :private (objectName glazer0) (objectList (objectDeclaration (objectName glazer0) - (objectType glazer))) )) (objectDeclaration ( :private (objectName planer0) (objectList (objectDeclaration (objectName planer0) - (objectType planer))) )) (objectDeclaration ( :private (objectName immersion-varnisher0) (objectList (objectDeclaration (objectName immersion-varnisher0) - (objectType immersion-varnisher))) )) (objectDeclaration ( :private (objectName highspeed-saw0) (objectList (objectDeclaration (objectName highspeed-saw0) - (objectType highspeed-saw))) )) (objectDeclaration ( :private (objectName saw0) (objectList (objectDeclaration (objectName saw0) - (objectType saw))) )) (objectDeclaration ( :private (objectName spray-varnisher0) (objectList (objectDeclaration (objectName spray-varnisher0) - (objectType spray-varnisher))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name varnished) (name colourfragments) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name glazed) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name untreated) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name grind-treatment-change)) (name grinder0) (name colourfragments) (name untreated) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name is-smooth)) (name smooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name is-smooth)) (name verysmooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s0) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s1) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize-successor)) (name s2) (name s3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name glazer0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name glazer0) (name red) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name immersion-varnisher0) (name red) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name empty)) (name highspeed-saw0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name has-colour)) (name spray-varnisher0) (name red) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name p0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name colour)) (name p0) (name red) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name p0) (name pine) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name p0) (name smooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name treatment)) (name p0) (name varnished) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p0) (name small) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name unused)) (name p1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p1) (name medium) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name p2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name colour)) (name p2) (name natural) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name p2) (name teak) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name p2) (name verysmooth) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name treatment)) (name p2) (name varnished) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name goalsize)) (name p2) (name large) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name boardsize)) (name b0) (name s3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name wood)) (name b0) (name pine) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name surface-condition)) (name b0) (name rough) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name available)) (name b0) )))) (initEl ( = (fHead ( (functionSymbol (name total-cost)) )) 0 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p0)) )) 5 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p0)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p0)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p0)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p1)) )) 10 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p1)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p1)) )) 30 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p1)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name spray-varnish-cost)) (term (name p2)) )) 15 )) (initEl ( = (fHead ( (functionSymbol (name glaze-cost)) (term (name p2)) )) 20 )) (initEl ( = (fHead ( (functionSymbol (name grind-cost)) (term (name p2)) )) 45 )) (initEl ( = (fHead ( (functionSymbol (name plane-cost)) (term (name p2)) )) 30 )) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p0)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p0)) (term (name natural)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p0)) (term (name pine)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p1)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p1)) (term (name natural)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p1)) (term (name pine)) ))) (goalDesc (atomicTermFormula ( (predicate (name surface-condition)) (term (name p1)) (term (name smooth)) ))) (goalDesc (atomicTermFormula ( (predicate (name treatment)) (term (name p1)) (term (name varnished)) ))) (goalDesc (atomicTermFormula ( (predicate (name available)) (term (name p2)) ))) (goalDesc (atomicTermFormula ( (predicate (name colour)) (term (name p2)) (term (name red)) ))) (goalDesc (atomicTermFormula ( (predicate (name wood)) (term (name p2)) (term (name teak)) ))) )) )) (metricSpec ( :metric (optimization minimize) (metricFExp ( (functionSymbol (name total-cost)) )) )) )) <EOF>)
