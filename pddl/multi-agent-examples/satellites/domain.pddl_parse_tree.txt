(pddlDoc (domain ( define (domainName ( domain (name satellite) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name satellite) (name direction) (name instrument) (name mode) - (r_type (primType (name object))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name pointing)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))) (singleTypeVarList ?d - (r_type (primType (name direction))))) )) (atomicFormulaSkeleton ( (predicate (name have_image)) (typedVariableList (singleTypeVarList ?d - (r_type (primType (name direction)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name satellite))))) (atomicFormulaSkeleton ( (predicate (name calibrated)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument))))) )) (atomicFormulaSkeleton ( (predicate (name supports)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (atomicFormulaSkeleton ( (predicate (name on_board)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument)))) (singleTypeVarList ?agent - (r_type (primType (name satellite))))) )) (atomicFormulaSkeleton ( (predicate (name calibration_target)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument)))) (singleTypeVarList ?d - (r_type (primType (name direction))))) )) (atomicFormulaSkeleton ( (predicate (name power_avail)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name satellite))))) )) (atomicFormulaSkeleton ( (predicate (name power_on)) (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name turn_to)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?d_new - (r_type (primType (name direction)))) (singleTypeVarList ?d_prev - (r_type (primType (name direction))))) )) (actionDefBody :precondition (precondition (goalDesc (atomicTermFormula ( (predicate (name pointing)) (term ?s) (term ?d_prev) )))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name pointing)) (term ?s) (term ?d_new) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name pointing)) (term ?s) (term ?d_prev) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name switch_on)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name power_avail)) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name power_on)) (term ?i) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name calibrated)) (term ?i) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name power_avail)) (term ?s) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name switch_off)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name power_on)) (term ?i) ))) ))) :effect (effect ( and (cEffect (pEffect (atomicTermFormula ( (predicate (name power_avail)) (term ?s) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name power_on)) (term ?i) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name calibrate)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument)))) (singleTypeVarList ?d - (r_type (primType (name direction))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name calibration_target)) (term ?i) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name pointing)) (term ?s) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name power_on)) (term ?i) ))) ))) :effect (effect (cEffect (pEffect (atomicTermFormula ( (predicate (name calibrated)) (term ?i) )))))) ))) (structureDef (actionDef ( :action (actionSymbol (name take_image)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name satellite)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?i - (r_type (primType (name instrument)))) (singleTypeVarList ?d - (r_type (primType (name direction)))) (singleTypeVarList ?m - (r_type (primType (name mode))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name calibrated)) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name on_board)) (term ?i) (term ?s) ))) (goalDesc (atomicTermFormula ( (predicate (name supports)) (term ?i) (term ?m) ))) (goalDesc (atomicTermFormula ( (predicate (name power_on)) (term ?i) ))) (goalDesc (atomicTermFormula ( (predicate (name pointing)) (term ?s) (term ?d) ))) (goalDesc (atomicTermFormula ( (predicate (name power_on)) (term ?i) ))) ))) :effect (effect (cEffect (pEffect (atomicTermFormula ( (predicate (name have_image)) (term ?d) (term ?m) )))))) ))) )) <EOF>)
