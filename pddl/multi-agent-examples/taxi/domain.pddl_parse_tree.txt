(pddlDoc (domain ( define (domainName ( domain (name taxi) )) (requireDef ( :requirements :strips :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name location) (name agent) - (r_type (primType (name object)))) (singleTypeNameList (name taxi) (name passenger) - (r_type (primType (name agent))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name directly-connected)) (typedVariableList (singleTypeVarList ?l1 - (r_type (primType (name location)))) (singleTypeVarList ?l2 - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?a - (r_type (primType (name agent)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name passenger)))) (singleTypeVarList ?t - (r_type (primType (name taxi))))) )) (atomicFormulaSkeleton ( (predicate (name empty)) (typedVariableList (singleTypeVarList ?t - (r_type (primType (name taxi))))) )) (atomicFormulaSkeleton ( (predicate (name free)) (typedVariableList (singleTypeVarList ?l - (r_type (primType (name location))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?p - (r_type (primType (name passenger))))) (atomicFormulaSkeleton ( (predicate (name goal-of)) (typedVariableList (singleTypeVarList ?p - (r_type (primType (name passenger)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name drive)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?t - (r_type (primType (name taxi)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?from - (r_type (primType (name location)))) (singleTypeVarList ?to - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?from) ))) (goalDesc (atomicTermFormula ( (predicate (name directly-connected)) (term ?from) (term ?to) ))) (goalDesc (atomicTermFormula ( (predicate (name free)) (term ?to) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?from) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name free)) (term ?to) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?to) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name free)) (term ?from) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name enter)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?p - (r_type (primType (name passenger)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?t - (r_type (primType (name taxi)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?t) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?t) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name exit)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?p - (r_type (primType (name passenger)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?t - (r_type (primType (name taxi)))) (singleTypeVarList ?l - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?t) (term ?l) ))) (goalDesc (atomicTermFormula ( (predicate (name goal-of)) (term ?p) (term ?l) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?p) (term ?t) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?t) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?p) (term ?l) )))) ))) ))) )) <EOF>)
