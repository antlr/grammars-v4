(pddlDoc (problem ( define (problemDecl ( problem (name wireless-01) )) (problemDomain ( :domain (name wireless) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName base) - (objectType base)) (objectDeclaration (objectName node1) <missing '-'> (objectType node2)) (objectDeclaration (objectName node3) <missing '-'> (objectType node4)) (objectDeclaration (objectName node5) - (objectType sensor)) (objectDeclaration (objectName msg1-1) - (objectType message))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name High) (name Low) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name High) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name High) (name Zero) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name Normal) (name Low) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name Normal) (name Zero) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name higher)) (name Low) (name Zero) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name High) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name Normal) (name Low) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name next)) (name Low) (name Zero) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name energy)) (name node1) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name is-message-at)) (name msg1-1) (name node1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name energy)) (name node2) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name energy)) (name node3) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name energy)) (name node4) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name energy)) (name node5) (name Normal) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node1) (name node2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node2) (name node1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node2) (name node3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node3) (name node2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node3) (name node4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node4) (name node3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node3) (name node5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node5) (name node3) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node4) (name node5) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node5) (name node4) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name node5) (name base) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name neighbor)) (name base) (name node5) )))) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term (name base)) (term (name node1)) ))) (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term (name base)) (term (name node2)) ))) (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term (name base)) (term (name node3)) ))) (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term (name base)) (term (name node4)) ))) (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term (name base)) (term (name node5)) ))) )) )) )) <EOF>)
