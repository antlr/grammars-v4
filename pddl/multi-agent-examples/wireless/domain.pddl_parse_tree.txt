(pddlDoc (domain ( define (domainName ( domain (name wireless) )) (requireDef ( :requirements :strips :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name node) (name level) (name message) - (r_type (primType (name object)))) (singleTypeNameList (name base) (name sensor) - (r_type (primType (name node))))) )) (constantsDef ( :constants (typedNameList (singleTypeNameList (name Zero) (name Low) (name Normal) (name High) - (r_type (primType (name level))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name neighbor)) (typedVariableList (singleTypeVarList ?n1 - (r_type (primType (name node)))) (singleTypeVarList ?n2 - (r_type (primType (name node))))) )) (atomicFormulaSkeleton ( (predicate (name has-data)) (typedVariableList (singleTypeVarList ?n - (r_type (primType (name node)))) (singleTypeVarList ?s - (r_type (primType (name sensor))))) )) (atomicFormulaSkeleton ( (predicate (name higher)) (typedVariableList (singleTypeVarList ?l1 - (r_type (primType (name level)))) (singleTypeVarList ?l2 - (r_type (primType (name level))))) )) (atomicFormulaSkeleton ( (predicate (name next)) (typedVariableList (singleTypeVarList ?l1 - (r_type (primType (name level)))) (singleTypeVarList ?l2 - (r_type (primType (name level))))) )) (atomicFormulaSkeleton ( (predicate (name is-message-at)) (typedVariableList (singleTypeVarList ?m - (r_type (primType (name message)))) (singleTypeVarList ?n - (r_type (primType (name node))))) )) (atomicFormulaSkeleton ( (predicate (name message-data)) (typedVariableList (singleTypeVarList ?m - (r_type (primType (name message)))) (singleTypeVarList ?s - (r_type (primType (name sensor))))) )) (atomicFormulaSkeleton ( (predicate (name sending)) (typedVariableList (singleTypeVarList ?from - (r_type (primType (name sensor)))) (singleTypeVarList ?to - (r_type (primType (name node)))) (singleTypeVarList ?m - (r_type (primType (name message))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?s - (r_type (primType (name sensor))))) (atomicFormulaSkeleton ( (predicate (name energy)) (typedVariableList (singleTypeVarList ?s - (r_type (primType (name sensor)))) (singleTypeVarList ?lv - (r_type (primType (name level))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name generate-data)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s - (r_type (primType (name sensor)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?e0 - (r_type (primType (name level)))) (singleTypeVarList ?e1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name energy)) (term ?s) (term ?e0) ))) (goalDesc (atomicTermFormula ( (predicate (name higher)) (term ?e0) (term (name Zero)) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?e0) (term ?e1) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name energy)) (term ?s) (term ?e0) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name energy)) (term ?s) (term ?e1) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name has-data)) (term ?s) (term ?s) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name add-to-message)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?s1 - (r_type (primType (name sensor)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s2 - (r_type (primType (name sensor)))) (singleTypeVarList ?m - (r_type (primType (name message))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name has-data)) (term ?s1) (term ?s2) ))) (goalDesc (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?s1) ))) (goalDesc ( not (goalDesc (atomicTermFormula ( (predicate (name message-data)) (term ?m) (term ?s2) ))) )) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name has-data)) (term ?s1) (term ?s2) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name message-data)) (term ?m) (term ?s2) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name send-message)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?sender - (r_type (primType (name sensor)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?receiver - (r_type (primType (name node)))) (singleTypeVarList ?m - (r_type (primType (name message)))) (singleTypeVarList ?e0 - (r_type (primType (name level)))) (singleTypeVarList ?e1 - (r_type (primType (name level))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name energy)) (term ?sender) (term ?e0) ))) (goalDesc (atomicTermFormula ( (predicate (name higher)) (term ?e0) (term (name Zero)) ))) (goalDesc (atomicTermFormula ( (predicate (name next)) (term ?e0) (term ?e1) ))) (goalDesc (atomicTermFormula ( (predicate (name neighbor)) (term ?sender) (term ?receiver) ))) (goalDesc ( not (goalDesc (fComp ( (binaryComp =) (fExp ?sender ?receiver) fExp ))) )) (goalDesc (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?sender) ))) (goalDesc ( not (goalDesc (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?receiver) ))) )) (goalDesc ( not (goalDesc (atomicTermFormula ( (predicate (name sending)) (term ?sender) (term ?receiver) (term ?m) ))) )) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name energy)) (term ?sender) (term ?e0) )) ))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?sender) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name energy)) (term ?sender) (term ?e1) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name sending)) (term ?sender) (term ?receiver) (term ?m) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name receive-message)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?receiver - (r_type (primType (name node)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?sender - (r_type (primType (name sensor)))) (singleTypeVarList ?m - (r_type (primType (name message))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc ( not (goalDesc (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?receiver) ))) )) (goalDesc (atomicTermFormula ( (predicate (name sending)) (term ?sender) (term ?receiver) (term ?m) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name sending)) (term ?sender) (term ?receiver) (term ?m) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?receiver) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name get-data-from-message)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?n - (r_type (primType (name node)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?s - (r_type (primType (name sensor)))) (singleTypeVarList ?m - (r_type (primType (name message))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name is-message-at)) (term ?m) (term ?n) ))) (goalDesc (atomicTermFormula ( (predicate (name message-data)) (term ?m) (term ?s) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name message-data)) (term ?m) (term ?s) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name has-data)) (term ?n) (term ?s) )))) ))) ))) )) <EOF>)
