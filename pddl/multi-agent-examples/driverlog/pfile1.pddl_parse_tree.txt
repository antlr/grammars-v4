(pddlDoc (problem ( define (problemDecl ( problem (name DLOG-2-2-2) )) (problemDomain ( :domain (name driverlog) )) (objectDecl ( :objects (objectList (objectDeclaration (objectName truck1) - (objectType truck)) (objectDeclaration (objectName truck2) - (objectType truck)) (objectDeclaration (objectName s2) - (objectType location)) (objectDeclaration (objectName s1) - (objectType location)) (objectDeclaration (objectName s0) - (objectType location)) (objectDeclaration (objectName package1) - (objectType package)) (objectDeclaration (objectName package2) - (objectType package)) (objectDeclaration (objectName p1-2) - (objectType location)) (objectDeclaration (objectName p1-0) - (objectType location)) (objectDeclaration ( :private (objectName driver1) (objectList (objectDeclaration (objectName driver1) - (objectType driver))) )) (objectDeclaration ( :private (objectName driver2) (objectList (objectDeclaration (objectName driver2) - (objectType driver))) ))) )) (init ( :init (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name driver1) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name driver2) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck1) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name empty)) (name truck1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name truck2) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name empty)) (name truck2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name package1) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name at)) (name package2) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name s1) (name p1-0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name p1-0) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name s0) (name p1-0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name p1-0) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name s1) (name p1-2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name p1-2) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name s2) (name p1-2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name path)) (name p1-2) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s0) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s1) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s0) (name s2) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s2) (name s0) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s2) (name s1) )))) (initEl (nameLiteral (atomicNameFormula ( (predicate (name link)) (name s1) (name s2) )))) )) (goal ( :goal (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name truck1)) (term (name s1)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name package1)) (term (name s0)) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term (name package2)) (term (name s0)) ))) )) )) )) <EOF>)
