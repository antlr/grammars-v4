(pddlDoc (domain ( define (domainName ( domain (name driverlog) )) (requireDef ( :requirements :typing :multi-agent :unfactored-privacy )) (typesDef ( :types (typedNameList (singleTypeNameList (name location) (name locatable) - (r_type (primType (name object)))) (singleTypeNameList (name driver) (name truck) (name package) - (r_type (primType (name locatable))))) )) (predicatesDef ( :predicates (atomicFormulaSkeleton ( (predicate (name in)) (typedVariableList (singleTypeVarList ?obj1 - (r_type (primType (name package)))) (singleTypeVarList ?obj - (r_type (primType (name truck))))) )) (atomicFormulaSkeleton ( (predicate (name path)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name location)))) (singleTypeVarList ?y - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name empty)) (typedVariableList (singleTypeVarList ?v - (r_type (primType (name truck))))) )) (atomicFormulaSkeleton ( (predicate (name at)) (typedVariableList (singleTypeVarList ?obj - (r_type (primType (name locatable)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (atomicFormulaSkeleton ( (predicate (name link)) (typedVariableList (singleTypeVarList ?x - (r_type (primType (name location)))) (singleTypeVarList ?y - (r_type (primType (name location))))) )) (privatePredicates ( :private (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name driver))))) (atomicFormulaSkeleton ( (predicate (name driving)) (typedVariableList (singleTypeVarList ?agent - (r_type (primType (name driver)))) (singleTypeVarList ?v - (r_type (primType (name truck))))) )) )) )) (structureDef (actionDef ( :action (actionSymbol (name LOAD-TRUCK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))) (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name UNLOAD-TRUCK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))) (singleTypeVarList ?obj - (r_type (primType (name package)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) ))) (goalDesc (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name in)) (term ?obj) (term ?truck) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?obj) (term ?loc) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name BOARD-TRUCK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name empty)) (term ?truck) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) )))) (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name empty)) (term ?truck) )) ))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name DISEMBARK-TRUCK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?truck - (r_type (primType (name truck)))) (singleTypeVarList ?loc - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc) ))) (goalDesc (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc) )))) (cEffect (pEffect (atomicTermFormula ( (predicate (name empty)) (term ?truck) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name DRIVE-TRUCK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?loc-from - (r_type (primType (name location)))) (singleTypeVarList ?loc-to - (r_type (primType (name location)))) (singleTypeVarList ?truck - (r_type (primType (name truck))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-from) ))) (goalDesc (atomicTermFormula ( (predicate (name driving)) (term ?driver) (term ?truck) ))) (goalDesc (atomicTermFormula ( (predicate (name link)) (term ?loc-from) (term ?loc-to) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-from) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?truck) (term ?loc-to) )))) ))) ))) (structureDef (actionDef ( :action (actionSymbol (name WALK)) (parametersDecl :agent (typedVariableList (singleTypeVarList ?driver - (r_type (primType (name driver)))))) (parametersDecl :parameters ( (typedVariableList (singleTypeVarList ?loc-from - (r_type (primType (name location)))) (singleTypeVarList ?loc-to - (r_type (primType (name location))))) )) (actionDefBody :precondition (precondition (goalDesc ( and (goalDesc (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc-from) ))) (goalDesc (atomicTermFormula ( (predicate (name path)) (term ?loc-from) (term ?loc-to) ))) ))) :effect (effect ( and (cEffect (pEffect ( not (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc-from) )) ))) (cEffect (pEffect (atomicTermFormula ( (predicate (name at)) (term ?driver) (term ?loc-to) )))) ))) ))) )) <EOF>)
