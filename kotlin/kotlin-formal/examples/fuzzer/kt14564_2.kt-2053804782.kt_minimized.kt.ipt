kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   propertyDeclaration
    var
    variableDeclaration
     simpleIdentifier
      result
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   stringLiteral
                    lineStringLiteral
                     "
                     lineStringContent
                      fail
                     "
    \n
 topLevelObject
  declaration
   objectDeclaration
    object
    simpleIdentifier
     TimeUtil
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          waitForAssert
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             z
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 String
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Unit
         functionBody
          block
           {
           \n
           statements
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            simpleIdentifier
                             waitForEx
                           postfixUnarySuffix
                            callSuffix
                             valueArguments
                              (
                              valueArgument
                               simpleIdentifier
                                action
                               =
                               expression
                                disjunction
                                 conjunction
                                  equality
                                   comparison
                                    infixOperation
                                     elvisExpression
                                      infixFunctionCall
                                       rangeExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          asExpression
                                           prefixUnaryExpression
                                            postfixUnaryExpression
                                             primaryExpression
                                              functionLiteral
                                               lambdaLiteral
                                                {
                                                statements
                                                 statement
                                                  expression
                                                   disjunction
                                                    conjunction
                                                     equality
                                                      comparison
                                                       infixOperation
                                                        elvisExpression
                                                         infixFunctionCall
                                                          rangeExpression
                                                           additiveExpression
                                                            multiplicativeExpression
                                                             asExpression
                                                              prefixUnaryExpression
                                                               postfixUnaryExpression
                                                                primaryExpression
                                                                 simpleIdentifier
                                                                  result
                                                }
                              )
            semis
             \n
           }
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            inline
         fun
         simpleIdentifier
          waitForEx
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             retryWait
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Int
           =
           expression
            disjunction
             conjunction
              equality
               comparison
                infixOperation
                 elvisExpression
                  infixFunctionCall
                   rangeExpression
                    additiveExpression
                     multiplicativeExpression
                      asExpression
                       prefixUnaryExpression
                        postfixUnaryExpression
                         primaryExpression
                          literalConstant
                           200
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             action
            :
            type_
             parenthesizedType
              (
              type_
               functionType
                functionTypeParameters
                 (
                 )
                ->
                type_
                 typeReference
                  userType
                   simpleUserType
                    simpleIdentifier
                     String
              )
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Unit
         functionBody
          block
           {
           \n
           statements
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            parenthesizedExpression
                             (
                             expression
                              disjunction
                               conjunction
                                equality
                                 comparison
                                  infixOperation
                                   elvisExpression
                                    infixFunctionCall
                                     rangeExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        asExpression
                                         prefixUnaryExpression
                                          postfixUnaryExpression
                                           primaryExpression
                                            simpleIdentifier
                                             action
                             )
                           postfixUnarySuffix
                            postfixUnaryOperator
                             !
                             excl
                              !
                           postfixUnarySuffix
                            callSuffix
                             valueArguments
                              (
                              )
            semis
             \n
           }
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
