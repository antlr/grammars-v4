kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Unit
         functionBody
          block
           {
           \n
           statements
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            simpleIdentifier
                             inlineFun
                           postfixUnarySuffix
                            callSuffix
                             valueArguments
                              (
                              valueArgument
                               expression
                                disjunction
                                 conjunction
                                  equality
                                   comparison
                                    infixOperation
                                     elvisExpression
                                      infixFunctionCall
                                       rangeExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          asExpression
                                           prefixUnaryExpression
                                            postfixUnaryExpression
                                             primaryExpression
                                              functionLiteral
                                               lambdaLiteral
                                                {
                                                statements
                                                }
                              )
            semis
             \n
           }
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            inline
         fun
         simpleIdentifier
          inlineFun
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             lambda
            :
            type_
             parenthesizedType
              (
              type_
               functionType
                functionTypeParameters
                 (
                 )
                ->
                type_
                 typeReference
                  userType
                   simpleUserType
                    simpleIdentifier
                     Unit
              )
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Unit
         functionBody
          block
           {
           \n
           statements
            statement
             declaration
              propertyDeclaration
               val
               variableDeclaration
                simpleIdentifier
                 s
               =
               expression
                disjunction
                 conjunction
                  equality
                   comparison
                    infixOperation
                     elvisExpression
                      infixFunctionCall
                       rangeExpression
                        additiveExpression
                         multiplicativeExpression
                          asExpression
                           prefixUnaryExpression
                            postfixUnaryExpression
                             primaryExpression
                              objectLiteral
                               object
                               classBody
                                {
                                \n
                                classMemberDeclarations
                                 classMemberDeclaration
                                  declaration
                                   functionDeclaration
                                    fun
                                    simpleIdentifier
                                     run
                                    functionValueParameters
                                     (
                                     )
                                    :
                                    type_
                                     typeReference
                                      userType
                                       simpleUserType
                                        simpleIdentifier
                                         Unit
                                    functionBody
                                     block
                                      {
                                      \n
                                      statements
                                       statement
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       parenthesizedExpression
                                                        (
                                                        expression
                                                         disjunction
                                                          conjunction
                                                           equality
                                                            comparison
                                                             infixOperation
                                                              elvisExpression
                                                               infixFunctionCall
                                                                rangeExpression
                                                                 additiveExpression
                                                                  multiplicativeExpression
                                                                   asExpression
                                                                    prefixUnaryExpression
                                                                     postfixUnaryExpression
                                                                      primaryExpression
                                                                       simpleIdentifier
                                                                        lambda
                                                        )
                                                      postfixUnarySuffix
                                                       postfixUnaryOperator
                                                        !
                                                        excl
                                                         !
                                                      postfixUnarySuffix
                                                       callSuffix
                                                        valueArguments
                                                         (
                                                         )
                                       semis
                                        \n
                                      }
                                 semis
                                  \n
                                }
               \n
           }
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
