kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       public
    interface
    simpleIdentifier
     Base
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          test
         functionValueParameters
          (
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         stringLiteral
                          lineStringLiteral
                           "
                           lineStringContent
                            base fail
                           "
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       public
    interface
    simpleIdentifier
     Base2
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       userType
        simpleUserType
         simpleIdentifier
          Base
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           memberModifier
            override
          modifier
           functionModifier
            suspend
         fun
         simpleIdentifier
          test
         functionValueParameters
          (
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         stringLiteral
                          lineStringLiteral
                           "
                           lineStringContent
                            base 2fail
                           "
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     box
    functionValueParameters
     (
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       objectLiteral
                                        object
                                        :
                                        delegationSpecifiers
                                         annotatedDelegationSpecifier
                                          delegationSpecifier
                                           userType
                                            simpleUserType
                                             simpleIdentifier
                                              Base2
                                         ,
                                         annotatedDelegationSpecifier
                                          delegationSpecifier
                                           explicitDelegation
                                            userType
                                             simpleUserType
                                              simpleIdentifier
                                               Base
                                            by
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            Delegate
                                                          postfixUnarySuffix
                                                           callSuffix
                                                            valueArguments
                                                             (
                                                             )
                                                            annotatedLambda
                                                             lambdaLiteral
                                                              {
                                                              \n
                                                              \n
                                                              statements
                                                              }
                                                          postfixUnarySuffix
                                                           navigationSuffix
                                                            memberAccessOperator
                                                             .
                                                            simpleIdentifier
                                                             test
                                                          postfixUnarySuffix
                                                           callSuffix
                                                            valueArguments
                                                             (
                                                             )
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
