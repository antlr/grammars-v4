kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       public
    class
    simpleIdentifier
     Input
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        s1
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            String
      ,
      classParameter
       val
       simpleIdentifier
        s2
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            String
      )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           visibilityModifier
            public
         fun
         simpleIdentifier
          iterator
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Iterator
             typeArguments
              <
              typeProjection
               type_
                typeReference
                 userType
                  simpleUserType
                   simpleIdentifier
                    String
              >
         functionBody
          block
           {
           \n
           statements
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            jumpExpression
                             return
                             expression
                              disjunction
                               conjunction
                                equality
                                 comparison
                                  infixOperation
                                   elvisExpression
                                    infixFunctionCall
                                     rangeExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        asExpression
                                         prefixUnaryExpression
                                          postfixUnaryExpression
                                           primaryExpression
                                            simpleIdentifier
                                             arrayListOf
                                           postfixUnarySuffix
                                            callSuffix
                                             valueArguments
                                              (
                                              valueArgument
                                               expression
                                                disjunction
                                                 conjunction
                                                  equality
                                                   comparison
                                                    infixOperation
                                                     elvisExpression
                                                      infixFunctionCall
                                                       rangeExpression
                                                        additiveExpression
                                                         multiplicativeExpression
                                                          asExpression
                                                           prefixUnaryExpression
                                                            postfixUnaryExpression
                                                             primaryExpression
                                                              simpleIdentifier
                                                               s1
                                              ,
                                              valueArgument
                                               expression
                                                disjunction
                                                 conjunction
                                                  equality
                                                   comparison
                                                    infixOperation
                                                     elvisExpression
                                                      infixFunctionCall
                                                       rangeExpression
                                                        additiveExpression
                                                         multiplicativeExpression
                                                          asExpression
                                                           prefixUnaryExpression
                                                            postfixUnaryExpression
                                                             primaryExpression
                                                              simpleIdentifier
                                                               s2
                                              )
                                           postfixUnarySuffix
                                            navigationSuffix
                                             memberAccessOperator
                                              .
                                             simpleIdentifier
                                              iterator
                                           postfixUnarySuffix
                                            callSuffix
                                             valueArguments
                                              (
                                              )
            semis
             \n
           }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      visibilityModifier
       public
     modifier
      functionModifier
       inline
    fun
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     ,
     typeParameter
      simpleIdentifier
       R
     >
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         T
    .
    simpleIdentifier
     use
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        block
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 T
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                R
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         R
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        block
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         valueArgument
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          this
                                         )
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      visibilityModifier
       public
     modifier
      functionModifier
       inline
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Input
    .
    simpleIdentifier
     forEachLine
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        block
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 String
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Unit
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Unit
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        useLines
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         functionLiteral
                                          lambdaLiteral
                                           {
                                           lambdaParameters
                                            lambdaParameter
                                             variableDeclaration
                                              simpleIdentifier
                                               lines
                                           ->
                                           statements
                                           }
                         )
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      visibilityModifier
       public
     modifier
      functionModifier
       inline
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Input
    .
    simpleIdentifier
     useLines
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        block2
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Iterator
                typeArguments
                 <
                 typeProjection
                  type_
                   typeReference
                    userType
                     simpleUserType
                      simpleIdentifier
                       String
                 >
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Unit
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Unit
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       thisExpression
                        this
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         use
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         functionLiteral
                                          lambdaLiteral
                                           {
                                           statements
                                            statement
                                             expression
                                              disjunction
                                               conjunction
                                                equality
                                                 comparison
                                                  infixOperation
                                                   elvisExpression
                                                    infixFunctionCall
                                                     rangeExpression
                                                      additiveExpression
                                                       multiplicativeExpression
                                                        asExpression
                                                         prefixUnaryExpression
                                                          postfixUnaryExpression
                                                           primaryExpression
                                                            parenthesizedExpression
                                                             (
                                                             expression
                                                              disjunction
                                                               conjunction
                                                                equality
                                                                 comparison
                                                                  infixOperation
                                                                   elvisExpression
                                                                    infixFunctionCall
                                                                     rangeExpression
                                                                      additiveExpression
                                                                       multiplicativeExpression
                                                                        asExpression
                                                                         prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                           primaryExpression
                                                                            simpleIdentifier
                                                                             block2
                                                             )
                                                           postfixUnarySuffix
                                                            postfixUnaryOperator
                                                             !
                                                             excl
                                                              !
                                                           postfixUnarySuffix
                                                            callSuffix
                                                             valueArguments
                                                              (
                                                              valueArgument
                                                               expression
                                                                disjunction
                                                                 conjunction
                                                                  equality
                                                                   comparison
                                                                    infixOperation
                                                                     elvisExpression
                                                                      infixFunctionCall
                                                                       rangeExpression
                                                                        additiveExpression
                                                                         multiplicativeExpression
                                                                          asExpression
                                                                           prefixUnaryExpression
                                                                            postfixUnaryExpression
                                                                             primaryExpression
                                                                              simpleIdentifier
                                                                               it
                                                                             postfixUnarySuffix
                                                                              navigationSuffix
                                                                               memberAccessOperator
                                                                                .
                                                                               simpleIdentifier
                                                                                iterator
                                                                             postfixUnarySuffix
                                                                              callSuffix
                                                                               valueArguments
                                                                                (
                                                                                )
                                                              )
                                           }
                         )
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
