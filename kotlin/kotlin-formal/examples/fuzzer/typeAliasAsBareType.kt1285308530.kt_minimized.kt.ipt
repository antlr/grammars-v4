kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     L
    =
    type_
     nullableType
      parenthesizedType
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            List
           typeArguments
            <
            typeProjection
             type_
              typeReference
               userType
                simpleUserType
                 simpleIdentifier
                  T
            >
       )
      quest
       ?
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     box
    functionValueParameters
     (
     )
    :
    type_
     nullableType
      parenthesizedType
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            String
       )
      quest
       ? 
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            test
           :
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Collection
               typeArguments
                <
                typeProjection
                 type_
                  typeReference
                   userType
                    simpleUserType
                     simpleIdentifier
                      Int
                >
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          listOf
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           valueArgument
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           literalConstant
                                            1
                           ,
                           valueArgument
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           literalConstant
                                            2
                           ,
                           valueArgument
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           literalConstant
                                            3
                           )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        test
                              isOperator
                               !is 
                              type_
                               typeReference
                                userType
                                 simpleUserType
                                  simpleIdentifier
                                   L
                        )
                        controlStructureBody
                         block
                          {
                          \n
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           jumpExpression
                                            return
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           stringLiteral
                                                            lineStringLiteral
                                                             "
                                                             lineStringContent
                                                              test !is L
                                                             "
                           semis
                            \n
                          }
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
