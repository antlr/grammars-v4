kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     call
    functionValueParameters
     (
     )
    functionBody
     =
     expression
      disjunction
       conjunction
        equality
         comparison
          infixOperation
           elvisExpression
            infixFunctionCall
             rangeExpression
              additiveExpression
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    simpleIdentifier
                     inlineFun2
                   postfixUnarySuffix
                    callSuffix
                     valueArguments
                      (
                      valueArgument
                       expression
                        disjunction
                         conjunction
                          equality
                           comparison
                            infixOperation
                             elvisExpression
                              infixFunctionCall
                               rangeExpression
                                additiveExpression
                                 multiplicativeExpression
                                  asExpression
                                   prefixUnaryExpression
                                    postfixUnaryExpression
                                     primaryExpression
                                      functionLiteral
                                       lambdaLiteral
                                        {
                                        statements
                                        }
                      )
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      visibilityModifier
       internal
     modifier
      functionModifier
       inline
    fun
    simpleIdentifier
     inlineFun2
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        p
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Unit
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       parenthesizedExpression
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       parenthesizedExpression
                                        (
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       simpleIdentifier
                                                        p
                                        )
                                      postfixUnarySuffix
                                       postfixUnaryOperator
                                        !
                                        excl
                                         !
                        )
                      postfixUnarySuffix
                       postfixUnaryOperator
                        !
                        excl
                         !
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        inlineFun
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         valueArgument
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         functionLiteral
                                                          lambdaLiteral
                                                           {
                                                           statements
                                                            statement
                                                             expression
                                                              disjunction
                                                               conjunction
                                                                equality
                                                                 comparison
                                                                  infixOperation
                                                                   elvisExpression
                                                                    infixFunctionCall
                                                                     rangeExpression
                                                                      additiveExpression
                                                                       multiplicativeExpression
                                                                        asExpression
                                                                         prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                           primaryExpression
                                                                            simpleIdentifier
                                                                             test
                                                                           postfixUnarySuffix
                                                                            callSuffix
                                                                             valueArguments
                                                                              (
                                                                              )
                                                           }
                                         )
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      visibilityModifier
       private
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     )
    functionBody
     =
     expression
      disjunction
       conjunction
        equality
         comparison
          infixOperation
           elvisExpression
            infixFunctionCall
             rangeExpression
              additiveExpression
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    stringLiteral
                     lineStringLiteral
                      "
                      lineStringContent
                       OK
                      "
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
     modifier
      visibilityModifier
       internal
    fun
    simpleIdentifier
     inlineFun
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        p
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                String
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        p
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         )
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
