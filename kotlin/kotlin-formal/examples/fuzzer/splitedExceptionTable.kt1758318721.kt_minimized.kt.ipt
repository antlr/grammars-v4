kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        s
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Int
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Unit
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            i
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          0
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       tryExpression
                        try
                        block
                         {
                         \n
                         statements
                          statement
                           assignment
                            directlyAssignableExpression
                             simpleIdentifier
                              i
                            =
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           parenthesizedExpression
                                            (
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            s
                                            )
                                          postfixUnarySuffix
                                           postfixUnaryOperator
                                            !
                                            excl
                                             !
                                          postfixUnarySuffix
                                           callSuffix
                                            valueArguments
                                             (
                                             )
                          semis
                           \n
                         }
                        \n
                        finallyBlock
                         finally
                         block
                          {
                          \n
                          \n
                          statements
                          }
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     box
    functionValueParameters
     (
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            p
           :
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                Int
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          1
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        test
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         functionLiteral
                                          lambdaLiteral
                                           {
                                           statements
                                            statement
                                             expression
                                              disjunction
                                               conjunction
                                                equality
                                                 comparison
                                                  infixOperation
                                                   elvisExpression
                                                    infixFunctionCall
                                                     rangeExpression
                                                      additiveExpression
                                                       multiplicativeExpression
                                                        asExpression
                                                         prefixUnaryExpression
                                                          postfixUnaryExpression
                                                           primaryExpression
                                                            tryExpression
                                                             try
                                                             block
                                                              {
                                                              \n
                                                              statements
                                                               statement
                                                                expression
                                                                 disjunction
                                                                  conjunction
                                                                   equality
                                                                    comparison
                                                                     infixOperation
                                                                      elvisExpression
                                                                       infixFunctionCall
                                                                        rangeExpression
                                                                         additiveExpression
                                                                          multiplicativeExpression
                                                                           asExpression
                                                                            prefixUnaryExpression
                                                                             postfixUnaryExpression
                                                                              primaryExpression
                                                                               jumpExpression
                                                                                return
                                                                                expression
                                                                                 disjunction
                                                                                  conjunction
                                                                                   equality
                                                                                    comparison
                                                                                     infixOperation
                                                                                      elvisExpression
                                                                                       infixFunctionCall
                                                                                        rangeExpression
                                                                                         additiveExpression
                                                                                          multiplicativeExpression
                                                                                           asExpression
                                                                                            prefixUnaryExpression
                                                                                             postfixUnaryExpression
                                                                                              primaryExpression
                                                                                               stringLiteral
                                                                                                lineStringLiteral
                                                                                                 "
                                                                                                 lineStringContent
                                                                                                  OK
                                                                                                 "
                                                               semis
                                                                \n
                                                              }
                                                             catchBlock
                                                              catch
                                                              (
                                                              simpleIdentifier
                                                               e
                                                              :
                                                              userType
                                                               simpleUserType
                                                                simpleIdentifier
                                                                 Exception
                                                              )
                                                              block
                                                               {
                                                               \n
                                                               statements
                                                                statement
                                                                 expression
                                                                  disjunction
                                                                   conjunction
                                                                    equality
                                                                     comparison
                                                                      infixOperation
                                                                       elvisExpression
                                                                        infixFunctionCall
                                                                         rangeExpression
                                                                          additiveExpression
                                                                           multiplicativeExpression
                                                                            asExpression
                                                                             prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                               primaryExpression
                                                                                simpleIdentifier
                                                                                 p
                                                                semis
                                                                 \n
                                                               }
                                                             \n
                                                             finallyBlock
                                                              finally
                                                              block
                                                               {
                                                               \n
                                                               \n
                                                               statements
                                                               }
                                           }
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       stringLiteral
                                        lineStringLiteral
                                         "
                                         lineStringContent
                                          fail
                                         "
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
