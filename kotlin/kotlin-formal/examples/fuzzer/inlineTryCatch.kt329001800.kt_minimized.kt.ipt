kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    simpleIdentifier
     tryOrElse
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        f1
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                T
         )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        f2
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                T
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         T
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       tryExpression
                        try
                        block
                         {
                         \n
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          jumpExpression
                                           return
                                           expression
                                            disjunction
                                             conjunction
                                              equality
                                               comparison
                                                infixOperation
                                                 elvisExpression
                                                  infixFunctionCall
                                                   rangeExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      asExpression
                                                       prefixUnaryExpression
                                                        postfixUnaryExpression
                                                         primaryExpression
                                                          parenthesizedExpression
                                                           (
                                                           expression
                                                            disjunction
                                                             conjunction
                                                              equality
                                                               comparison
                                                                infixOperation
                                                                 elvisExpression
                                                                  infixFunctionCall
                                                                   rangeExpression
                                                                    additiveExpression
                                                                     multiplicativeExpression
                                                                      asExpression
                                                                       prefixUnaryExpression
                                                                        postfixUnaryExpression
                                                                         primaryExpression
                                                                          simpleIdentifier
                                                                           f1
                                                           )
                                                         postfixUnarySuffix
                                                          postfixUnaryOperator
                                                           !
                                                           excl
                                                            !
                                                         postfixUnarySuffix
                                                          callSuffix
                                                           valueArguments
                                                            (
                                                            )
                          semis
                           \n
                         }
                        catchBlock
                         catch
                         (
                         simpleIdentifier
                          e
                         :
                         userType
                          simpleUserType
                           simpleIdentifier
                            Exception
                         )
                         block
                          {
                          \n
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           jumpExpression
                                            return
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            f2
                                                          postfixUnarySuffix
                                                           callSuffix
                                                            valueArguments
                                                             (
                                                             )
                           semis
                            \n
                          }
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     testIt
    functionValueParameters
     (
     )
    functionBody
     =
     expression
      disjunction
       conjunction
        equality
         comparison
          infixOperation
           elvisExpression
            infixFunctionCall
             rangeExpression
              additiveExpression
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    stringLiteral
                     lineStringLiteral
                      "
                      lineStringContent
                       abc
                      "
               additiveOperator
                +
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    simpleIdentifier
                     tryOrElse
                   postfixUnarySuffix
                    callSuffix
                     valueArguments
                      (
                      valueArgument
                       expression
                        disjunction
                         conjunction
                          equality
                           comparison
                            infixOperation
                             elvisExpression
                              infixFunctionCall
                               rangeExpression
                                additiveExpression
                                 multiplicativeExpression
                                  asExpression
                                   prefixUnaryExpression
                                    postfixUnaryExpression
                                     primaryExpression
                                      functionLiteral
                                       lambdaLiteral
                                        {
                                        statements
                                        }
                      ,
                      valueArgument
                       expression
                        disjunction
                         conjunction
                          equality
                           comparison
                            infixOperation
                             elvisExpression
                              infixFunctionCall
                               rangeExpression
                                additiveExpression
                                 multiplicativeExpression
                                  asExpression
                                   prefixUnaryExpression
                                    postfixUnaryExpression
                                     primaryExpression
                                      functionLiteral
                                       lambdaLiteral
                                        {
                                        statements
                                        }
                      )
               additiveOperator
                +
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    stringLiteral
                     lineStringLiteral
                      "
                      lineStringContent
                       ghi
                      "
  semis
   <EOF>
 <EOF>
