kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    simpleIdentifier
     bar
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        block
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                String
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       parenthesizedExpression
                                        (
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       simpleIdentifier
                                                        block
                                        )
                                      postfixUnarySuffix
                                       postfixUnaryOperator
                                        !
                                        excl
                                         !
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         )
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    simpleIdentifier
     bar2
    functionValueParameters
     (
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        bar
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         valueArgument
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         functionLiteral
                                                          lambdaLiteral
                                                           {
                                                           statements
                                                            statement
                                                             expression
                                                              disjunction
                                                               conjunction
                                                                equality
                                                                 comparison
                                                                  infixOperation
                                                                   elvisExpression
                                                                    infixFunctionCall
                                                                     rangeExpression
                                                                      additiveExpression
                                                                       multiplicativeExpression
                                                                        asExpression
                                                                         prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                           primaryExpression
                                                                            jumpExpression
                                                                             return
                                                                             expression
                                                                              disjunction
                                                                               conjunction
                                                                                equality
                                                                                 comparison
                                                                                  infixOperation
                                                                                   elvisExpression
                                                                                    infixFunctionCall
                                                                                     rangeExpression
                                                                                      additiveExpression
                                                                                       multiplicativeExpression
                                                                                        asExpression
                                                                                         prefixUnaryExpression
                                                                                          postfixUnaryExpression
                                                                                           primaryExpression
                                                                                            stringLiteral
                                                                                             lineStringLiteral
                                                                                              "
                                                                                              lineStringContent
                                                                                               def
                                                                                              "
                                                           }
                                         )
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
