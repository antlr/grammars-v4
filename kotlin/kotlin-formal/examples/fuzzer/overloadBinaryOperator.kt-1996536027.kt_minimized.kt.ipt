kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     ArrayWrapper
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    primaryConstructor
     classParameters
      (
      )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           contents
         =
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        simpleIdentifier
                         ArrayList
                       postfixUnarySuffix
                        typeArguments
                         <
                         typeProjection
                          type_
                           typeReference
                            userType
                             simpleUserType
                              simpleIdentifier
                               T
                         >
                       postfixUnarySuffix
                        callSuffix
                         valueArguments
                          (
                          )
         \n
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            operator
          modifier
           functionModifier
            inline
          modifier
           functionModifier
            suspend
         fun
         simpleIdentifier
          plus
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             b
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 ArrayWrapper
                typeArguments
                 <
                 typeProjection
                  type_
                   typeReference
                    userType
                     simpleUserType
                      simpleIdentifier
                       T
                 >
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              ArrayWrapper
             typeArguments
              <
              typeProjection
               type_
                typeReference
                 userType
                  simpleUserType
                   simpleIdentifier
                    T
              >
         functionBody
          block
           {
           \n
           statements
            statement
             declaration
              propertyDeclaration
               val
               variableDeclaration
                simpleIdentifier
                 result
               =
               expression
                disjunction
                 conjunction
                  equality
                   comparison
                    infixOperation
                     elvisExpression
                      infixFunctionCall
                       rangeExpression
                        additiveExpression
                         multiplicativeExpression
                          asExpression
                           prefixUnaryExpression
                            postfixUnaryExpression
                             primaryExpression
                              simpleIdentifier
                               ArrayWrapper
                             postfixUnarySuffix
                              typeArguments
                               <
                               typeProjection
                                type_
                                 typeReference
                                  userType
                                   simpleUserType
                                    simpleIdentifier
                                     T
                               >
                             postfixUnarySuffix
                              callSuffix
                               valueArguments
                                (
                                )
            \n
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            simpleIdentifier
                             result
                           postfixUnarySuffix
                            navigationSuffix
                             memberAccessOperator
                              .
                             simpleIdentifier
                              contents
                           postfixUnarySuffix
                            navigationSuffix
                             memberAccessOperator
                              .
                             simpleIdentifier
                              addAll
                           postfixUnarySuffix
                            callSuffix
                             valueArguments
                              (
                              valueArgument
                               expression
                                disjunction
                                 conjunction
                                  equality
                                   comparison
                                    infixOperation
                                     elvisExpression
                                      infixFunctionCall
                                       rangeExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          asExpression
                                           prefixUnaryExpression
                                            postfixUnaryExpression
                                             primaryExpression
                                              simpleIdentifier
                                               b
                                             postfixUnarySuffix
                                              navigationSuffix
                                               memberAccessOperator
                                                .
                                               simpleIdentifier
                                                contents
                              )
            \n
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            jumpExpression
                             return
                             expression
                              disjunction
                               conjunction
                                equality
                                 comparison
                                  infixOperation
                                   elvisExpression
                                    infixFunctionCall
                                     rangeExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        asExpression
                                         prefixUnaryExpression
                                          postfixUnaryExpression
                                           primaryExpression
                                            simpleIdentifier
                                             result
            semis
             \n
           }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       suspend
    fun
    simpleIdentifier
     box
    functionValueParameters
     (
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            v1
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          ArrayWrapper
                        postfixUnarySuffix
                         typeArguments
                          <
                          typeProjection
                           type_
                            typeReference
                             userType
                              simpleUserType
                               simpleIdentifier
                                String
                          >
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           )
       \n
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            v2
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          ArrayWrapper
                        postfixUnarySuffix
                         typeArguments
                          <
                          typeProjection
                           type_
                            typeReference
                             userType
                              simpleUserType
                               simpleIdentifier
                                String
                          >
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           )
       \n
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            v3
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          v1
                    additiveOperator
                     +
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          v2
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       ifExpression
                                        if
                                        (
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       simpleIdentifier
                                                        v3
                                                      postfixUnarySuffix
                                                       navigationSuffix
                                                        memberAccessOperator
                                                         .
                                                        simpleIdentifier
                                                         contents
                                                      postfixUnarySuffix
                                                       navigationSuffix
                                                        memberAccessOperator
                                                         .
                                                        simpleIdentifier
                                                         size
                                            equalityOperator
                                             ==
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       literalConstant
                                                        2
                                        )
                                        controlStructureBody
                                         block
                                          {
                                          \n
                                          statements
                                           statement
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           stringLiteral
                                                            lineStringLiteral
                                                             "
                                                             lineStringContent
                                                              OK
                                                             "
                                           semis
                                            \n
                                          }
                                        else
                                        controlStructureBody
                                         block
                                          {
                                          \n
                                          statements
                                           statement
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           stringLiteral
                                                            lineStringLiteral
                                                             "
                                                             lineStringContent
                                                              fail
                                                             "
                                           semis
                                            \n
                                          }
       semis
        \n
      }
  semis
   <EOF>
 <EOF>
