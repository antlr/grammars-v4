kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    simpleIdentifier
     call
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        s
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                String
         )
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         String
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       parenthesizedExpression
                                        (
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       simpleIdentifier
                                                        s
                                        )
                                      postfixUnarySuffix
                                       postfixUnaryOperator
                                        !
                                        excl
                                         !
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         )
       semis
        \n
      }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        propertyDeclaration
         modifiers
          modifier
           visibilityModifier
            private
         val
         variableDeclaration
          simpleIdentifier
           prop2
          :
          type_
           typeReference
            userType
             simpleUserType
              simpleIdentifier
               String
         =
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        stringLiteral
                         lineStringLiteral
                          "
                          lineStringContent
                           O
                          "
         \n
         getter
          get
          (
          )
          functionBody
           =
           expression
            disjunction
             conjunction
              equality
               comparison
                infixOperation
                 elvisExpression
                  infixFunctionCall
                   rangeExpression
                    additiveExpression
                     multiplicativeExpression
                      asExpression
                       prefixUnaryExpression
                        postfixUnaryExpression
                         primaryExpression
                          simpleIdentifier
                           call
                         postfixUnarySuffix
                          callSuffix
                           annotatedLambda
                            lambdaLiteral
                             {
                             statements
                              statement
                               expression
                                disjunction
                                 conjunction
                                  equality
                                   comparison
                                    infixOperation
                                     elvisExpression
                                      infixFunctionCall
                                       rangeExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          asExpression
                                           prefixUnaryExpression
                                            postfixUnaryExpression
                                             primaryExpression
                                              simpleIdentifier
                                               call
                                             postfixUnarySuffix
                                              callSuffix
                                               annotatedLambda
                                                lambdaLiteral
                                                 {
                                                 statements
                                                  statement
                                                   expression
                                                    disjunction
                                                     conjunction
                                                      equality
                                                       comparison
                                                        infixOperation
                                                         elvisExpression
                                                          infixFunctionCall
                                                           rangeExpression
                                                            additiveExpression
                                                             multiplicativeExpression
                                                              asExpression
                                                               prefixUnaryExpression
                                                                postfixUnaryExpression
                                                                 primaryExpression
                                                                  simpleIdentifier
                                                                   field
                                                             additiveOperator
                                                              +
                                                             multiplicativeExpression
                                                              asExpression
                                                               prefixUnaryExpression
                                                                postfixUnaryExpression
                                                                 primaryExpression
                                                                  stringLiteral
                                                                   lineStringLiteral
                                                                    "
                                                                    lineStringContent
                                                                     K
                                                                    "
                                                 }
                             }
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
