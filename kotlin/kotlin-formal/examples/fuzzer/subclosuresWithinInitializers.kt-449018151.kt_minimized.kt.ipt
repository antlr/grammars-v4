kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     modifier
      functionModifier
       inline
    fun
    typeParameters
     <
     typeParameter
      simpleIdentifier
       R
     >
    simpleIdentifier
     inlineRun
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        block
       :
       type_
        parenthesizedType
         (
         type_
          functionType
           functionTypeParameters
            (
            )
           ->
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                R
         )
     )
    functionBody
     =
     expression
      disjunction
       conjunction
        equality
         comparison
          infixOperation
           elvisExpression
            infixFunctionCall
             rangeExpression
              additiveExpression
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    simpleIdentifier
                     block
                   postfixUnarySuffix
                    callSuffix
                     valueArguments
                      (
                      )
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Outer
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        outerProp
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            String
      )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             arg
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 String
          )
         :
         type_
          nullableType
           parenthesizedType
            (
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 String
            )
           quest
            ? 
         functionBody
          block
           {
           \n
           statements
            statement
             declaration
              classDeclaration
               class
               simpleIdentifier
                Local
               classBody
                {
                \n
                classMemberDeclarations
                 classMemberDeclaration
                  declaration
                   propertyDeclaration
                    val
                    variableDeclaration
                     simpleIdentifier
                      work1
                    =
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   simpleIdentifier
                                    run
                                  postfixUnarySuffix
                                   callSuffix
                                    valueArguments
                                     (
                                     valueArgument
                                      expression
                                       disjunction
                                        conjunction
                                         equality
                                          comparison
                                           infixOperation
                                            elvisExpression
                                             infixFunctionCall
                                              rangeExpression
                                               additiveExpression
                                                multiplicativeExpression
                                                 asExpression
                                                  prefixUnaryExpression
                                                   postfixUnaryExpression
                                                    primaryExpression
                                                     functionLiteral
                                                      lambdaLiteral
                                                       {
                                                       statements
                                                       }
                                     )
                    \n
                 classMemberDeclaration
                  declaration
                   propertyDeclaration
                    val
                    variableDeclaration
                     simpleIdentifier
                      work2
                    =
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   simpleIdentifier
                                    inlineRun
                                  postfixUnarySuffix
                                   callSuffix
                                    valueArguments
                                     (
                                     valueArgument
                                      expression
                                       disjunction
                                        conjunction
                                         equality
                                          comparison
                                           infixOperation
                                            elvisExpression
                                             infixFunctionCall
                                              rangeExpression
                                               additiveExpression
                                                multiplicativeExpression
                                                 asExpression
                                                  prefixUnaryExpression
                                                   postfixUnaryExpression
                                                    primaryExpression
                                                     functionLiteral
                                                      lambdaLiteral
                                                       {
                                                       statements
                                                       }
                                     )
                    \n
                 classMemberDeclaration
                  declaration
                   propertyDeclaration
                    val
                    variableDeclaration
                     simpleIdentifier
                      obj
                    =
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   objectLiteral
                                    object
                                    :
                                    delegationSpecifiers
                                     annotatedDelegationSpecifier
                                      delegationSpecifier
                                       constructorInvocation
                                        userType
                                         simpleUserType
                                          simpleIdentifier
                                           Any
                                        valueArguments
                                         (
                                         )
                                    classBody
                                     {
                                     \n
                                     classMemberDeclarations
                                      classMemberDeclaration
                                       declaration
                                        functionDeclaration
                                         modifiers
                                          modifier
                                           memberModifier
                                            override
                                          modifier
                                           functionModifier
                                            inline
                                         fun
                                         simpleIdentifier
                                          toString
                                         functionValueParameters
                                          (
                                          )
                                         functionBody
                                          =
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          outerProp
                                                    additiveOperator
                                                     +
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          arg
                                      semis
                                       \n
                                     }
                    \n
                 classMemberDeclaration
                  declaration
                   functionDeclaration
                    modifiers
                     modifier
                      memberModifier
                       override
                    fun
                    simpleIdentifier
                     toString
                    functionValueParameters
                     (
                     )
                    functionBody
                     =
                     expression
                      disjunction
                       conjunction
                        equality
                         comparison
                          infixOperation
                           elvisExpression
                            infixFunctionCall
                             rangeExpression
                              additiveExpression
                               multiplicativeExpression
                                asExpression
                                 prefixUnaryExpression
                                  postfixUnaryExpression
                                   primaryExpression
                                    stringLiteral
                                     lineStringLiteral
                                      "
                                      lineStringExpression
                                       ${
                                       expression
                                        disjunction
                                         conjunction
                                          equality
                                           comparison
                                            infixOperation
                                             elvisExpression
                                              infixFunctionCall
                                               rangeExpression
                                                additiveExpression
                                                 multiplicativeExpression
                                                  asExpression
                                                   prefixUnaryExpression
                                                    postfixUnaryExpression
                                                     primaryExpression
                                                      simpleIdentifier
                                                       work1
                                       }
                                      lineStringContent
                                       #
                                      lineStringExpression
                                       ${
                                       expression
                                        disjunction
                                         conjunction
                                          equality
                                           comparison
                                            infixOperation
                                             elvisExpression
                                              infixFunctionCall
                                               rangeExpression
                                                additiveExpression
                                                 multiplicativeExpression
                                                  asExpression
                                                   prefixUnaryExpression
                                                    postfixUnaryExpression
                                                     primaryExpression
                                                      simpleIdentifier
                                                       work2
                                       }
                                      lineStringContent
                                       #
                                      lineStringExpression
                                       ${
                                       expression
                                        disjunction
                                         conjunction
                                          equality
                                           comparison
                                            infixOperation
                                             elvisExpression
                                              infixFunctionCall
                                               rangeExpression
                                                additiveExpression
                                                 multiplicativeExpression
                                                  asExpression
                                                   prefixUnaryExpression
                                                    postfixUnaryExpression
                                                     primaryExpression
                                                      simpleIdentifier
                                                       obj
                                                     postfixUnarySuffix
                                                      navigationSuffix
                                                       memberAccessOperator
                                                        .
                                                       simpleIdentifier
                                                        toString
                                                     postfixUnarySuffix
                                                      callSuffix
                                                       valueArguments
                                                        (
                                                        )
                                       }
                                      "
                 semis
                  \n
                }
            \n
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            jumpExpression
                             return
                             expression
                              disjunction
                               conjunction
                                equality
                                 comparison
                                  infixOperation
                                   elvisExpression
                                    infixFunctionCall
                                     rangeExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        asExpression
                                         prefixUnaryExpression
                                          postfixUnaryExpression
                                           primaryExpression
                                            simpleIdentifier
                                             Local
                                           postfixUnarySuffix
                                            callSuffix
                                             valueArguments
                                              (
                                              )
                                           postfixUnarySuffix
                                            navigationSuffix
                                             memberAccessOperator
                                              .
                                             simpleIdentifier
                                              toString
                                           postfixUnarySuffix
                                            callSuffix
                                             valueArguments
                                              (
                                              )
            semis
             \n
           }
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
