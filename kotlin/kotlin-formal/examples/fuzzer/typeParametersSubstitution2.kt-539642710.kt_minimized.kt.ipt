kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    interface
    simpleIdentifier
     MComparator
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          compare
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             o1
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 T
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             o2
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 T
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Int
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      inheritanceModifier
       open
    class
    simpleIdentifier
     CustomerService
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            inline
         fun
         typeParameters
          <
          typeParameter
           simpleIdentifier
            T
          >
         simpleIdentifier
          comparator
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             z
            :
            type_
             parenthesizedType
              (
              type_
               functionType
                functionTypeParameters
                 (
                 )
                ->
                type_
                 typeReference
                  userType
                   simpleUserType
                    simpleIdentifier
                     Int
              )
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         objectLiteral
                          object
                          :
                          delegationSpecifiers
                           annotatedDelegationSpecifier
                            delegationSpecifier
                             userType
                              simpleUserType
                               simpleIdentifier
                                MComparator
                               typeArguments
                                <
                                typeProjection
                                 type_
                                  typeReference
                                   userType
                                    simpleUserType
                                     simpleIdentifier
                                      T
                                >
                          classBody
                           {
                           \n
                           classMemberDeclarations
                            classMemberDeclaration
                             declaration
                              functionDeclaration
                               modifiers
                                modifier
                                 memberModifier
                                  override
                               fun
                               simpleIdentifier
                                compare
                               functionValueParameters
                                (
                                functionValueParameter
                                 parameter
                                  simpleIdentifier
                                   o1
                                  :
                                  type_
                                   typeReference
                                    userType
                                     simpleUserType
                                      simpleIdentifier
                                       T
                                ,
                                functionValueParameter
                                 parameter
                                  simpleIdentifier
                                   o2
                                  :
                                  type_
                                   typeReference
                                    userType
                                     simpleUserType
                                      simpleIdentifier
                                       T
                                )
                               :
                               type_
                                typeReference
                                 userType
                                  simpleUserType
                                   simpleIdentifier
                                    Int
                               functionBody
                                block
                                 {
                                 \n
                                 statements
                                  statement
                                   expression
                                    disjunction
                                     conjunction
                                      equality
                                       comparison
                                        infixOperation
                                         elvisExpression
                                          infixFunctionCall
                                           rangeExpression
                                            additiveExpression
                                             multiplicativeExpression
                                              asExpression
                                               prefixUnaryExpression
                                                postfixUnaryExpression
                                                 primaryExpression
                                                  jumpExpression
                                                   return
                                                   expression
                                                    disjunction
                                                     conjunction
                                                      equality
                                                       comparison
                                                        infixOperation
                                                         elvisExpression
                                                          infixFunctionCall
                                                           rangeExpression
                                                            additiveExpression
                                                             multiplicativeExpression
                                                              asExpression
                                                               prefixUnaryExpression
                                                                postfixUnaryExpression
                                                                 primaryExpression
                                                                  parenthesizedExpression
                                                                   (
                                                                   expression
                                                                    disjunction
                                                                     conjunction
                                                                      equality
                                                                       comparison
                                                                        infixOperation
                                                                         elvisExpression
                                                                          infixFunctionCall
                                                                           rangeExpression
                                                                            additiveExpression
                                                                             multiplicativeExpression
                                                                              asExpression
                                                                               prefixUnaryExpression
                                                                                postfixUnaryExpression
                                                                                 primaryExpression
                                                                                  simpleIdentifier
                                                                                   z
                                                                   )
                                                                 postfixUnarySuffix
                                                                  postfixUnaryOperator
                                                                   !
                                                                   excl
                                                                    !
                                                                 postfixUnarySuffix
                                                                  callSuffix
                                                                   valueArguments
                                                                    (
                                                                    )
                                  semis
                                   \n
                                 }
                            semis
                             \n
                           }
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          callInline
         functionValueParameters
          (
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          comparator
                        postfixUnarySuffix
                         typeArguments
                          <
                          typeProjection
                           type_
                            typeReference
                             userType
                              simpleUserType
                               simpleIdentifier
                                String
                          >
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           valueArgument
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           functionLiteral
                                            lambdaLiteral
                                             {
                                             statements
                                              statement
                                               expression
                                                disjunction
                                                 conjunction
                                                  equality
                                                   comparison
                                                    infixOperation
                                                     elvisExpression
                                                      infixFunctionCall
                                                       rangeExpression
                                                        additiveExpression
                                                         multiplicativeExpression
                                                          asExpression
                                                           prefixUnaryExpression
                                                            postfixUnaryExpression
                                                             primaryExpression
                                                              literalConstant
                                                               1
                                             }
                           )
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
