kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      inheritanceModifier
       open
    class
    simpleIdentifier
     Test
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            inline
         fun
         typeParameters
          <
          typeParameter
           simpleIdentifier
            Y
          >
         simpleIdentifier
          test
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             z
            :
            type_
             parenthesizedType
              (
              type_
               functionType
                functionTypeParameters
                 (
                 )
                ->
                type_
                 parenthesizedType
                  (
                  type_
                   functionType
                    functionTypeParameters
                     (
                     )
                    ->
                    type_
                     typeReference
                      userType
                       simpleUserType
                        simpleIdentifier
                         Y
                  )
              )
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         parenthesizedExpression
                          (
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          z
                          )
                        postfixUnarySuffix
                         postfixUnaryOperator
                          !
                          excl
                           !
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           )
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         typeParameters
          <
          typeParameter
           simpleIdentifier
            T
          >
         simpleIdentifier
          callInline
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             p
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 T
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          test
                        postfixUnarySuffix
                         typeArguments
                          <
                          typeProjection
                           type_
                            typeReference
                             userType
                              simpleUserType
                               simpleIdentifier
                                T
                          >
                        postfixUnarySuffix
                         callSuffix
                          valueArguments
                           (
                           valueArgument
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           functionLiteral
                                            lambdaLiteral
                                             {
                                             statements
                                              statement
                                               expression
                                                disjunction
                                                 conjunction
                                                  equality
                                                   comparison
                                                    infixOperation
                                                     elvisExpression
                                                      infixFunctionCall
                                                       rangeExpression
                                                        additiveExpression
                                                         multiplicativeExpression
                                                          asExpression
                                                           prefixUnaryExpression
                                                            postfixUnaryExpression
                                                             primaryExpression
                                                              functionLiteral
                                                               lambdaLiteral
                                                                {
                                                                statements
                                                                 statement
                                                                  expression
                                                                   disjunction
                                                                    conjunction
                                                                     equality
                                                                      comparison
                                                                       infixOperation
                                                                        elvisExpression
                                                                         infixFunctionCall
                                                                          rangeExpression
                                                                           additiveExpression
                                                                            multiplicativeExpression
                                                                             asExpression
                                                                              prefixUnaryExpression
                                                                               postfixUnaryExpression
                                                                                primaryExpression
                                                                                 simpleIdentifier
                                                                                  p
                                                                }
                                             }
                           )
      semis
       \n
     }
  semis
   <EOF>
 <EOF>
