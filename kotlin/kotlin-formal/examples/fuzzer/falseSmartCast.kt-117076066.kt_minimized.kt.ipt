kotlinFile
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      inheritanceModifier
       open
    class
    simpleIdentifier
     SuperFoo
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           visibilityModifier
            public
         fun
         receiverType
          nullableType
           parenthesizedType
            (
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Int
            )
           quest
            ?
         .
         simpleIdentifier
          bar
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              String
         functionBody
          block
           {
           \n
           statements
            statement
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            ifExpression
                             if
                             (
                             expression
                              disjunction
                               conjunction
                                equality
                                 comparison
                                  infixOperation
                                   elvisExpression
                                    infixFunctionCall
                                     rangeExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        asExpression
                                         prefixUnaryExpression
                                          postfixUnaryExpression
                                           primaryExpression
                                            simpleIdentifier
                                             this
                                   isOperator
                                    is
                                   type_
                                    typeReference
                                     userType
                                      simpleUserType
                                       simpleIdentifier
                                        Foo
                             )
                             controlStructureBody
                              statement
                               expression
                                disjunction
                                 conjunction
                                  equality
                                   comparison
                                    infixOperation
                                     elvisExpression
                                      infixFunctionCall
                                       rangeExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          asExpression
                                           prefixUnaryExpression
                                            postfixUnaryExpression
                                             primaryExpression
                                              parenthesizedExpression
                                               (
                                               expression
                                                disjunction
                                                 conjunction
                                                  equality
                                                   comparison
                                                    infixOperation
                                                     elvisExpression
                                                      infixFunctionCall
                                                       rangeExpression
                                                        additiveExpression
                                                         multiplicativeExpression
                                                          asExpression
                                                           prefixUnaryExpression
                                                            postfixUnaryExpression
                                                             primaryExpression
                                                              functionLiteral
                                                               lambdaLiteral
                                                                {
                                                                statements
                                                                 statement
                                                                  expression
                                                                   disjunction
                                                                    conjunction
                                                                     equality
                                                                      comparison
                                                                       infixOperation
                                                                        elvisExpression
                                                                         infixFunctionCall
                                                                          rangeExpression
                                                                           additiveExpression
                                                                            multiplicativeExpression
                                                                             asExpression
                                                                              prefixUnaryExpression
                                                                               postfixUnaryExpression
                                                                                primaryExpression
                                                                                 jumpExpression
                                                                                  return
                                                                                  expression
                                                                                   disjunction
                                                                                    conjunction
                                                                                     equality
                                                                                      comparison
                                                                                       infixOperation
                                                                                        elvisExpression
                                                                                         infixFunctionCall
                                                                                          rangeExpression
                                                                                           additiveExpression
                                                                                            multiplicativeExpression
                                                                                             asExpression
                                                                                              prefixUnaryExpression
                                                                                               postfixUnaryExpression
                                                                                                primaryExpression
                                                                                                 simpleIdentifier
                                                                                                  baz
                                                                                                postfixUnarySuffix
                                                                                                 callSuffix
                                                                                                  valueArguments
                                                                                                   (
                                                                                                   )
                                                                }
                                               )
            semis
             \n
           }
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           visibilityModifier
            public
          modifier
           functionModifier
            operator
         fun
         receiverType
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Int
         .
         simpleIdentifier
          baz
         functionValueParameters
          (
          )
         functionBody
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         stringLiteral
                          lineStringLiteral
                           "
                           lineStringContent
                            OK
                           "
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Foo
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       constructorInvocation
        userType
         simpleUserType
          simpleIdentifier
           SuperFoo
        valueArguments
         (
         )
    classBody
     {
     \n
     \n
     classMemberDeclarations
     }
  semis
   <EOF>
 <EOF>
