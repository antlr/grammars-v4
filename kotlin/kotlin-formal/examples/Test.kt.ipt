kotlinFile
 \n
 \n
 \n
 packageHeader
 importList
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Foo
    classBody
     {
     \n
     \n
     classMemberDeclarations
      classMemberDeclaration
       anonymousInitializer
        init
        block
         {
         \n
         statements
          statement
           expression
            disjunction
             conjunction
              equality
               comparison
                infixOperation
                 elvisExpression
                  infixFunctionCall
                   rangeExpression
                    additiveExpression
                     multiplicativeExpression
                      asExpression
                       prefixUnaryExpression
                        postfixUnaryExpression
                         primaryExpression
                          simpleIdentifier
                           foo
                         postfixUnarySuffix
                          callSuffix
                           valueArguments
                            (
                            )
          \n
          statement
           declaration
            propertyDeclaration
             val
             variableDeclaration
              simpleIdentifier
               c
             =
             expression
              disjunction
               conjunction
                equality
                 comparison
                  infixOperation
                   elvisExpression
                    infixFunctionCall
                     rangeExpression
                      additiveExpression
                       multiplicativeExpression
                        asExpression
                         prefixUnaryExpression
                          postfixUnaryExpression
                           primaryExpression
                            simpleIdentifier
                             f
             \n
         }
      semis
       \n
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Runnable
    typeParameters
     <
     typeParameter
      simpleIdentifier
       a
     ,
     typeParameter
      simpleIdentifier
       a
     >
    primaryConstructor
     classParameters
      (
      classParameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            doo
       =
       expression
        disjunction
         conjunction
          equality
           comparison
            infixOperation
             elvisExpression
              infixFunctionCall
               rangeExpression
                additiveExpression
                 multiplicativeExpression
                  asExpression
                   prefixUnaryExpression
                    postfixUnaryExpression
                     primaryExpression
                      literalConstant
                       0
      )
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       constructorInvocation
        userType
         simpleUserType
          simpleIdentifier
           foo
        valueArguments
         (
         valueArgument
          simpleIdentifier
           d
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          0
         )
     ,
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           bar
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        x
     ,
     annotatedDelegationSpecifier
      delegationSpecifier
       userType
        simpleUserType
         simpleIdentifier
          bar
    classBody
     {
     \n
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
                  additiveOperator
                   +
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
                   multiplicativeOperator
                    *
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        5
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       parenthesizedExpression
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                        )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       parenthesizedExpression
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                                      postfixUnarySuffix
                                       callSuffix
                                        annotatedLambda
                                         lambdaLiteral
                                          {
                                          statements
                                          }
                        )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
                      postfixUnarySuffix
                       indexingSuffix
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                                      postfixUnarySuffix
                                       callSuffix
                                        annotatedLambda
                                         lambdaLiteral
                                          {
                                          statements
                                          }
                        ]
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         callSuffix
                                          annotatedLambda
                                           lambdaLiteral
                                            {
                                            statements
                                            }
                         )
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           b
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       objectLiteral
                        object
                        classBody
                         {
                         \n
                         classMemberDeclarations
                          classMemberDeclaration
                           declaration
                            functionDeclaration
                             fun
                             simpleIdentifier
                              f
                             functionValueParameters
                              (
                              )
                             functionBody
                              =
                              expression
                               disjunction
                                conjunction
                                 equality
                                  comparison
                                   infixOperation
                                    elvisExpression
                                     infixFunctionCall
                                      rangeExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         asExpression
                                          prefixUnaryExpression
                                           postfixUnaryExpression
                                            primaryExpression
                                             simpleIdentifier
                                              a
                                            postfixUnarySuffix
                                             callSuffix
                                              annotatedLambda
                                               lambdaLiteral
                                                {
                                                statements
                                                }
                          semis
                           \n
                         }
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       whenExpression
                        when
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                        )
                        {
                        \n
                        whenEntry
                         whenCondition
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         navigationSuffix
                                          memberAccessOperator
                                           .
                                          simpleIdentifier
                                           foo
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        whenEntry
                         whenCondition
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         navigationSuffix
                                          memberAccessOperator
                                           .
                                          simpleIdentifier
                                           foo
                                        postfixUnarySuffix
                                         callSuffix
                                          valueArguments
                                           (
                                           )
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        whenEntry
                         whenCondition
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         navigationSuffix
                                          memberAccessOperator
                                           .
                                          simpleIdentifier
                                           foo
                                        postfixUnarySuffix
                                         typeArguments
                                          <
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                T
                                          >
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        whenEntry
                         whenCondition
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         navigationSuffix
                                          memberAccessOperator
                                           .
                                          simpleIdentifier
                                           foo
                                        postfixUnarySuffix
                                         typeArguments
                                          <
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                T
                                          >
                                        postfixUnarySuffix
                                         callSuffix
                                          valueArguments
                                           (
                                           valueArgument
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            a
                                           )
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        whenEntry
                         whenCondition
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                                        postfixUnarySuffix
                                         navigationSuffix
                                          memberAccessOperator
                                           .
                                          simpleIdentifier
                                           foo
                                        postfixUnarySuffix
                                         typeArguments
                                          <
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                T
                                          >
                                        postfixUnarySuffix
                                         callSuffix
                                          valueArguments
                                           (
                                           valueArgument
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            a
                                           ,
                                           valueArgument
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            d
                                           )
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        whenEntry
                         else
                         ->
                         controlStructureBody
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         semi
                          \n
                        }
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    f
                  postfixUnarySuffix
                   callSuffix
                    valueArguments
                     (
                     )
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    f
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    f
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    f
                  postfixUnarySuffix
                   callSuffix
                    valueArguments
                     (
                     )
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   parenthesizedExpression
                    (
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   simpleIdentifier
                                    f
                    )
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   parenthesizedExpression
                    (
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   simpleIdentifier
                                    f
                    )
                  postfixUnarySuffix
                   callSuffix
                    valueArguments
                     (
                     )
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   parenthesizedExpression
                    (
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   simpleIdentifier
                                    f
                    )
                  postfixUnarySuffix
                   typeArguments
                    <
                    typeProjection
                     type_
                      typeReference
                       userType
                        simpleUserType
                         simpleIdentifier
                          A
                    >
                  postfixUnarySuffix
                   callSuffix
                    valueArguments
                     (
                     )
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
                  postfixUnarySuffix
                   callSuffix
                    annotatedLambda
                     lambdaLiteral
                      {
                      statements
                      }
    \n
    \n
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        2
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        ]
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       literalConstant
                                                        1
                                        ]
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        ]
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        ]
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        ]
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       literalConstant
                                                        1
                                        ,
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       collectionLiteral
                                                        [
                                                        ]
                                        ]
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        2
                        ]
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       collectionLiteral
                        [
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                        ,
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       collectionLiteral
                                        [
                                        expression
                                         disjunction
                                          conjunction
                                           equality
                                            comparison
                                             infixOperation
                                              elvisExpression
                                               infixFunctionCall
                                                rangeExpression
                                                 additiveExpression
                                                  multiplicativeExpression
                                                   asExpression
                                                    prefixUnaryExpression
                                                     postfixUnaryExpression
                                                      primaryExpression
                                                       literalConstant
                                                        2
                                        ]
                        ]
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la1
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     \n
                     \n
                     \n
                     statements
                      statement
                       expression
                        disjunction
                         conjunction
                          equality
                           comparison
                            infixOperation
                             elvisExpression
                              infixFunctionCall
                               rangeExpression
                                additiveExpression
                                 multiplicativeExpression
                                  asExpression
                                   prefixUnaryExpression
                                    postfixUnaryExpression
                                     primaryExpression
                                      simpleIdentifier
                                       foo
                                     postfixUnarySuffix
                                      callSuffix
                                       valueArguments
                                        (
                                        )
                      \n
                      \n
                      \n
                      \n
                      statement
                       expression
                        disjunction
                         conjunction
                          equality
                           comparison
                            infixOperation
                             elvisExpression
                              infixFunctionCall
                               rangeExpression
                                additiveExpression
                                 multiplicativeExpression
                                  asExpression
                                   prefixUnaryExpression
                                    postfixUnaryExpression
                                     primaryExpression
                                      simpleIdentifier
                                       foo
                                     postfixUnarySuffix
                                      callSuffix
                                       valueArguments
                                        (
                                        )
                      semis
                       \n
                       \n
                       \n
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la2
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     \n
                     \n
                     statements
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la3
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     \n
                     \n
                     statements
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la4
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     \n
                     \n
                     \n
                     \n
                     statements
                      statement
                       declaration
                        propertyDeclaration
                         val
                         variableDeclaration
                          simpleIdentifier
                           some
                         =
                         expression
                          disjunction
                           conjunction
                            equality
                             comparison
                              infixOperation
                               elvisExpression
                                infixFunctionCall
                                 rangeExpression
                                  additiveExpression
                                   multiplicativeExpression
                                    asExpression
                                     prefixUnaryExpression
                                      postfixUnaryExpression
                                       primaryExpression
                                        literalConstant
                                         1
                         \n
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la5
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     \n
                     \n
                     \n
                     statements
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la6
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     lambdaParameters
                      lambdaParameter
                       variableDeclaration
                        simpleIdentifier
                         a
                     ->
                     \n
                     statements
                     }
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      la7
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   functionLiteral
                    lambdaLiteral
                     {
                     statements
                     }
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      statements
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        true
                        )
                        controlStructureBody
                         block
                          {
                          statements
                          }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        true
                        )
                        controlStructureBody
                         block
                          {
                          \n
                          \n
                          statements
                          }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        true
                        )
                        controlStructureBody
                         block
                          {
                          \n
                          \n
                          \n
                          statements
                          }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        true
                        )
                        controlStructureBody
                         block
                          {
                          \n
                          \n
                          \n
                          \n
                          statements
                           statement
                            declaration
                             propertyDeclaration
                              val
                              variableDeclaration
                               simpleIdentifier
                                a
                              =
                              expression
                               disjunction
                                conjunction
                                 equality
                                  comparison
                                   infixOperation
                                    elvisExpression
                                     infixFunctionCall
                                      rangeExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         asExpression
                                          prefixUnaryExpression
                                           postfixUnaryExpression
                                            primaryExpression
                                             literalConstant
                                              12
                              \n
                              \n
                              \n
                          }
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     foo
    classBody
     {
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       public
    class
    simpleIdentifier
     foo
    primaryConstructor
     classParameters
      (
      )
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       userType
        simpleUserType
         simpleIdentifier
          Bar
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       private
    class
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    primaryConstructor
     classParameters
      (
      )
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       userType
        simpleUserType
         simpleIdentifier
          Bar
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                          ->
                          statements
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a2
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             )
                          ->
                          statements
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a3
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            variableDeclaration
                             simpleIdentifier
                              z
                           ,
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                          ->
                          statements
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a4
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                           ,
                           lambdaParameter
                            variableDeclaration
                             simpleIdentifier
                              z
                          ->
                          statements
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a5
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            variableDeclaration
                             simpleIdentifier
                              q
                           ,
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                           ,
                           lambdaParameter
                            variableDeclaration
                             simpleIdentifier
                              z
                          ->
                          statements
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a6
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                           ,
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               z
                             ,
                             variableDeclaration
                              simpleIdentifier
                               w
                             )
                          ->
                          statements
                          }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a7
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         filter
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          lambdaParameters
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               x
                             ,
                             variableDeclaration
                              simpleIdentifier
                               y
                             )
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 Type
                           ,
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               z
                              :
                              type_
                               typeReference
                                userType
                                 simpleUserType
                                  simpleIdentifier
                                   Type
                             )
                           ,
                           lambdaParameter
                            multiVariableDeclaration
                             (
                             variableDeclaration
                              simpleIdentifier
                               w
                             ,
                             variableDeclaration
                              simpleIdentifier
                               u
                              :
                              type_
                               typeReference
                                userType
                                 simpleUserType
                                  simpleIdentifier
                                   T
                             )
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 V
                          ->
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           simpleIdentifier
                                            foo7
                                          postfixUnarySuffix
                                           callSuffix
                                            valueArguments
                                             (
                                             )
                          }
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     tests
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         typeReference
                          userType
                           simpleUserType
                            simpleIdentifier
                             a
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         typeReference
                          userType
                           simpleUserType
                            simpleIdentifier
                             a
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         typeReference
                          userType
                           simpleUserType
                            simpleIdentifier
                             a
                        ::
                        simpleIdentifier
                         b
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ?
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ?
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ?
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ? 
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ? 
                        ::
                        simpleIdentifier
                         b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ? 
                          quest
                           ? 
                        ::
                        simpleIdentifier
                         b
       semis
        \n
      }
  semis
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     breakLine
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       callableReference
                        receiverType
                         nullableType
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                          quest
                           ?
                        \n
                        ::
                        simpleIdentifier
                         b
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     nullableType
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          dynamic
      quest
       ?
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    .
    variableDeclaration
     simpleIdentifier
      foo
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          Int
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    receiverType
     nullableType
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          dynamic
      quest
       ?
    .
    variableDeclaration
     simpleIdentifier
      foo
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          Int
    \n
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      foo
     :
     type_
      functionType
       receiverType
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            dynamic
       .
       functionTypeParameters
        (
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Unit
    \n
    \n
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    \n
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    \n
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
    .
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        p1
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            dynamic
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p2
       :
       type_
        typeModifiers
         typeModifier
          annotation
           singleAnnotation
            @
            unescapedAnnotation
             userType
              simpleUserType
               simpleIdentifier
                a
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            dynamic
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p3
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
          .
          simpleUserType
           simpleIdentifier
            dynamic
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p4
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            dynamic
          .
          simpleUserType
           simpleIdentifier
            foo
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p5
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            dynamic
           typeArguments
            <
            typeProjection
             type_
              typeReference
               userType
                simpleUserType
                 simpleIdentifier
                  T
            >
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p6
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Foo
           typeArguments
            <
            typeProjection
             type_
              typeReference
               userType
                simpleUserType
                 simpleIdentifier
                  dynamic
            >
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p7
       :
       type_
        nullableType
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             dynamic
         quest
          ?
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        p8
       :
       type_
        functionType
         functionTypeParameters
          (
          type_
           typeReference
            userType
             simpleUserType
              simpleIdentifier
               dynamic
          )
         ->
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              dynamic
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         dynamic
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     Color
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        NORTH
      ,
      \n
      enumEntry
       simpleIdentifier
        SOUTH
      ,
      \n
      enumEntry
       simpleIdentifier
        WEST
      ,
      \n
      enumEntry
       simpleIdentifier
        EAST
      ,
     \n
     ;
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     My
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        FIRST
     ;
     \n
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           functionModifier
            inline
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          )
         functionBody
          block
           {
           statements
           }
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     My
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        FIRST
     ;
     \n
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          )
         functionBody
          block
           {
           statements
           }
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     Foo
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        `in`
      \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     My
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        inline
      \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     Color
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        rgb
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Int
      )
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        RED
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0xFF000
        )
      ,
      \n
      enumEntry
       simpleIdentifier
        GREEN
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x00FF00
        )
      ,
      \n
      enumEntry
       simpleIdentifier
        BLUE
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x0000FF
        )
      \n
      \n
      \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     Color
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        rgb
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Int
      )
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        RED
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0xFF000
        )
      ,
      \n
      enumEntry
       simpleIdentifier
        GREEN
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x00FF00
        )
      ,
      \n
      enumEntry
       simpleIdentifier
        BLUE
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x0000FF
        )
      ,
     \n
     ;
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      classModifier
       enum
    class
    simpleIdentifier
     Color
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        rgb
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Int
      )
    enumClassBody
     {
     \n
     enumEntries
      enumEntry
       simpleIdentifier
        RED
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0xFF000
        )
       classBody
        {
        \n
        classMemberDeclarations
         classMemberDeclaration
          declaration
           functionDeclaration
            modifiers
             modifier
              memberModifier
               override
            fun
            simpleIdentifier
             foo
            functionValueParameters
             (
             )
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Int
            functionBody
             block
              {
              statements
               statement
                expression
                 disjunction
                  conjunction
                   equality
                    comparison
                     infixOperation
                      elvisExpression
                       infixFunctionCall
                        rangeExpression
                         additiveExpression
                          multiplicativeExpression
                           asExpression
                            prefixUnaryExpression
                             postfixUnaryExpression
                              primaryExpression
                               jumpExpression
                                return
                                expression
                                 disjunction
                                  conjunction
                                   equality
                                    comparison
                                     infixOperation
                                      elvisExpression
                                       infixFunctionCall
                                        rangeExpression
                                         additiveExpression
                                          multiplicativeExpression
                                           asExpression
                                            prefixUnaryExpression
                                             postfixUnaryExpression
                                              primaryExpression
                                               literalConstant
                                                1
              }
         semis
          \n
        }
      ,
      \n
      enumEntry
       simpleIdentifier
        GREEN
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x00FF00
        )
       classBody
        {
        \n
        classMemberDeclarations
         classMemberDeclaration
          declaration
           functionDeclaration
            modifiers
             modifier
              memberModifier
               override
            fun
            simpleIdentifier
             foo
            functionValueParameters
             (
             )
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Int
            functionBody
             block
              {
              statements
               statement
                expression
                 disjunction
                  conjunction
                   equality
                    comparison
                     infixOperation
                      elvisExpression
                       infixFunctionCall
                        rangeExpression
                         additiveExpression
                          multiplicativeExpression
                           asExpression
                            prefixUnaryExpression
                             postfixUnaryExpression
                              primaryExpression
                               jumpExpression
                                return
                                expression
                                 disjunction
                                  conjunction
                                   equality
                                    comparison
                                     infixOperation
                                      elvisExpression
                                       infixFunctionCall
                                        rangeExpression
                                         additiveExpression
                                          multiplicativeExpression
                                           asExpression
                                            prefixUnaryExpression
                                             postfixUnaryExpression
                                              primaryExpression
                                               literalConstant
                                                2
              }
         semis
          \n
        }
      ,
      \n
      enumEntry
       simpleIdentifier
        BLUE
       valueArguments
        (
        valueArgument
         expression
          disjunction
           conjunction
            equality
             comparison
              infixOperation
               elvisExpression
                infixFunctionCall
                 rangeExpression
                  additiveExpression
                   multiplicativeExpression
                    asExpression
                     prefixUnaryExpression
                      postfixUnaryExpression
                       primaryExpression
                        literalConstant
                         0x0000FF
        )
       classBody
        {
        \n
        classMemberDeclarations
         classMemberDeclaration
          declaration
           functionDeclaration
            modifiers
             modifier
              memberModifier
               override
            fun
            simpleIdentifier
             foo
            functionValueParameters
             (
             )
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Int
            functionBody
             block
              {
              statements
               statement
                expression
                 disjunction
                  conjunction
                   equality
                    comparison
                     infixOperation
                      elvisExpression
                       infixFunctionCall
                        rangeExpression
                         additiveExpression
                          multiplicativeExpression
                           asExpression
                            prefixUnaryExpression
                             postfixUnaryExpression
                              primaryExpression
                               jumpExpression
                                return
                                expression
                                 disjunction
                                  conjunction
                                   equality
                                    comparison
                                     infixOperation
                                      elvisExpression
                                       infixFunctionCall
                                        rangeExpression
                                         additiveExpression
                                          multiplicativeExpression
                                           asExpression
                                            prefixUnaryExpression
                                             postfixUnaryExpression
                                              primaryExpression
                                               literalConstant
                                                3
              }
         semis
          \n
        }
     ;
     \n
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           inheritanceModifier
            abstract
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              Int
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
                  additiveOperator
                   +
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
                  additiveOperator
                   +
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       +
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         classDeclaration
          class
          simpleIdentifier
           foo
       \n
       statement
        declaration
         functionDeclaration
          fun
          simpleIdentifier
           foo
          functionValueParameters
           (
           )
       \n
       statement
        declaration
         classDeclaration
          class
          simpleIdentifier
           foo
       \n
       \n
       statement
        declaration
         typeAlias
          typealias
          simpleIdentifier
           x
          =
          type_
           typeReference
            userType
             simpleUserType
              simpleIdentifier
               t
       \n
       statement
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            r
          \n
       \n
       statement
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            foo
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          4
          \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
       \n
       statement
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            f
          \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         java
       .
       simpleUserType
        simpleIdentifier
         util
       .
       simpleUserType
        simpleIdentifier
         Map
        typeArguments
         <
         typeProjection
          *
         ,
         typeProjection
          *
         >
    .
    variableDeclaration
     simpleIdentifier
      size
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          Int
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         java
       .
       simpleUserType
        simpleIdentifier
         util
       .
       simpleUserType
        simpleIdentifier
         Map
        typeArguments
         <
         typeProjection
          *
         ,
         typeProjection
          *
         >
    .
    simpleIdentifier
     size
    functionValueParameters
     (
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Int
    functionBody
     =
     expression
      disjunction
       conjunction
        equality
         comparison
          infixOperation
           elvisExpression
            infixFunctionCall
             rangeExpression
              additiveExpression
               multiplicativeExpression
                asExpression
                 prefixUnaryExpression
                  postfixUnaryExpression
                   primaryExpression
                    literalConstant
                     1
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      array
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    array
                  postfixUnarySuffix
                   typeArguments
                    <
                    typeProjection
                     type_
                      typeReference
                       userType
                        simpleUserType
                         simpleIdentifier
                          Any
                    >
                  postfixUnarySuffix
                   callSuffix
                    valueArguments
                     (
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e-1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e-1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e1F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e1F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e-1F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e-1F
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e1f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e1f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e-1f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1.0e-1f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      .1_1
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      3.141_592
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e1__3_7
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1_0f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      1e1_2f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      2_2.0f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      .3_3f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      3.14_16f
                     ,
                     valueArgument
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      6.022___137e+2_3f
                     )
    \n
    \n
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        f
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        g
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         type_
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              bar
                        >
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        h
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         type_
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              baz
                        >
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       parenthesizedExpression
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                        )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        i
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           simpleIdentifier
                                            s
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        j
       ;
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           s
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        k
                      postfixUnarySuffix
                       callSuffix
                        annotatedLambda
                         lambdaLiteral
                          {
                          \n
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           simpleIdentifier
                                            s
                           semis
                            \n
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        l
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
                        annotatedLambda
                         lambdaLiteral
                          {
                          \n
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           simpleIdentifier
                                            s
                           semis
                            \n
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        m
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       ;
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         \n
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           s
                          semis
                           \n
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        n
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         type_
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                        >
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
                        annotatedLambda
                         lambdaLiteral
                          {
                          \n
                          statements
                           statement
                            expression
                             disjunction
                              conjunction
                               equality
                                comparison
                                 infixOperation
                                  elvisExpression
                                   infixFunctionCall
                                    rangeExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       asExpression
                                        prefixUnaryExpression
                                         postfixUnaryExpression
                                          primaryExpression
                                           simpleIdentifier
                                            s
                           semis
                            \n
                          }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        o
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         type_
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              a
                        >
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       ;
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         \n
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           s
                          semis
                           \n
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        p
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          qux
                                        postfixUnarySuffix
                                         typeArguments
                                          <
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                a
                                          ,
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                b
                                          >
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        q
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          quux
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        r
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          corge
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         literalConstant
                                          1
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        s
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          grault
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         literalConstant
                                                          1
                                                    additiveOperator
                                                     +
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         literalConstant
                                                          2
                                          )
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        t
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          garply
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         literalConstant
                                          1
                                    additiveOperator
                                     +
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         literalConstant
                                          2
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        u
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          waldo
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         literalConstant
                                          1
                                     multiplicativeOperator
                                      *
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         literalConstant
                                          2
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        v
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          fred
                                        postfixUnarySuffix
                                         typeArguments
                                          <
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                a
                                          ,
                                          typeProjection
                                           *
                                          ,
                                          typeProjection
                                           type_
                                            typeReference
                                             userType
                                              simpleUserType
                                               simpleIdentifier
                                                b
                                          >
                                        postfixUnarySuffix
                                         callSuffix
                                          valueArguments
                                           (
                                           valueArgument
                                            expression
                                             disjunction
                                              conjunction
                                               equality
                                                comparison
                                                 infixOperation
                                                  elvisExpression
                                                   infixFunctionCall
                                                    rangeExpression
                                                     additiveExpression
                                                      multiplicativeExpression
                                                       asExpression
                                                        prefixUnaryExpression
                                                         postfixUnaryExpression
                                                          primaryExpression
                                                           simpleIdentifier
                                                            a
                                           )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        w
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          plugh
                               comparisonOperator
                                <
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         stringLiteral
                                          lineStringLiteral
                                           "
                                           "
                         ,
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          b
                               comparisonOperator
                                >
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         parenthesizedExpression
                                          (
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         simpleIdentifier
                                                          a
                                          )
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        xyzzy
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         *
                        >
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _foo
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         __foo
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1_1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _foo
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _1foo
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _1_foo
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         statements
                         }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           foo
                         }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             a
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           a
                         }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             x
                          ,
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             y
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          literalConstant
                                           1
                         }
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             a
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 b
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           f
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             a
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 b
                          ,
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             c
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           f
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             a
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 b
                          ,
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             c
                            :
                            type_
                             typeReference
                              userType
                               simpleUserType
                                simpleIdentifier
                                 d
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           f
                         }
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       functionLiteral
                        lambdaLiteral
                         {
                         lambdaParameters
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             a
                            :
                            type_
                             functionType
                              functionTypeParameters
                               (
                               type_
                                typeReference
                                 userType
                                  simpleUserType
                                   simpleIdentifier
                                    Int
                               )
                              ->
                              type_
                               typeReference
                                userType
                                 simpleUserType
                                  simpleIdentifier
                                   Unit
                          ,
                          lambdaParameter
                           variableDeclaration
                            simpleIdentifier
                             c
                            :
                            type_
                             functionType
                              functionTypeParameters
                               (
                               type_
                                typeReference
                                 userType
                                  simpleUserType
                                   simpleIdentifier
                                    Int
                               )
                              ->
                              type_
                               typeReference
                                userType
                                 simpleUserType
                                  simpleIdentifier
                                   Unit
                         ->
                         statements
                          statement
                           expression
                            disjunction
                             conjunction
                              equality
                               comparison
                                infixOperation
                                 elvisExpression
                                  infixFunctionCall
                                   rangeExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      asExpression
                                       prefixUnaryExpression
                                        postfixUnaryExpression
                                         primaryExpression
                                          simpleIdentifier
                                           f
                         }
       semis
        \n
        \n
        \n
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       type_
        typeModifiers
         typeModifier
          annotation
           multiAnnotation
            @
            [
            unescapedAnnotation
             userType
              simpleUserType
               simpleIdentifier
                a
            ]
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       )
      ->
      type_
       typeModifiers
        typeModifier
         annotation
          multiAnnotation
           @
           [
           unescapedAnnotation
            userType
             simpleUserType
              simpleIdentifier
               x
           ]
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           Unit
  semis
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       parameter
        simpleIdentifier
         a
        :
        type_
         typeModifiers
          typeModifier
           annotation
            multiAnnotation
             @
             [
             unescapedAnnotation
              userType
               simpleUserType
                simpleIdentifier
                 a
             ]
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       parameter
        simpleIdentifier
         a
        :
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           Unit
  semis
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       parameter
        simpleIdentifier
         a
        :
        type_
         typeModifiers
          typeModifier
           annotation
            multiAnnotation
             @
             [
             unescapedAnnotation
              userType
               simpleUserType
                simpleIdentifier
                 a
             ]
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
       ,
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
       ,
       parameter
        simpleIdentifier
         x
        :
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             bar
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
       ,
       parameter
        simpleIdentifier
         a
        :
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
       ,
       parameter
        simpleIdentifier
         a
        :
        type_
         functionType
          functionTypeParameters
           (
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
           )
          ->
          type_
           typeReference
            userType
             simpleUserType
              simpleIdentifier
               b
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           b
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      functionTypeParameters
       (
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
       ,
       parameter
        simpleIdentifier
         a
        :
        type_
         functionType
          functionTypeParameters
           (
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
           )
          ->
          type_
           typeReference
            userType
             simpleUserType
              simpleIdentifier
               b
       )
      ->
      type_
       functionType
        functionTypeParameters
         (
         )
        ->
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             Unit
  semis
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     functionType
      receiverType
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           T
      .
      functionTypeParameters
       (
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           Unit
  semis
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     f
    =
    type_
     typeModifiers
      typeModifier
       annotation
        multiAnnotation
         @
         [
         unescapedAnnotation
          userType
           simpleUserType
            simpleIdentifier
             a
         ]
     functionType
      receiverType
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           T
      .
      functionTypeParameters
       (
       )
      ->
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           Unit
  semis
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   ifExpression
                    if
                    (
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   literalConstant
                                    1
                    )
                    controlStructureBody
                     block
                      {
                      statements
                       statement
                        declaration
                         propertyDeclaration
                          var
                          variableDeclaration
                           simpleIdentifier
                            f
                          =
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                       ;
                       statement
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                      }
                    else
                    controlStructureBody
                     block
                      {
                      statements
                       statement
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        null
                      }
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      a
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   ifExpression
                    if
                    (
                    expression
                     disjunction
                      conjunction
                       equality
                        comparison
                         infixOperation
                          elvisExpression
                           infixFunctionCall
                            rangeExpression
                             additiveExpression
                              multiplicativeExpression
                               asExpression
                                prefixUnaryExpression
                                 postfixUnaryExpression
                                  primaryExpression
                                   literalConstant
                                    1
                    )
                    controlStructureBody
                     block
                      {
                      \n
                      statements
                       statement
                        declaration
                         propertyDeclaration
                          var
                          variableDeclaration
                           simpleIdentifier
                            f
                          =
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                       ;
                       \n
                       statement
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        a
                       semis
                        \n
                      }
                    else
                    controlStructureBody
                     block
                      {
                      statements
                       statement
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        null
                      }
    \n
    \n
    \n
    \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Outer
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        classDeclaration
         modifiers
          modifier
           classModifier
            inner
         class
         simpleIdentifier
          Inner
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    interface
    simpleIdentifier
     Foo
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          f
         functionValueParameters
          (
          )
      semis
       \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           a
         \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        out
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
       \n
       statement
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
        declaration
         classDeclaration
          modifiers
           modifier
            inheritanceModifier
             abstract
          class
          simpleIdentifier
           foof
          classBody
           {
           classMemberDeclarations
           }
       \n
       statement
        declaration
         classDeclaration
          modifiers
           modifier
            inheritanceModifier
             abstract
           annotation
            singleAnnotation
             @
             unescapedAnnotation
              userType
               simpleUserType
                simpleIdentifier
                 a
          class
          simpleIdentifier
           foof
          classBody
           {
           classMemberDeclarations
           }
       \n
       \n
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            foo
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          5
       \n
       statement
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            foo
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         literalConstant
                          4
       \n
       statement
        declaration
         typeAlias
          typealias
          simpleIdentifier
           f
          =
          type_
           functionType
            receiverType
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 T
            .
            functionTypeParameters
             (
             )
            ->
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Unit
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      z
    =
    expression
     disjunction
      conjunction
       equality
        comparison
         infixOperation
          elvisExpression
           infixFunctionCall
            rangeExpression
             additiveExpression
              multiplicativeExpression
               asExpression
                prefixUnaryExpression
                 postfixUnaryExpression
                  primaryExpression
                   simpleIdentifier
                    System
                  postfixUnarySuffix
                   navigationSuffix
                    memberAccessOperator
                     .
                    simpleIdentifier
                     out
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        throw
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        Exception
                                      postfixUnarySuffix
                                       callSuffix
                                        valueArguments
                                         (
                                         )
       semis
        ;
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     A
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       companionObject
        companion
        object
        simpleIdentifier
         Companion
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        companion
        object
        simpleIdentifier
         B
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        companion
        object
        simpleIdentifier
         C
        classBody
         {
         classMemberDeclarations
         }
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        companion
        object
      semis
       \n
       \n
      classMemberDeclaration
       declaration
        objectDeclaration
         object
         simpleIdentifier
          C
      semis
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        declaration
         propertyDeclaration
          val
          variableDeclaration
           simpleIdentifier
            str
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         stringLiteral
                          lineStringLiteral
                           "
                           "
          \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        str
                      postfixUnarySuffix
                       navigationSuffix
                        \n
                        \n
                        memberAccessOperator
                         .
                        simpleIdentifier
                         length
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        str
                      postfixUnarySuffix
                       navigationSuffix
                        \n
                        \n
                        memberAccessOperator
                         safeNav
                          ?
                          .
                        simpleIdentifier
                         length
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        str
                    \n
                    \n
                    asOperator
                     as
                    type_
                     typeReference
                      userType
                       simpleUserType
                        simpleIdentifier
                         String
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        str
                    \n
                    \n
                    asOperator
                     as?
                    type_
                     typeReference
                      userType
                       simpleUserType
                        simpleIdentifier
                         String
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        str
               \n
               \n
               elvis
                ?
                :
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        foo
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        true
          \n
          \n
          ||
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        false
       \n
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        false
           \n
           \n
           &&
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        true
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     test
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
              isOperator
               !is 
              type_
               typeReference
                userType
                 simpleUserType
                  simpleIdentifier
                   B
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        a
              inOperator
               !in 
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        B
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       excl
                        !
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        isBoolean
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     unaryPrefix
                      prefixUnaryOperator
                       excl
                        !
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        inRange
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         valueArgument
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         simpleIdentifier
                                          a
                         )
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     main
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        args
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Array
           typeArguments
            <
            typeProjection
             type_
              typeReference
               userType
                simpleUserType
                 simpleIdentifier
                  String
            >
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       objectLiteral
                        object
                        :
                        delegationSpecifiers
                         annotatedDelegationSpecifier
                          delegationSpecifier
                           constructorInvocation
                            userType
                             simpleUserType
                              simpleIdentifier
                               Thread
                            valueArguments
                             (
                             )
                        classBody
                         {
                         \n
                         classMemberDeclarations
                         }
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         run
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       \n
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       objectLiteral
                        object
                        classBody
                         {
                         \n
                         classMemberDeclarations
                         }
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _some
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         __some
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1_1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _some
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _1some
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        1
                      postfixUnarySuffix
                       navigationSuffix
                        memberAccessOperator
                         .
                        simpleIdentifier
                         _1_some
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     annotation
      singleAnnotation
       @
       unescapedAnnotation
        userType
         simpleUserType
          simpleIdentifier
           `return`
    fun
    simpleIdentifier
     `package`
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        `class`
                      postfixUnarySuffix
                       callSuffix
                        valueArguments
                         (
                         )
       semis
        \n
      }
  semis
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     `$`
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     `$$`
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     ` `
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     `1`
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     foo
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Int
     )
    :
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         Int
    functionBody
     block
      {
      statements
       statement
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            x
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          a
       ;
       statement
        declaration
         propertyDeclaration
          var
          variableDeclaration
           simpleIdentifier
            y
          =
          expression
           disjunction
            conjunction
             equality
              comparison
               infixOperation
                elvisExpression
                 infixFunctionCall
                  rangeExpression
                   additiveExpression
                    multiplicativeExpression
                     asExpression
                      prefixUnaryExpression
                       postfixUnaryExpression
                        primaryExpression
                         simpleIdentifier
                          x
                        postfixUnarySuffix
                         postfixUnaryOperator
                          ++
       ;
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       ifExpression
                        if
                        (
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        y
                                  additiveOperator
                                   +
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        1
                            equalityOperator
                             !=
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        x
                        )
                        controlStructureBody
                         statement
                          expression
                           disjunction
                            conjunction
                             equality
                              comparison
                               infixOperation
                                elvisExpression
                                 infixFunctionCall
                                  rangeExpression
                                   additiveExpression
                                    multiplicativeExpression
                                     asExpression
                                      prefixUnaryExpression
                                       postfixUnaryExpression
                                        primaryExpression
                                         jumpExpression
                                          return
                                          expression
                                           disjunction
                                            conjunction
                                             equality
                                              comparison
                                               infixOperation
                                                elvisExpression
                                                 infixFunctionCall
                                                  rangeExpression
                                                   additiveExpression
                                                    multiplicativeExpression
                                                     asExpression
                                                      prefixUnaryExpression
                                                       unaryPrefix
                                                        prefixUnaryOperator
                                                         -
                                                       postfixUnaryExpression
                                                        primaryExpression
                                                         literalConstant
                                                          1
       ;
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        x
       semis
        ;
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     foo
    classBody
     {
     \n
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        classDeclaration
         class
         simpleIdentifier
          foo
         classBody
          {
          \n
          classMemberDeclarations
           classMemberDeclaration
            declaration
             objectDeclaration
              object
              simpleIdentifier
               foo
              classBody
               {
               \n
               \n
               classMemberDeclarations
               }
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             classDeclaration
              class
              simpleIdentifier
               Bar
              classBody
               {
               classMemberDeclarations
               }
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             functionDeclaration
              fun
              simpleIdentifier
               foo
              functionValueParameters
               (
               )
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             propertyDeclaration
              val
              variableDeclaration
               simpleIdentifier
                x
              \n
              \n
           classMemberDeclaration
            declaration
             propertyDeclaration
              var
              variableDeclaration
               simpleIdentifier
                f
              \n
              \n
           classMemberDeclaration
            declaration
             typeAlias
              typealias
              simpleIdentifier
               foo
              =
              type_
               typeReference
                userType
                 simpleUserType
                  simpleIdentifier
                   bar
           semis
            \n
          }
      semis
       \n
       \n
      classMemberDeclaration
       declaration
        classDeclaration
         class
         simpleIdentifier
          Bar
         classBody
          {
          \n
          classMemberDeclarations
           classMemberDeclaration
            declaration
             objectDeclaration
              object
              simpleIdentifier
               foo
              classBody
               {
               \n
               classMemberDeclarations
                classMemberDeclaration
                 companionObject
                  companion
                  object
                  classBody
                   {
                   \n
                   \n
                   classMemberDeclarations
                   }
                semis
                 \n
                 \n
                classMemberDeclaration
                 companionObject
                  modifiers
                   modifier
                    visibilityModifier
                     private
                  companion
                  object
                  classBody
                   {
                   \n
                   \n
                   classMemberDeclarations
                   }
                semis
                 \n
                 \n
                classMemberDeclaration
                 companionObject
                  modifiers
                   modifier
                    visibilityModifier
                     private
                  companion
                  object
                  :
                  delegationSpecifiers
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     userType
                      simpleUserType
                       simpleIdentifier
                        Fooo
                  classBody
                   {
                   \n
                   \n
                   classMemberDeclarations
                   }
                semis
                 \n
                 \n
                classMemberDeclaration
                 companionObject
                  modifiers
                   modifier
                    visibilityModifier
                     private
                  companion
                  object
                  :
                  delegationSpecifiers
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     userType
                      simpleUserType
                       simpleIdentifier
                        Fooo
                   ,
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     explicitDelegation
                      userType
                       simpleUserType
                        simpleIdentifier
                         Bar
                      by
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     simpleIdentifier
                                      foo
                  classBody
                   {
                   \n
                   \n
                   classMemberDeclarations
                   }
                semis
                 \n
                 \n
                classMemberDeclaration
                 companionObject
                  modifiers
                   modifier
                    visibilityModifier
                     private
                  companion
                  object
                  :
                  delegationSpecifiers
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     userType
                      simpleUserType
                       simpleIdentifier
                        Fooo
                   ,
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     explicitDelegation
                      userType
                       simpleUserType
                        simpleIdentifier
                         Bar
                      by
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     simpleIdentifier
                                      foo
                   ,
                   annotatedDelegationSpecifier
                    delegationSpecifier
                     constructorInvocation
                      userType
                       simpleUserType
                        simpleIdentifier
                         Goo
                      valueArguments
                       (
                       )
                semis
                 \n
               }
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             classDeclaration
              class
              simpleIdentifier
               Bar
              classBody
               {
               classMemberDeclarations
               }
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             functionDeclaration
              fun
              simpleIdentifier
               foo
              functionValueParameters
               (
               )
           semis
            \n
            \n
           classMemberDeclaration
            declaration
             propertyDeclaration
              val
              variableDeclaration
               simpleIdentifier
                x
              \n
              \n
           classMemberDeclaration
            declaration
             propertyDeclaration
              var
              variableDeclaration
               simpleIdentifier
                f
              \n
              \n
           classMemberDeclaration
            declaration
             typeAlias
              typealias
              simpleIdentifier
               foo
              =
              type_
               typeReference
                userType
                 simpleUserType
                  simpleIdentifier
                   bar
           semis
            \n
          }
      semis
       \n
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          foo
         functionValueParameters
          (
          )
      semis
       \n
       \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           x
         \n
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         var
         variableDeclaration
          simpleIdentifier
           f
         \n
         \n
      classMemberDeclaration
       declaration
        typeAlias
         typealias
         simpleIdentifier
          foo
         =
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              bar
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        companion
        object
        classBody
         {
         \n
         \n
         classMemberDeclarations
         }
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        modifiers
         modifier
          visibilityModifier
           private
        companion
        object
        classBody
         {
         \n
         \n
         classMemberDeclarations
         }
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        modifiers
         modifier
          visibilityModifier
           private
        companion
        object
        :
        delegationSpecifiers
         annotatedDelegationSpecifier
          delegationSpecifier
           userType
            simpleUserType
             simpleIdentifier
              Fooo
        classBody
         {
         \n
         \n
         classMemberDeclarations
         }
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        modifiers
         modifier
          visibilityModifier
           private
        companion
        object
        :
        delegationSpecifiers
         annotatedDelegationSpecifier
          delegationSpecifier
           userType
            simpleUserType
             simpleIdentifier
              Fooo
         ,
         annotatedDelegationSpecifier
          delegationSpecifier
           explicitDelegation
            userType
             simpleUserType
              simpleIdentifier
               Bar
            by
            expression
             disjunction
              conjunction
               equality
                comparison
                 infixOperation
                  elvisExpression
                   infixFunctionCall
                    rangeExpression
                     additiveExpression
                      multiplicativeExpression
                       asExpression
                        prefixUnaryExpression
                         postfixUnaryExpression
                          primaryExpression
                           simpleIdentifier
                            foo
        classBody
         {
         \n
         \n
         classMemberDeclarations
         }
      semis
       \n
       \n
      classMemberDeclaration
       companionObject
        modifiers
         modifier
          visibilityModifier
           private
        companion
        object
        :
        delegationSpecifiers
         annotatedDelegationSpecifier
          delegationSpecifier
           userType
            simpleUserType
             simpleIdentifier
              Fooo
         ,
         annotatedDelegationSpecifier
          delegationSpecifier
           explicitDelegation
            userType
             simpleUserType
              simpleIdentifier
               Bar
            by
            expression
             disjunction
              conjunction
               equality
                comparison
                 infixOperation
                  elvisExpression
                   infixFunctionCall
                    rangeExpression
                     additiveExpression
                      multiplicativeExpression
                       asExpression
                        prefixUnaryExpression
                         postfixUnaryExpression
                          primaryExpression
                           simpleIdentifier
                            foo
         ,
         annotatedDelegationSpecifier
          delegationSpecifier
           constructorInvocation
            userType
             simpleUserType
              simpleIdentifier
               Goo
            valueArguments
             (
             )
      semis
       \n
       \n
       \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     a
    functionValueParameters
     (
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Unit
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      0x10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      '1'
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     stringLiteral
                      lineStringLiteral
                       "
                       lineStringContent
                        dsf
                       "
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     stringLiteral
                      multiLineStringLiteral
                       """
                       multiLineStringContent
                        dsf
                       """
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10.0
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
                    postfixUnarySuffix
                     navigationSuffix
                      memberAccessOperator
                       .
                      simpleIdentifier
                       dbl
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
                    postfixUnarySuffix
                     navigationSuffix
                      memberAccessOperator
                       .
                      simpleIdentifier
                       flt
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10.0
                    postfixUnarySuffix
                     navigationSuffix
                      memberAccessOperator
                       .
                      simpleIdentifier
                       dbl
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
                    postfixUnarySuffix
                     navigationSuffix
                      memberAccessOperator
                       .
                      simpleIdentifier
                       lng
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      true
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      false
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      null
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      this
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     superExpression
                      super
                      <
                      type_
                       typeReference
                        userType
                         simpleUserType
                          simpleIdentifier
                           sdf
                      >
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     parenthesizedExpression
                      (
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      10
                      )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Triple
                    postfixUnarySuffix
                     callSuffix
                      valueArguments
                       (
                       valueArgument
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        10
                       ,
                       valueArgument
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       stringLiteral
                                        lineStringLiteral
                                         "
                                         lineStringContent
                                          A
                                         "
                       ,
                       valueArgument
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        0xf
                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Foo
                    postfixUnarySuffix
                     callSuffix
                      valueArguments
                       (
                       valueArgument
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        bar
                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Foo
                    postfixUnarySuffix
                     typeArguments
                      <
                      typeProjection
                       type_
                        typeReference
                         userType
                          simpleUserType
                           simpleIdentifier
                            A
                      >
                    postfixUnarySuffix
                     callSuffix
                      valueArguments
                       (
                       valueArgument
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       simpleIdentifier
                                        bar
                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Foo
                    postfixUnarySuffix
                     callSuffix
                      valueArguments
                       (
                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     simpleIdentifier
                      Foo
                    postfixUnarySuffix
                     typeArguments
                      <
                      typeProjection
                       type_
                        typeReference
                         userType
                          simpleUserType
                           simpleIdentifier
                            bar
                      >
                    postfixUnarySuffix
                     callSuffix
                      valueArguments
                       (
                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     objectLiteral
                      object
                      :
                      delegationSpecifiers
                       annotatedDelegationSpecifier
                        delegationSpecifier
                         userType
                          simpleUserType
                           simpleIdentifier
                            Foo
                      classBody
                       {
                       classMemberDeclarations
                       }
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      throw
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     simpleIdentifier
                                      Foo
                                    postfixUnarySuffix
                                     callSuffix
                                      valueArguments
                                       (
                                       )
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      return
                      expression
                       disjunction
                        conjunction
                         equality
                          comparison
                           infixOperation
                            elvisExpression
                             infixFunctionCall
                              rangeExpression
                               additiveExpression
                                multiplicativeExpression
                                 asExpression
                                  prefixUnaryExpression
                                   postfixUnaryExpression
                                    primaryExpression
                                     literalConstant
                                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      break
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      break@la
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      continue
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     jumpExpression
                      continue@la
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      10
     ,
     functionValueParameter
      parameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            foo
      =
      expression
       disjunction
        conjunction
         equality
          comparison
           infixOperation
            elvisExpression
             infixFunctionCall
              rangeExpression
               additiveExpression
                multiplicativeExpression
                 asExpression
                  prefixUnaryExpression
                   postfixUnaryExpression
                    primaryExpression
                     literalConstant
                      0xffffffff
                    postfixUnarySuffix
                     navigationSuffix
                      memberAccessOperator
                       .
                      simpleIdentifier
                       lng
     )
    functionBody
     block
      {
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
                        expression
                         disjunction
                          conjunction
                           equality
                            comparison
                             infixOperation
                              elvisExpression
                               infixFunctionCall
                                rangeExpression
                                 additiveExpression
                                  multiplicativeExpression
                                   asExpression
                                    prefixUnaryExpression
                                     postfixUnaryExpression
                                      primaryExpression
                                       literalConstant
                                        10
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        return
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       literalConstant
                        10
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        break
       \n
       statement
        label
         la@
         \n
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        break@la
       \n
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        continue
       \n
       statement
        label
         la@
         \n
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       jumpExpression
                        continue@la
       semis
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      inheritanceModifier
       abstract
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      classModifier
       annotation
      \n
     modifier
      memberModifier
       override
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      inheritanceModifier
       abstract
      \n
     modifier
      visibilityModifier
       private
      \n
     modifier
      visibilityModifier
       protected
      \n
     modifier
      visibilityModifier
       public
      \n
     modifier
      visibilityModifier
       internal
      \n
    class
    simpleIdentifier
     Bar
    typeParameters
     <
     \n
     typeParameter
      typeParameterModifiers
       typeParameterModifier
        varianceModifier
         in
        \n
       typeParameterModifier
        varianceModifier
         out
        \n
      simpleIdentifier
       T
     >
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           abstract
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           enum
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           annotation
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           override
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           abstract
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           private
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           protected
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           public
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           internal
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           lazy
         \n
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    modifiers
     modifier
      visibilityModifier
       public
     modifier
      visibilityModifier
       protected
     modifier
      visibilityModifier
       private
     modifier
      visibilityModifier
       internal
      \n
     modifier
      inheritanceModifier
       abstract
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      classModifier
       annotation
      \n
     modifier
      memberModifier
       override
      \n
     modifier
      inheritanceModifier
       open
      \n
     modifier
      inheritanceModifier
       abstract
      \n
     modifier
      visibilityModifier
       private
      \n
     modifier
      visibilityModifier
       protected
      \n
     modifier
      visibilityModifier
       public
      \n
     modifier
      visibilityModifier
       internal
      \n
     modifier
      functionModifier
       suspend
      \n
    class
    simpleIdentifier
     Bar
    typeParameters
     <
     typeParameter
      simpleIdentifier
       abstract
     ,
     typeParameter
      typeParameterModifiers
       typeParameterModifier
        varianceModifier
         in
      simpleIdentifier
       enum
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           T
     ,
     typeParameter
      typeParameterModifiers
       typeParameterModifier
        varianceModifier
         out
      simpleIdentifier
       open
     \n
     >
    primaryConstructor
     classParameters
      (
      classParameter
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            B
      )
    :
    delegationSpecifiers
     annotatedDelegationSpecifier
      delegationSpecifier
       explicitDelegation
        userType
         simpleUserType
          simpleIdentifier
           A
        by
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        b
    classBody
     {
     \n
     classMemberDeclarations
      classMemberDeclaration
       declaration
        propertyDeclaration
         modifiers
          modifier
           visibilityModifier
            public
          modifier
           visibilityModifier
            protected
          modifier
           visibilityModifier
            private
          modifier
           visibilityModifier
            internal
         val
         variableDeclaration
          simpleIdentifier
           abstract
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           enum
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           annotation
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           override
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           open
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           abstract
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           private
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           protected
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           public
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           internal
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           lazy
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           wraps
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           import
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           where
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           by
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           get
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           set
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           public
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           private
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           protected
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           internal
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           field
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           property
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           receiver
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           param
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           setparam
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           lateinit
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           const
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           suspend
         \n
      classMemberDeclaration
       declaration
        propertyDeclaration
         val
         variableDeclaration
          simpleIdentifier
           coroutine
         \n
         getter
          get
          (
          )
          functionBody
           =
           expression
            disjunction
             conjunction
              equality
               comparison
                infixOperation
                 elvisExpression
                  infixFunctionCall
                   rangeExpression
                    additiveExpression
                     multiplicativeExpression
                      asExpression
                       prefixUnaryExpression
                        postfixUnaryExpression
                         primaryExpression
                          simpleIdentifier
                           a
         \n
         setter
          set
          (
          setterParameter
           simpleIdentifier
            S
           :
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                s
          )
          functionBody
           block
            {
            statements
            }
      semis
       \n
       \n
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         modifiers
          modifier
           visibilityModifier
            public
          modifier
           visibilityModifier
            protected
          modifier
           visibilityModifier
            private
          modifier
           visibilityModifier
            internal
           \n
         fun
         simpleIdentifier
          abstract
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              abstract
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          open
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              open
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          enum
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              enum
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          open
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              open
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          annotation
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              annotation
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          override
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              override
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          open
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              open
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          abstract
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              abstract
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          private
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              private
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          protected
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              protected
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          public
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              public
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          internal
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              internal
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          lazy
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              lazy
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          wraps
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              wraps
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          import
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              import
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          where
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              where
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          by
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              by
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          get
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              get
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          set
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              set
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          public
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              public
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          private
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              private
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          protected
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              protected
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          internal
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              internal
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          field
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              field
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          property
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              property
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          receiver
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              receiver
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          param
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              param
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          setparam
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              setparam
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          lateinit
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              lateinit
      semis
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          const
         functionValueParameters
          (
          )
         :
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              const
      semis
       \n
       \n
      classMemberDeclaration
       declaration
        functionDeclaration
         fun
         simpleIdentifier
          test
         functionValueParameters
          (
          functionValueParameter
           parameter
            simpleIdentifier
             abstract
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             open
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             enum
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             open
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             annotation
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             override
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             open
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             abstract
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             private
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             protected
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             public
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             internal
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             lazy
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             wraps
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             import
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             where
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             by
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             get
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             set
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             public
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             private
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             protected
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             internal
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             field
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             property
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             receiver
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             param
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             setparam
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             lateinit
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           parameter
            simpleIdentifier
             const
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          ,
          functionValueParameter
           modifiers
            modifier
             visibilityModifier
              public
            modifier
             visibilityModifier
              protected
            modifier
             visibilityModifier
              private
            modifier
             visibilityModifier
              internal
            modifier
             inheritanceModifier
              abstract
            modifier
             inheritanceModifier
              open
            modifier
             classModifier
              enum
            modifier
             inheritanceModifier
              open
            modifier
             classModifier
              annotation
            modifier
             memberModifier
              override
            modifier
             inheritanceModifier
              open
            modifier
             inheritanceModifier
              abstract
            modifier
             visibilityModifier
              private
            modifier
             visibilityModifier
              protected
            modifier
             visibilityModifier
              public
            modifier
             visibilityModifier
              internal
           parameter
            simpleIdentifier
             open
            :
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 t
          )
      semis
       \n
       \n
     }
  semis
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     F
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        foo
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            bar
      ,
      classParameter
       simpleIdentifier
        abstract
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        open
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        enum
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        open
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        annotation
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        override
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        open
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        abstract
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        private
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        protected
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        public
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        internal
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        lazy
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        wraps
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        import
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        where
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        by
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        get
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        set
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        public
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        private
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        protected
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        internal
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        field
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        property
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        receiver
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        param
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        setparam
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        lateinit
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       simpleIdentifier
        const
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            t
      ,
      classParameter
       modifiers
        modifier
         visibilityModifier
          public
        modifier
         visibilityModifier
          protected
        modifier
         visibilityModifier
          private
        modifier
         visibilityModifier
          internal
        modifier
         inheritanceModifier
          abstract
        modifier
         inheritanceModifier
          open
        modifier
         classModifier
          enum
        modifier
         inheritanceModifier
          open
        modifier
         classModifier
          annotation
        modifier
         memberModifier
          override
        modifier
         inheritanceModifier
          open
        modifier
         inheritanceModifier
          abstract
        modifier
         visibilityModifier
          private
        modifier
         visibilityModifier
          protected
        modifier
         visibilityModifier
          public
        modifier
         visibilityModifier
          internal
       simpleIdentifier
        open
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            b
      )
    classBody
     {
     \n
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     Foo
    typeParameters
     <
     typeParameter
      typeParameterModifiers
       typeParameterModifier
        varianceModifier
         out
      simpleIdentifier
       abstract
     ,
     typeParameter
      typeParameterModifiers
       typeParameterModifier
        varianceModifier
         out
      simpleIdentifier
       out
     >
    classBody
     {
     classMemberDeclarations
     }
  semis
   \n
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    simpleIdentifier
     f
    functionValueParameters
     (
     )
    functionBody
     block
      {
      \n
      \n
      \n
      statements
       statement
        expression
         disjunction
          conjunction
           equality
            comparison
             infixOperation
              elvisExpression
               infixFunctionCall
                rangeExpression
                 additiveExpression
                  multiplicativeExpression
                   asExpression
                    prefixUnaryExpression
                     postfixUnaryExpression
                      primaryExpression
                       simpleIdentifier
                        Foo
                      postfixUnarySuffix
                       typeArguments
                        <
                        typeProjection
                         typeProjectionModifiers
                          typeProjectionModifier
                           varianceModifier
                            out
                         type_
                          typeReference
                           userType
                            simpleUserType
                             simpleIdentifier
                              Int
                        >
       semis
        \n
        \n
      }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    interface
    simpleIdentifier
     TestTrait
    primaryConstructor
     classParameters
      (
      classParameter
       val
       simpleIdentifier
        a
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Int
      ,
      classParameter
       var
       simpleIdentifier
        b
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            String
      ,
      classParameter
       simpleIdentifier
        c
       :
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Double
      )
  semis
   \n
 topLevelObject
  declaration
   classDeclaration
    interface
    simpleIdentifier
     TestTrait
    primaryConstructor
     classParameters
      (
      )
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           foo
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       A
     ,
     typeParameter
      simpleIdentifier
       B
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       A
     ,
     typeParameter
      simpleIdentifier
       B
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           A
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   ;
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   ;
   \n
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           foo
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   ;
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       A
     ,
     typeParameter
      simpleIdentifier
       B
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   ;
   \n
 topLevelObject
  declaration
   typeAlias
    typealias
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       A
     ,
     typeParameter
      simpleIdentifier
       B
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           A
     >
    =
    type_
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         bar
  semis
   ;
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   classDeclaration
    class
    simpleIdentifier
     foo
    typeParameters
     <
     typeParameter
      simpleIdentifier
       T
     >
    typeConstraints
     where
     typeConstraint
      simpleIdentifier
       T
      :
      type_
       typeReference
        userType
         simpleUserType
          simpleIdentifier
           T
    classBody
     {
     \n
     \n
     classMemberDeclarations
     }
  semis
   \n
   \n
   \n
   \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p1
     :
     type_
      typeModifiers
       typeModifier
        suspend
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p2
     :
     type_
      typeModifiers
       typeModifier
        suspend
      functionType
       functionTypeParameters
        (
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p3
     :
     type_
      typeModifiers
       typeModifier
        suspend
      functionType
       functionTypeParameters
        (
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
        )
       ->
       type_
        typeModifiers
         typeModifier
          suspend
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p4
     :
     type_
      typeModifiers
       typeModifier
        suspend
      functionType
       receiverType
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
       .
       functionTypeParameters
        (
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p4a
     :
     type_
      typeModifiers
       typeModifier
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
      functionType
       receiverType
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
       .
       functionTypeParameters
        (
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p5
     :
     type_
      functionType
       receiverType
        parenthesizedType
         (
         type_
          typeModifiers
           typeModifier
            suspend
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              a
         )
       .
       functionTypeParameters
        (
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p5a
     :
     type_
      functionType
       receiverType
        parenthesizedType
         (
         type_
          typeModifiers
           typeModifier
            annotation
             singleAnnotation
              @
              unescapedAnnotation
               userType
                simpleUserType
                 simpleIdentifier
                  a
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              a
         )
       .
       functionTypeParameters
        (
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p6
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
         typeArguments
          <
          typeProjection
           typeProjectionModifiers
            typeProjectionModifier
             varianceModifier
              in
           type_
            typeModifiers
             typeModifier
              suspend
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
          >
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p7
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
         typeArguments
          <
          typeProjection
           typeProjectionModifiers
            typeProjectionModifier
             varianceModifier
              out
           type_
            typeModifiers
             typeModifier
              suspend
             typeModifier
              annotation
               singleAnnotation
                @
                unescapedAnnotation
                 userType
                  simpleUserType
                   simpleIdentifier
                    a
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
          >
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p8
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
         typeArguments
          <
          typeProjection
           typeProjectionModifiers
            typeProjectionModifier
             varianceModifier
              out
            typeProjectionModifier
             annotation
              singleAnnotation
               @
               unescapedAnnotation
                userType
                 simpleUserType
                  simpleIdentifier
                   a
           type_
            typeModifiers
             typeModifier
              suspend
             typeModifier
              annotation
               singleAnnotation
                @
                unescapedAnnotation
                 userType
                  simpleUserType
                   simpleIdentifier
                    a
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
          >
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p9
     :
     type_
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
         typeArguments
          <
          typeProjection
           typeProjectionModifiers
            typeProjectionModifier
             varianceModifier
              out
            typeProjectionModifier
             annotation
              multiAnnotation
               @
               [
               unescapedAnnotation
                userType
                 simpleUserType
                  simpleIdentifier
                   a
               ]
           type_
            typeModifiers
             typeModifier
              suspend
             typeModifier
              annotation
               multiAnnotation
                @
                [
                unescapedAnnotation
                 userType
                  simpleUserType
                   simpleIdentifier
                    a
                ]
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
          >
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p10
     :
     type_
      typeModifiers
       typeModifier
        suspend
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
         typeArguments
          <
          typeProjection
           type_
            typeReference
             userType
              simpleUserType
               simpleIdentifier
                a
          >
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p11
     :
     type_
      typeModifiers
       typeModifier
        suspend
       typeModifier
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p12
     :
     type_
      typeModifiers
       typeModifier
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
       typeModifier
        suspend
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p13
     :
     type_
      typeModifiers
       typeModifier
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
       typeModifier
        suspend
       typeModifier
        annotation
         singleAnnotation
          @
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p14
     :
     type_
      typeModifiers
       typeModifier
        annotation
         multiAnnotation
          @
          [
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
          ]
       typeModifier
        suspend
       typeModifier
        annotation
         multiAnnotation
          @
          [
          unescapedAnnotation
           userType
            simpleUserType
             simpleIdentifier
              a
          ]
      typeReference
       userType
        simpleUserType
         simpleIdentifier
          a
    \n
 topLevelObject
  declaration
   propertyDeclaration
    val
    variableDeclaration
     simpleIdentifier
      p15
     :
     type_
      typeModifiers
       typeModifier
        suspend
      functionType
       functionTypeParameters
        (
        type_
         typeModifiers
          typeModifier
           suspend
         parenthesizedType
          (
          type_
           functionType
            functionTypeParameters
             (
             )
            ->
            type_
             typeReference
              userType
               simpleUserType
                simpleIdentifier
                 Unit
          )
        )
       ->
       type_
        typeReference
         userType
          simpleUserType
           simpleIdentifier
            Unit
    \n
    \n
 topLevelObject
  declaration
   functionDeclaration
    modifiers
     annotation
      singleAnnotation
       @
       unescapedAnnotation
        userType
         simpleUserType
          simpleIdentifier
           a
    fun
    receiverType
     typeModifiers
      typeModifier
       annotation
        singleAnnotation
         @
         unescapedAnnotation
          userType
           simpleUserType
            simpleIdentifier
             a
     typeReference
      userType
       simpleUserType
        simpleIdentifier
         a
    .
    simpleIdentifier
     f1
    functionValueParameters
     (
     )
    functionBody
     block
      {
      statements
      }
  semis
   \n
 topLevelObject
  declaration
   functionDeclaration
    fun
    receiverType
     parenthesizedType
      (
      type_
       typeModifiers
        typeModifier
         annotation
          singleAnnotation
           @
           unescapedAnnotation
            userType
             simpleUserType
              simpleIdentifier
               a
       functionType
        receiverType
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
        .
        functionTypeParameters
         (
         type_
          typeReference
           userType
            simpleUserType
             simpleIdentifier
              a
         )
        ->
        type_
         typeReference
          userType
           simpleUserType
            simpleIdentifier
             a
      )
    .
    simpleIdentifier
     f2
    functionValueParameters
     (
     )
    functionBody
     block
      {
      statements
      }
  semis
   <EOF>
 <EOF>
